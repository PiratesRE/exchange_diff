using System;
using System.Linq;
using System.Management.Automation;
using Microsoft.Exchange.Configuration.Tasks;
using Microsoft.Exchange.Data;
using Microsoft.Exchange.Data.Common;
using Microsoft.Exchange.Data.Directory;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Management.Tasks;

namespace Microsoft.Exchange.Management.SystemConfigurationTasks
{
	[Cmdlet("Set", "MalwareFilterPolicy", SupportsShouldProcess = true, DefaultParameterSetName = "Identity")]
	public sealed class SetMalwareFilterPolicy : SetSystemConfigurationObjectTask<MalwareFilterPolicyIdParameter, MalwareFilterPolicy>
	{
		[Parameter(Mandatory = false)]
		public SwitchParameter MakeDefault
		{
			get
			{
				if (!base.Fields.Contains("MakeDefault"))
				{
					return new SwitchParameter(false);
				}
				return (SwitchParameter)base.Fields["MakeDefault"];
			}
			set
			{
				base.Fields["MakeDefault"] = value;
			}
		}

		[Parameter]
		public SwitchParameter IgnoreDehydratedFlag { get; set; }

		protected override LocalizedString ConfirmationMessage
		{
			get
			{
				return Strings.ConfirmationMessageSetMalwareFilterPolicy(this.Identity.ToString());
			}
		}

		protected override SharedTenantConfigurationMode SharedTenantConfigurationMode
		{
			get
			{
				if (!this.IgnoreDehydratedFlag)
				{
					return SharedTenantConfigurationMode.Dehydrateable;
				}
				return SharedTenantConfigurationMode.NotShared;
			}
		}

		protected override void InternalValidate()
		{
			TaskLogger.LogEnter();
			base.InternalValidate();
			((IConfigurationSession)base.DataSession).SessionSettings.IsSharedConfigChecked = true;
			if (!this.IgnoreDehydratedFlag)
			{
				SharedConfigurationTaskHelper.VerifyIsNotTinyTenant(base.CurrentOrgState, new Task.ErrorLoggerDelegate(base.WriteError));
			}
			TaskLogger.LogExit();
		}

		protected override void InternalProcessRecord()
		{
			TaskLogger.LogEnter();
			if (SharedConfiguration.IsSharedConfiguration(this.DataObject.OrganizationId) && !base.ShouldContinue(Strings.ConfirmSharedConfiguration(this.DataObject.OrganizationId.OrganizationalUnit.Name)))
			{
				TaskLogger.LogExit();
				return;
			}
			if (this.DataObject.IsConflicted())
			{
				base.WriteError(new OperationNotAllowedException(Strings.ConflictedPolicyUpdateNotAllowed), ErrorCategory.InvalidOperation, this.DataObject.Identity);
			}
			MalwareFilterPolicy malwareFilterPolicy = null;
			if (this.MakeDefault && !this.DataObject.IsDefault)
			{
				this.DataObject.IsDefault = true;
				malwareFilterPolicy = this.GetDefaultMalwareFilterPolicy();
				if (malwareFilterPolicy != null && malwareFilterPolicy.IsDefault)
				{
					malwareFilterPolicy.IsDefault = false;
					base.DataSession.Save(malwareFilterPolicy);
				}
			}
			else if (base.Fields.Contains("MakeDefault") && !this.MakeDefault && this.DataObject.IsDefault)
			{
				MalwareFilterPolicy[] allDefaultMalwareFilterPolicies = this.GetAllDefaultMalwareFilterPolicies();
				if (allDefaultMalwareFilterPolicies.Length > 1 && !this.DataObject.IsConflicted())
				{
					foreach (MalwareFilterPolicy malwareFilterPolicy2 in allDefaultMalwareFilterPolicies)
					{
						if (malwareFilterPolicy2.IsConflicted())
						{
							malwareFilterPolicy2.IsDefault = false;
							base.DataSession.Save(malwareFilterPolicy2);
						}
					}
				}
				else
				{
					base.WriteError(new OperationNotAllowedException(Strings.OperationNotAllowed), ErrorCategory.InvalidOperation, this.MakeDefault);
				}
			}
			try
			{
				base.InternalProcessRecord();
				malwareFilterPolicy = null;
			}
			finally
			{
				if (malwareFilterPolicy != null)
				{
					malwareFilterPolicy.IsDefault = true;
					base.DataSession.Save(malwareFilterPolicy);
				}
			}
			TaskLogger.LogExit();
		}

		private MalwareFilterPolicy[] GetAllDefaultMalwareFilterPolicies()
		{
			QueryFilter filter = new ComparisonFilter(ComparisonOperator.Equal, MalwareFilterPolicySchema.IsDefault, true);
			IConfigurable[] array = base.DataSession.Find<MalwareFilterPolicy>(filter, null, true, null);
			if (array == null || array.Length == 0)
			{
				return null;
			}
			return Array.ConvertAll<IConfigurable, MalwareFilterPolicy>(array, (IConfigurable item) => (MalwareFilterPolicy)item);
		}

		private MalwareFilterPolicy GetDefaultMalwareFilterPolicy()
		{
			MalwareFilterPolicy[] allDefaultMalwareFilterPolicies = this.GetAllDefaultMalwareFilterPolicies();
			return allDefaultMalwareFilterPolicies.FirstOrDefault<MalwareFilterPolicy>();
		}

		private const string MakeDefaultStr = "MakeDefault";
	}
}
