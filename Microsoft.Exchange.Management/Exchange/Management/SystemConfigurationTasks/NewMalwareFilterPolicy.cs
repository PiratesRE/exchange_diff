using System;
using System.Management.Automation;
using Microsoft.Exchange.Configuration.Tasks;
using Microsoft.Exchange.Data;
using Microsoft.Exchange.Data.Common;
using Microsoft.Exchange.Data.Directory;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Management.Tasks;

namespace Microsoft.Exchange.Management.SystemConfigurationTasks
{
	[Cmdlet("New", "MalwareFilterPolicy", SupportsShouldProcess = true)]
	public sealed class NewMalwareFilterPolicy : NewMultitenancySystemConfigurationObjectTask<MalwareFilterPolicy>
	{
		[Parameter]
		public override SwitchParameter IgnoreDehydratedFlag { get; set; }

		[Parameter(Mandatory = true, Position = 0)]
		public new string Name
		{
			get
			{
				return base.Name;
			}
			set
			{
				base.Name = value;
			}
		}

		[Parameter]
		public string AdminDisplayName
		{
			get
			{
				return this.DataObject.AdminDisplayName;
			}
			set
			{
				this.DataObject.AdminDisplayName = value;
			}
		}

		[Parameter]
		public string CustomAlertText
		{
			get
			{
				return this.DataObject.CustomAlertText;
			}
			set
			{
				this.DataObject.CustomAlertText = value;
			}
		}

		[Parameter]
		public string CustomInternalSubject
		{
			get
			{
				return this.DataObject.CustomInternalSubject;
			}
			set
			{
				this.DataObject.CustomInternalSubject = value;
			}
		}

		[Parameter]
		public string CustomInternalBody
		{
			get
			{
				return this.DataObject.CustomInternalBody;
			}
			set
			{
				this.DataObject.CustomInternalBody = value;
			}
		}

		[Parameter]
		public string CustomExternalSubject
		{
			get
			{
				return this.DataObject.CustomExternalSubject;
			}
			set
			{
				this.DataObject.CustomExternalSubject = value;
			}
		}

		[Parameter]
		public string CustomExternalBody
		{
			get
			{
				return this.DataObject.CustomExternalBody;
			}
			set
			{
				this.DataObject.CustomExternalBody = value;
			}
		}

		[Parameter]
		public string CustomFromName
		{
			get
			{
				return this.DataObject.CustomFromName;
			}
			set
			{
				this.DataObject.CustomFromName = value;
			}
		}

		[Parameter]
		public SmtpAddress CustomFromAddress
		{
			get
			{
				return this.DataObject.CustomFromAddress;
			}
			set
			{
				this.DataObject.CustomFromAddress = value;
			}
		}

		[Parameter]
		public bool BypassInboundMessages
		{
			get
			{
				return this.DataObject.BypassInboundMessages;
			}
			set
			{
				this.DataObject.BypassInboundMessages = value;
			}
		}

		[Parameter]
		public bool BypassOutboundMessages
		{
			get
			{
				return this.DataObject.BypassOutboundMessages;
			}
			set
			{
				this.DataObject.BypassOutboundMessages = value;
			}
		}

		[Parameter]
		public MalwareFilteringAction Action
		{
			get
			{
				return this.DataObject.Action;
			}
			set
			{
				this.DataObject.Action = value;
			}
		}

		[Parameter]
		public bool CustomNotifications
		{
			get
			{
				return this.DataObject.CustomNotifications;
			}
			set
			{
				this.DataObject.CustomNotifications = value;
			}
		}

		[Parameter]
		public bool EnableInternalSenderNotifications
		{
			get
			{
				return this.DataObject.EnableInternalSenderNotifications;
			}
			set
			{
				this.DataObject.EnableInternalSenderNotifications = value;
			}
		}

		[Parameter]
		public bool EnableExternalSenderNotifications
		{
			get
			{
				return this.DataObject.EnableExternalSenderNotifications;
			}
			set
			{
				this.DataObject.EnableExternalSenderNotifications = value;
			}
		}

		[Parameter]
		public bool EnableInternalSenderAdminNotifications
		{
			get
			{
				return this.DataObject.EnableInternalSenderAdminNotifications;
			}
			set
			{
				this.DataObject.EnableInternalSenderAdminNotifications = value;
			}
		}

		[Parameter]
		public bool EnableExternalSenderAdminNotifications
		{
			get
			{
				return this.DataObject.EnableExternalSenderAdminNotifications;
			}
			set
			{
				this.DataObject.EnableExternalSenderAdminNotifications = value;
			}
		}

		[Parameter]
		public SmtpAddress InternalSenderAdminAddress
		{
			get
			{
				return this.DataObject.InternalSenderAdminAddress;
			}
			set
			{
				this.DataObject.InternalSenderAdminAddress = value;
			}
		}

		[Parameter]
		public SmtpAddress ExternalSenderAdminAddress
		{
			get
			{
				return this.DataObject.ExternalSenderAdminAddress;
			}
			set
			{
				this.DataObject.ExternalSenderAdminAddress = value;
			}
		}

		protected override LocalizedString ConfirmationMessage
		{
			get
			{
				return Strings.ConfirmationMessageNewMalwareFilterPolicy(this.Name);
			}
		}

		protected override SharedTenantConfigurationMode SharedTenantConfigurationMode
		{
			get
			{
				if (!this.IgnoreDehydratedFlag)
				{
					return SharedTenantConfigurationMode.Dehydrateable;
				}
				return SharedTenantConfigurationMode.NotShared;
			}
		}

		protected override IConfigurable PrepareDataObject()
		{
			TaskLogger.LogEnter();
			MalwareFilterPolicy malwareFilterPolicy = (MalwareFilterPolicy)base.PrepareDataObject();
			malwareFilterPolicy.SetId((IConfigurationSession)base.DataSession, this.Name);
			if (!this.MalwareFilterPolicyExist())
			{
				this.DataObject.IsDefault = true;
			}
			TaskLogger.LogExit();
			return malwareFilterPolicy;
		}

		protected override void InternalProcessRecord()
		{
			TaskLogger.LogEnter();
			if (SharedConfiguration.IsSharedConfiguration(this.DataObject.OrganizationId) && !base.ShouldContinue(Strings.ConfirmSharedConfiguration(this.DataObject.OrganizationId.OrganizationalUnit.Name)))
			{
				TaskLogger.LogExit();
				return;
			}
			base.CreateParentContainerIfNeeded(this.DataObject);
			base.InternalProcessRecord();
			TaskLogger.LogExit();
		}

		private bool MalwareFilterPolicyExist()
		{
			QueryFilter filter = new ComparisonFilter(ComparisonOperator.Equal, ADObjectSchema.ExchangeVersion, ExchangeObjectVersion.Exchange2012);
			MalwareFilterPolicy[] array = ((IConfigurationSession)base.DataSession).Find<MalwareFilterPolicy>(null, QueryScope.SubTree, filter, null, 1);
			return array.Length != 0;
		}
	}
}
