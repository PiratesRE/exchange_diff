<?xml version="1.0" encoding="utf-8"?>
<SetupComponentInfo Name="Search Foundation Service Configuration" DescriptionId="SetupComponentConfiguringSearchFoundationService">
  <ServerTasks>
    <!-- Install/Remove the Search Foundation service -->
    <ServerTaskInfo Id="_9f5053e82ecb4a8f9790bdf498c0664d" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Standalone>
            if ($RoleProductPlatform -eq "amd64")
            {
                try
                {
                    # Need to configure the ETL traces before the fast service is installed. This will ensure that when the service comes up
                    # it will have the necessary trace session setting available to read from the registry
                    $fastPerfEtlTraceFolderPath = Join-Path -Path $RoleBinPath -ChildPath "\Search\Ceres\Diagnostics\ETLTraces"
                    $fastDiagnosticTracingRegKeyPath = 'HKLM:\SOFTWARE\Microsoft\Office Server\16.0\Search\Diagnostics\Tracing'
                    if(-not(Test-Path -Path $fastPerfEtlTraceFolderPath))
                    {
                        $null = New-Item $fastPerfEtlTraceFolderPath -Type 'Directory' -Force 
                    }
                    
                    if (-not(Test-Path -Path $fastDiagnosticTracingRegKeyPath))
                    {
                        $null = New-Item -Path $fastDiagnosticTracingRegKeyPath -Force
                    }
                    
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'TracingPath' -PropertyType 'string' -Value $fastPerfEtlTraceFolderPath -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'TracingFileName' -PropertyType 'string' -Value 'DocumentProcessingTrace' -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'DocumentParserSuccessLogMessage' -PropertyType 'Dword' -Value 1 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'DocumentParserLoggingNoInitialisation' -PropertyType 'Dword' -Value 1 -Force
                    
                    # Max trace folder size 50 * 100 = 5GB
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'MaxTraceFileSize' -PropertyType 'Dword' -Value 50 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'MaxTraceFileCount' -PropertyType 'Dword' -Value 100 -Force
                    
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'UseGeneralSwitch' -PropertyType 'Dword' -Value 1 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'GeneralSwitch' -PropertyType 'Dword' -Value 1 -Force                    
                }
                catch
                {
                    # ETl tracing is not critical. Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while trying to Configure the FAST ETL traces. Exception: " + $_.Exception.Message);
                }
                
                $fastInstallConfigPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\Installer";
                $command = Join-Path -Path $fastInstallConfigPath -ChildPath "InstallConfig.ps1";
                $dataFolderPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\HostController\Data";

                try
                {
                    # the BasePort value MUST be kept in sync with dev\Search\src\OperatorSchema\SearchConfig.cs
                    &amp;$command -action i -baseport 3800 -dataFolder $dataFolderPath -silent;
                }
                catch
                {
                    $errorMsg = "Failure configuring SearchFoundation through installconfig.ps1 - " + $_.Exception.Message;
                    Write-ExchangeSetupLog -Error $errorMsg;
                    
                    # Clean up the failed configuration attempt.
                    &amp;$command -action u -silent;
                    try
                    {
                        if ([System.IO.Directory]::Exists($dataFolderPath))
                        {
                            [System.IO.Directory]::Delete($dataFolderPath, $true);
                        }
                    }
                    catch
                    {
                        $deleteErrorMsg = "Failure cleaning up SearchFoundation Data folder. - " + $dataFolderPath + " - " + $_.Exception.Message;
                        Write-ExchangeSetupLog -Error $deleteErrorMsg;
                    }
                }
                
               # Set the PowerShell Snap-in's public key tokens
                try
                {
                    $PowerShellSnapinsPath = "HKLM:\SOFTWARE\Microsoft\PowerShell\1\PowerShellSnapIns\";
                    $FastSnapinNames = @("EnginePSSnapin", "HostControllerPSSnapIn", "InteractionEnginePSSnapIn", "JunoPSSnapin", "SearchCorePSSnapIn");
                    $officePublicKey = "71E9BCE111E9429C";
                    $exchangePublicKey = "31bf3856ad364e35";
                    foreach ($fastSnapinName in $FastSnapinNames)
                    {
                        $fastSnapinPath = $PowerShellSnapinsPath + $fastSnapinName;
                        $assemblyNameProperty = Get-ItemProperty -Path $fastSnapinPath -Name "AssemblyName" -ErrorAction SilentlyContinue;
                        if ($assemblyNameProperty -ne $null -and (-not [string]::IsNullOrEmpty($assemblyNameProperty.AssemblyName)))
                        {
                            $newAssemblyName = $assemblyNameProperty.AssemblyName -ireplace ($officePublicKey, $exchangePublicKey);
                            Set-ItemProperty -Path $fastSnapinPath -Name "AssemblyName" -Value $newAssemblyName;
                        }
                    }
                }
                catch
                {
                    # Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while configuring Search Foundation PowerShell Snapin. Exception: " + $_.Exception.Message);
                }
            }
        </Standalone>
      </Install>
      <BuildToBuildUpgrade>
        <Standalone>
            if ($RoleProductPlatform -eq "amd64")
            {
                try
                {
                    # Need to configure the ETL traces before the fast service is installed. This will ensure that when the service comes up
                    # it will have the necessary trace session setting available to read from the registry
                    $fastPerfEtlTraceFolderPath = Join-Path -Path $RoleBinPath -ChildPath "\Search\Ceres\Diagnostics\ETLTraces"
                    $fastDiagnosticTracingRegKeyPath = 'HKLM:\SOFTWARE\Microsoft\Office Server\16.0\Search\Diagnostics\Tracing'
                    if(-not(Test-Path -Path $fastPerfEtlTraceFolderPath))
                    {
                        $null = New-Item $fastPerfEtlTraceFolderPath -Type 'Directory' -Force 
                    }
                    
                    if (-not(Test-Path -Path $fastDiagnosticTracingRegKeyPath))
                    {
                        $null = New-Item -Path $fastDiagnosticTracingRegKeyPath -Force
                    }
                    
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'TracingPath' -PropertyType 'string' -Value $fastPerfEtlTraceFolderPath -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'TracingFileName' -PropertyType 'string' -Value 'DocumentProcessingTrace' -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'DocumentParserSuccessLogMessage' -PropertyType 'Dword' -Value 1 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'DocumentParserLoggingNoInitialisation' -PropertyType 'Dword' -Value 1 -Force
                    
                    # Max trace folder size 50 * 100 = 5GB
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'MaxTraceFileSize' -PropertyType 'Dword' -Value 50 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'MaxTraceFileCount' -PropertyType 'Dword' -Value 100 -Force
                    
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'UseGeneralSwitch' -PropertyType 'Dword' -Value 1 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'GeneralSwitch' -PropertyType 'Dword' -Value 1 -Force                    
                }
                catch
                {
                    # ETl tracing is not critical. Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while trying to Configure the FAST ETL traces. Exception: " + $_.Exception.Message);
                }

                try
                {
                    $fastFusionRegKeyPath = 'HKLM:\SOFTWARE\Microsoft\Office Server\16.0\Search\FlightControl' 

                    if (Test-Path -Path $fastFusionRegKeyPath)
                    {
                        Remove-ItemProperty -Path $fastFusionRegKeyPath -Name 'fusion_new_enabled' -Force -ErrorAction SilentlyContinue
                        Remove-ItemProperty -Path $fastFusionRegKeyPath -Name 'fusion_old_enabled' -Force -ErrorAction SilentlyContinue
                        Remove-ItemProperty -Path $fastFusionRegKeyPath -Name 'fusion_compare_outputs' -Force -ErrorAction SilentlyContinue
                    }
                }
                catch
                {
                    # Removing new fusion keys is not critical. Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while trying to remove the fast new fusion reg keys. Exception: " + $_.Exception.Message);
                }
                
                $fastInstallConfigPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\Installer";
                $command = Join-Path -Path $fastInstallConfigPath -ChildPath "InstallConfig.ps1";
                $dataFolderPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\HostController\Data";

                # Remove previous SearchFoundation configuration
                &amp;$command -action u -silent;
                try
                {
                    if ([System.IO.Directory]::Exists($dataFolderPath))
                    {
                        [System.IO.Directory]::Delete($dataFolderPath, $true);
                    }
                }
                catch
                {
                    $deleteErrorMsg = "Failure cleaning up SearchFoundation Data folder. - " + $dataFolderPath + " - " + $_.Exception.Message;
                    Write-ExchangeSetupLog -Error $deleteErrorMsg;
                }

                # Re-add the SearchFoundation configuration
                try
                {
                    # the BasePort value MUST be kept in sync with dev\Search\src\OperatorSchema\SearchConfig.cs
                    &amp;$command -action i -baseport 3800 -dataFolder $dataFolderPath -silent;
                }
                catch
                {
                    $errorMsg = "Failure configuring SearchFoundation through installconfig.ps1 - " + $_.Exception.Message;
                    Write-ExchangeSetupLog -Error $errorMsg;
                    
                    # Clean up the failed configuration attempt.
                    &amp;$command -action u -silent;
                    try
                    {
                        if ([System.IO.Directory]::Exists($dataFolderPath))
                        {
                            [System.IO.Directory]::Delete($dataFolderPath, $true);
                        }
                    }
                    catch
                    {
                        $deleteErrorMsg = "Failure cleaning up SearchFoundation Data folder. - " + $dataFolderPath + " - " + $_.Exception.Message;
                        Write-ExchangeSetupLog -Error $deleteErrorMsg;
                    }
                }
                
                # Set the PowerShell Snap-in's public key tokens
                try
                {
                    $PowerShellSnapinsPath = "HKLM:\SOFTWARE\Microsoft\PowerShell\1\PowerShellSnapIns\";
                    $FastSnapinNames = @("EnginePSSnapin", "HostControllerPSSnapIn", "InteractionEnginePSSnapIn", "JunoPSSnapin", "SearchCorePSSnapIn");
                    $officePublicKey = "71E9BCE111E9429C";
                    $exchangePublicKey = "31bf3856ad364e35";
                    foreach ($fastSnapinName in $FastSnapinNames)
                    {
                        $fastSnapinPath = $PowerShellSnapinsPath + $fastSnapinName;
                        $assemblyNameProperty = Get-ItemProperty -Path $fastSnapinPath -Name "AssemblyName" -ErrorAction SilentlyContinue;
                        if ($assemblyNameProperty -ne $null -and (-not [string]::IsNullOrEmpty($assemblyNameProperty.AssemblyName)))
                        {
                            $newAssemblyName = $assemblyNameProperty.AssemblyName -ireplace ($officePublicKey, $exchangePublicKey);
                            Set-ItemProperty -Path $fastSnapinPath -Name "AssemblyName" -Value $newAssemblyName;
                        }
                    }
                }
                catch
                {
                    # Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while configuring Search Foundation PowerShell Snapin. Exception: " + $_.Exception.Message);
                }
            }
        </Standalone>
      </BuildToBuildUpgrade>
      <DisasterRecovery UseInstallTasks="true" />
      <Uninstall IsFatal="false">
        <Standalone>
            if ($RoleProductPlatform -eq "amd64")
            {
                try
                {
                    $fastDiagnosticTracingRegKeyPath = 'HKLM:\SOFTWARE\Microsoft\Office Server\16.0\Search\Diagnostics\Tracing'
                    if (Test-Path -Path $fastDiagnosticTracingRegKeyPath)
                    {
                        Remove-Item $fastDiagnosticTracingRegKeyPath -Force
                    }
                }
                catch
                {
                    # ETl tracing is not critical. Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while trying to remove the fast tracing reg key. Exception: " + $_.Exception.Message);
                }

                try
                {
                    $fastFusionRegKeyPath = 'HKLM:\SOFTWARE\Microsoft\Office Server\16.0\Search\FlightControl' 

                    if (Test-Path -Path $fastFusionRegKeyPath)
                    {
                        Remove-ItemProperty -Path $fastFusionRegKeyPath -Name 'fusion_new_enabled' -Force -ErrorAction SilentlyContinue
                        Remove-ItemProperty -Path $fastFusionRegKeyPath -Name 'fusion_old_enabled' -Force -ErrorAction SilentlyContinue
                        Remove-ItemProperty -Path $fastFusionRegKeyPath -Name 'fusion_compare_outputs' -Force -ErrorAction SilentlyContinue
                    }
                }
                catch
                {
                    # Removing new fusion keys is not critical. Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while trying to remove the fast new fusion reg keys. Exception: " + $_.Exception.Message);
                }
                
                $fastInstallConfigPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\Installer";
                $dataFolderPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\HostController\Data";

                &amp;$fastInstallConfigPath\InstallConfig.ps1 -action u -silent;

                try
                {
                    if ([System.IO.Directory]::Exists($dataFolderPath))
                    {
                        [System.IO.Directory]::Delete($dataFolderPath, $true);
                    }
                }
                catch
                {
                    $deleteErrorMsg = "Failure cleaning up SearchFoundation Data folder. - " + $dataFolderPath + " - " + $_.Exception.Message;
                    Write-ExchangeSetupLog -Error $deleteErrorMsg;
                }
            }
        </Standalone>
      </Uninstall>
    </ServerTaskInfo>

    <!-- Adding Search Host Controller service dependency on http -->
    <ServerTaskInfo Id="_a8dc9f00151045b89b7a08f76a98cb30" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install IsFatal="false">
        <Standalone>
            if ($RoleProductPlatform -eq "amd64")
            {
                sc.exe config HostControllerService DisplayName= "Microsoft Exchange Search Host Controller" depend= http
                sc.exe failure HostControllerService reset= 86400 actions= restart/30/restart/30/restart/30
            }
        </Standalone>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <DisasterRecovery UseInstallTasks="true" />
      <Uninstall />
    </ServerTaskInfo>
  </ServerTasks>
</SetupComponentInfo>
