<?xml version="1.0" encoding="us-ascii"?>
<SetupComponentInfo Name="All Roles PostSetup" DescriptionId="SetupComponentPostSetupAllRoles">

  <ServerTasks>

    <!-- If all Exchange roles were uninstalled, then try to remove the files and folders now.  -->
    <ServerTaskInfo Id="RemoveExchangeFiles" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install />
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <DisasterRecovery UseInstallTasks="true" />
      <Uninstall>
        <Standalone>
          try
          {
            if (!(test-path 'HKLM:\SOFTWARE\Microsoft\ExchangeServer\V15\Setup'))
            {
              $installDir=$RoleInstallPath.TrimEnd("\")+"\bin\";

              Write-ExchangeSetupLog -info "Exchange has been uninstalled from this server.  Attempting to remove all files and folders in $installDir";

              Remove-Item ($installDir + "*") -Force -Confirm:$false -Recurse -ea SilentlyContinue;
            }
          }
          catch 
          {
            Write-ExchangeSetupLog -Warning "Exchange was uninstalled but was not able to remove all the files under the ExchangeServer folder.  Setup will continue.";
          }
        </Standalone>
      </Uninstall>
    </ServerTaskInfo>

    <!-- E14 528333: WMI must be started before running ServiceControl.ps1 if
         an ExecutionPolicy is being used -->
    <ServerTaskInfo Id="_d560f662b25a47149c1b66d4ff4797a4" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Standalone>
          if (Get-Service WinMgmt* | ?{$_.Name -eq 'WinMgmt'})
          {
            Set-Service WinMgmt -StartupType Automatic
            Start-SetupService -ServiceName WinMgmt
          }
        </Standalone>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <DisasterRecovery UseInstallTasks="true"/>
      <Uninstall/>
    </ServerTaskInfo>

    <!-- 
      Start services
       
      In Pre-Setup, we use the same script to stop any services that might hold
      Exchange files open, thereby thwarting our attempt to remove and reinstall them.
      This entry starts restores the services it stopped to their pre-setup state.
      
      This can take a long time, so we have a separate description id.  On average, we'll stop 
      8 services, so the weight is about 10.

      This requires permissions to start each of the services.
      
      Remove service state 
      
      The service control script remembers the state of all services when setup started.  
      At the end of the upgrade, we remove this file.
      
      Starting services and removing saved state should be done in one block. That
      way even if some service fails to start we'll still remove the state, so
      subsequent setup operations won't be confused.
    -->
    <ServerTaskInfo Id="_5e52892da2c44e6ebfd864cbaa16d775" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install Weight="10" DescriptionId="SetupProgressStartingServices" IsFatal="false">
        <Standalone>
          &amp; $RoleBinPath\ServiceControl.ps1 Start $RoleRoles.Replace('Role','').Split(',');
          &amp; $RoleBinPath\ServiceControl.ps1 Remove;
        </Standalone>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <DisasterRecovery UseInstallTasks="true"/>
      <Uninstall>
        <Standalone>
          if (Test-Path $RoleBinPath\ServiceControl.ps1)
          {
            &amp; $RoleBinPath\ServiceControl.ps1 Start $RoleRoles.Replace('Role','').Split(',');
            &amp; $RoleBinPath\ServiceControl.ps1 Remove;
          }
        </Standalone>
      </Uninstall>
    </ServerTaskInfo>

    <!-- E14 528333: WMI must be started before running ServiceControl.ps1 if
         an ExecutionPolicy is being used. Note that uninstall tasks run in reverse order. -->
    <ServerTaskInfo Id="_8ada2633c8b04a3a88a061ad5f59a017" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install/>
      <BuildToBuildUpgrade/>
      <DisasterRecovery/>
      <Uninstall>
        <Standalone>
          if (Get-Service WinMgmt* | ?{$_.Name -eq 'WinMgmt'})
          {
            Set-Service WinMgmt -StartupType Automatic
            Start-SetupService -ServiceName WinMgmt
          }
        </Standalone>
      </Uninstall>
    </ServerTaskInfo>

    <!-- 
      Remove backup reg keys made in pre setup 
      
      Setup needs a few registry values to perform an upgrade.  These values
      can be erased while removing the MSI.  If a failure occurs after the values
      are removed, but before the new MSI installs them, setup would normally be
      unable to start.  To recover from this situation, setup makes backups of the 
      important keys.  At the end of setup, they aren't needed, so are removed here.
    -->
    <ServerTaskInfo Id="_3bbbfdc43a8842778cb1ba3bf6a1d833" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install />
      <BuildToBuildUpgrade>
        <Standalone>
          $backupPath = 'HKLM:\SOFTWARE\Microsoft\ExchangeServer\v15\Setup-Save';
          if(test-path $backupPath)
          {
            remove-item -Recurse:$true -path:$backupPath
          }
        </Standalone>
      </BuildToBuildUpgrade>
      <DisasterRecovery />
      <Uninstall/>
    </ServerTaskInfo>

  <!-- At the end of setup, set the server state to Active.
       If the server can not be identified as an Exchange Server (installed with only MT role), then log message and continue with setup.
       If unable to set the server state, log the error but let setup finish. 
       om.1312080 We only skip the server state management if we get an AD result that the server was not found.
       Other AD errors should be fatal.
       -->        
    <ServerTaskInfo Id="SetServerStateForSetup" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Standalone>
            $Target = $env:COMPUTERNAME
            $expectSrv = $true
            $Error.Clear()
            try
            { 
              $exSrv = get-ExchangeServer $Target -ErrorAction Stop 
            } 
            catch 
            {
              if ($Error.Exception.GetType().Name -eq 'ManagementObjectNotFoundException') 
              {
                $expectSrv = $false;
                Write-ExchangeSetupLog -Warning "$Target is not an Exchange Server.  Unable to set monitoring and server state to active.  Setup will continue.";
              }
              else
              {
                Write-ExchangeSetupLog -Error "SetServerStateForSetup fails for $Target due to $Error";
              }
            }

            if ($exSrv -eq $null)
            {
              if (!$expectSrv)
              {
                return
              }
              throw "SetServerStateForSetup fails due to $Error";
            }

            Set-ServerComponentState $Target -Component Monitoring -Requester Functional -State Active
            Write-ExchangeSetupLog -Info "Install is complete.  Monitoring has been set to Active.";

            Set-ServerComponentState $Target -Component RecoveryActionsEnabled -Requester Functional -State Active
            Write-ExchangeSetupLog -Info "Install is complete.  RecoveryActionsEnabled has been set to Active.";

            Set-ServerComponentState $Target -Component ServerWideOffline -Requester Functional -State Active
            Write-ExchangeSetupLog -Info "Install is complete.  Server state has been set to Active.";
        </Standalone>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <DisasterRecovery UseInstallTasks="true" />
      <Uninstall />
    </ServerTaskInfo>
  </ServerTasks>
</SetupComponentInfo>
