<?xml version="1.0" encoding="us-ascii"?>
<SetupComponentInfo IsDatacenterOnly="true" IsDatacenterDedicatedOnly="true" Name="Datacenter Global AD Configuration">

  <OrgTasks>

    <!-- Set the Error Reporting Disabled registry key as early as possible -->
    <OrgTaskInfo Id="_FC5A7E7C057D437F803F0A45C0B61CAD" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="false">
      <Install>
        <Global>
          $watsonReportingDisabled = $RoleDatacenterWatsonDisabled;
          Write-ExchangeSetupLog -Info "Setting WER Disabled Regkey to $watsonReportingDisabled"
          $keyPaths = "HKLM:\Software\Microsoft\Windows\Windows Error Reporting\", "HKLM:\Software\Wow6432Node\Microsoft\Windows\Windows Error Reporting\";
          foreach ($keyPath in $keyPaths)
          {
            new-item $keyPath -force;
            new-itemproperty -path $keyPath -name "Disabled" -value $watsonReportingDisabled -force;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Modify (MaxNotificationPerConn) Directory Policy -->
    <OrgTaskInfo Id="_93A97B4FF1064e2eBD3FF88419CC52B5" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\AD Core" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>

          Write-Verbose "Updating Default Active Directory Query Policy";
          $ldapDefaultQueryPolicyName = [Microsoft.Exchange.Data.Directory.SystemConfiguration.ADQueryPolicy]::ADDefaultQueryPolicyName;
          $ldapDefaultQueryPolicy = Get-ADQueryPolicy $ldapDefaultQueryPolicyName -DomainController $RoleDomainController;

          if( $null -ne $ldapDefaultQueryPolicy )
          {
            Set-ADQueryPolicy $ldapDefaultQueryPolicy -MaxNotificationPerConnection 100 -DomainController $RoleDomainController;
          }
          else
          {
            # If we cannot find the policy we should fail, otherwise we will have unexpected behavior with notifications.
            Write-ExchangeSetupLog -Error "Unable to find Default Active Directory Query Policy";
          }

        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Install the Account Partitions container -->
    <OrgTaskInfo Id="_4C06960D617042e38AEEF0220B00B1A8" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $name = [Microsoft.Exchange.Data.Directory.SystemConfiguration.AccountPartition]::AccountForestContainerName;
          Install-Container -Name: $name -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Install the Resource Forest container -->
    <OrgTaskInfo Id="_7421010e1ae6429f950d5f1764856bb6" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Global>
          $name = [Microsoft.Exchange.Data.Directory.SystemConfiguration.AccountPartition]::ResourceForestContainerName;
          Install-Container -Name: $name -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>


    <!-- Install the SyncDaemonArbitrationConfig container -->
    <OrgTaskInfo Id="_def0a6431eb049e8bf004126c3c1c32d" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            Install-SyncDaemonArbitrationConfigContainer;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Install the ProvisioningReconciliationConfig-->
    <OrgTaskInfo Id="_104ccccb9bd9499f80d83387e3cc85ec" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            Install-ProvisioningReconciliationConfig;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the SyncDaemonArbitrationConfig settings -->
    <OrgTaskInfo Id="_c6a250b1554f4e8d874b52017a40094a" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            Set-SyncDaemonArbitrationConfig -ActiveInstanceSleepInterval $RoleDatacenterSyncDaemonActiveInstanceSleepInterval -PassiveInstanceSleepInterval $RoleDatacenterSyncDaemonPassiveInstanceSleepInterval;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the ForwardSyncLiveIdBusinessInstance -->
    <OrgTaskInfo Id="_e92c6591c53f4a92a8b30dc6a2869308" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            Set-OrganizationConfig -ForwardSyncLiveIdBusinessInstance $RoleDatacenterForwardSyncLiveIdBusinessInstance;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Remove the old Windows LiveId Agent CmdletExtensionAgents for B2B upgrade -->
    <OrgTaskInfo Id="_c4e78df8cc784b4daeb6dfde45ed4f51" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global />
      </Install>
      <BuildToBuildUpgrade>
        <Global>
          Get-CmdletExtensionAgent -Assembly "Microsoft.Exchange.ProvisioningAgent.dll" -DomainController $RoleDomainController |
            foreach {
              if($_.ClassFactory -like "Microsoft.Exchange.ProvisioningAgent.WindowsLiveIdAgentClassFactory")
              {
                remove-CmdletExtensionAgent $_.Identity -DomainController $RoleDomainController;
              }
            }
        </Global>
        <Tenant />
      </BuildToBuildUpgrade>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Install Windows LiveId Agent CmdletExtensionAgents -->
    <!-- Put the Windows LiveId Agent after the Rus Agent to let Rus Agent execute first -->
    <!-- EnableMailbox plans Agent -->
    <!-- All agents here must be registered as Pri 0. Otherwise it will break Datacenter setup. See bug 65738. -->
    <OrgTaskInfo Id="_07afa36509d7435caf065c1a764c618e" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install DescriptionId="SetupProgressRegisterCmdletExtensionAgents">
        <Global>
          $WindowsLiveIdAgentInstalled=$false;
          Get-CmdletExtensionAgent -Assembly "Microsoft.Exchange.DatacenterProvisioningAgent.dll" -DomainController $RoleDomainController |
            foreach {
              if($_.ClassFactory -like "Microsoft.Exchange.ProvisioningAgent.WindowsLiveIdAgentClassFactory")
              {
                $WindowsLiveIdAgentInstalled = $true;
              }
            };

          if(!$WindowsLiveIdAgentInstalled)
          {
            New-CmdletExtensionAgent -Name "Windows LiveId Agent" -Assembly "Microsoft.Exchange.DatacenterProvisioningAgent.dll" -ClassFactory Microsoft.Exchange.ProvisioningAgent.WindowsLiveIdAgentClassFactory -DomainController $RoleDomainController -Priority 0;
          };
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Install Read-Only Organization Agent -->
    <OrgTaskInfo Id="InstallReadOnlyOrganizationAgent" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install DescriptionId="SetupProgressRegisterCmdletExtensionAgents">
        <Global>
          $assembly = "Microsoft.Exchange.DatacenterProvisioningAgent.dll"
          $classFactory = "Microsoft.Exchange.ProvisioningAgent.ReadOnlyOrganizationClassFactory"
          $installedAgents = Get-CmdletExtensionAgent -DomainController $RoleDomainController

          if (!($installedAgents | ?{$_.ClassFactory -ieq $classFactory}))
          {
            New-CmdletExtensionAgent -Name "Read-Only Organization Agent" -ClassFactory $classFactory -Assembly $assembly -DomainController $RoleDomainController
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Install Archive ParameterSet Enforcement Agent -->
    <!-- This provisioning agent will enforce tenant admin to run Enable-Mailbox and Disable-Mailbox -->
    <!-- cmdlets with -archive parameter. Currently running the two cmdlets alone by a tenant admin is -->
    <!-- not a supported scenario so it should be blocked. -->
    <OrgTaskInfo Id="InstallArchiveParameterSetEnforcementAgent" Component="EXCHANGE14:\Current\Release\PIM Storage\Compliance\Archive" ExcludeInDatacenterDedicated="true">
      <Install DescriptionId="SetupProgressRegisterCmdletExtensionAgents">
        <Global>
          $assembly = "Microsoft.Exchange.DatacenterProvisioningAgent.dll"
          $classFactory = "Microsoft.Exchange.ProvisioningAgent.ArchiveParameterSetEnforcementAgentClassFactory"
          $installedAgents = Get-CmdletExtensionAgent -DomainController $RoleDomainController

          if (!($installedAgents | ?{$_.ClassFactory -ieq $classFactory}))
          {
            New-CmdletExtensionAgent -Name "Archive ParameterSet Enforcement Agent" -ClassFactory $classFactory -Assembly $assembly -DomainController $RoleDomainController
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create Throttling Policy for partners. -->
    <OrgTaskInfo Id="_68F0E7219A24454e8CFC5FECD1A14051" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $name = [Microsoft.Exchange.Data.Directory.SystemConfiguration.ThrottlingPolicy]::PartnerThrottlingPolicyName;
          $policy = Get-ThrottlingPolicy -DomainController $RoleDomainController | ? {$_.Name -ieq $name}
          if($policy -eq $null)
          {
          $policy = New-ThrottlingPolicy -Name $name -DomainController $RoleDomainController
          }
          Set-ThrottlingPolicy $policy -IsServiceAccount -PowerShellMaxBurst unlimited -PowerShellRechargeRate unlimited -PowerShellCutoff unlimited -PowerShellMaxConcurrency 200 -PowerShellMaxCmdletQueueDepth 400 -PowershellMaxRunspaces unlimited -PowershellMaxRunspacesTimePeriod unlimited -PowershellMaxCmdlets 500 -PowerShellMaxOperations 500 -PswsMaxConcurrency 100 -PswsMaxRequest unlimited -PswsMaxRequestTimePeriod unlimited -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a linked user for WLCD -->
    <OrgTaskInfo Id="_42665dd47eeb46dd860e9458cfe54b83" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $upn = "WLCD-PartnerUser" + '@' + $RoleFullyQualifiedDomainName;
          $wlcdUser = Get-LinkedUser | where {$_.Name -ieq "WLCD-PartnerUser"};
          if($wlcdUser -eq $null)
          {
          New-LinkedUser -Name "WLCD-PartnerUser" -UserPrincipalName $upn;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject on the newly created user for WLCD -->
    <OrgTaskInfo Id="_5b2c5d1d3a494c13a9d06b29302e22a0" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-LinkedUser "WLCD-PartnerUser" -CertificateSubject $RoleDatacenterWLCDPartnerCertSubjects;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Add the applocker exemption group for this management forest -->
    <OrgTaskInfo Id="_e1a8a120500d4363869f29c951f10600" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          try
          {
            if($RoleDatacenterIsManagementForest -eq "True")
            {
              # Load Exchange Snapin
              Add-PSSnapin Microsoft.Exchange.Management.PowerShell.E2010 -ErrorAction SilentlyContinue;
              
              $WorkFlowTargetForest = (Get-ADDomain).DNSRoot
              $groupName = "AppLocker Exemption $WorkflowTargetForest"

              $group = Get-RoleGroup $groupName -ErrorAction SilentlyContinue

              if($group -eq $null)
              {
                New-RoleGroup $groupName -ErrorAction SilentlyContinue
              }
            }
          }
          catch
          {
           Write-Error $_
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Add the partner user to the Organization Management role group -->
    <OrgTaskInfo Id="_c9c1bf55d0d24e99b347efd5cb634283" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
        
          $orgAdminRoleGroup = [Microsoft.Exchange.Data.Directory.Management.RoleGroup]::OrganizationManagement_InitInfo.WellKnownGuid;
          $roleGroup = Get-RoleGroup -Identity $orgAdminRoleGroup;
          $orgManagementRoleGroupMembers = Get-RoleGroupMember -Identity $roleGroup;
          $wlcdUser = $orgManagementRoleGroupMembers | where { $_.Name -ieq "WLCD-PartnerUser" };
          if($wlcdUser -eq $null)
          {
             Add-RoleGroupMember -Identity $roleGroup.Identity -Member "WLCD-PartnerUser" -BypassSecurityGroupManagerCheck;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a ManagementRole for Exchange. This is used to make cross forest calls for get-managementendpoint -->
    <OrgTaskInfo Id="_9e88fe329b3047b9b09c4771245c0ad7" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $dataCenterOperationsRole = Get-ManagementRole -RoleType DataCenterOperations | where { $_.IsRootRole };
          $exchangeRole = Get-ManagementRole | where {$_.Name -ieq "ExchangeCrossForestRole"};
          if($exchangeRole -eq $null)
          {
             New-ManagementRole -Name "ExchangeCrossForestRole" -Parent $dataCenterOperationsRole;
             Get-managementroleentry ExchangeCrossForestRole\* | where {$_.Name -ne "Get-Organization"} | remove-managementroleentry -Confirm:$false;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the linked user for WLCD   -->
    <OrgTaskInfo Id="_C80E21C6384F4d11A02389634093A218" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "WLCD-PartnerUser" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Create a linked user for Exchange -->
    <OrgTaskInfo Id="_f4329030e93e401ebe537583afc4afd4" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $upn = "ExchangeCrossForestUser" + '@' + $RoleFullyQualifiedDomainName;
          $exchangeUser = Get-LinkedUser | where {$_.Name -ieq "ExchangeCrossForestUser"};
          if($exchangeUser -eq $null)
          {
              New-LinkedUser -Name "ExchangeCrossForestUser" -UserPrincipalName $upn;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject on the newly created user for Exchange -->
    <OrgTaskInfo Id="_79f5526aa1614ef592b2870a296e681e" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>

            # Only set this particular certificate in EXO, skip if in FFO. The certificate will map to
            # the FfoServicePartnerUser in FFO.
            if ($RoleDatacenterFfoEnvironment -eq "True")
            {
                Set-LinkedUser "ExchangeCrossForestUser" -CertificateSubject $null;
            }
            else
            {
                Set-LinkedUser "ExchangeCrossForestUser" -CertificateSubject $RoleDatacenterExchangeCrossForestCertSubjects;
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the management role to the new user -->
    <OrgTaskInfo Id="_d5e470d63a234d789666cac841898bba" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $exchangeRoleAssignment = Get-ManagementRoleAssignment | where {$_.Name -ieq "ExchangeCrossForestRoleAssignment"};
          if($exchangeRoleAssignment -eq $null)
          {
              New-ManagementRoleAssignment -User "ExchangeCrossForestUser" -Role "ExchangeCrossForestRole" -Name "ExchangeCrossForestRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the linked user for Exchange   -->
    <OrgTaskInfo Id="_59968A982D28459a8F2DE2FEA9753E81" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "ExchangeCrossForestUser" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    
  <!-- Create the federation trust object for delegation tokens -->
  <OrgTaskInfo Id="_f8b7ab2ff45e4b96a083b617a27b91fd" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
    <Install>
      <Global>
        if ($RoleDatacenterWindowsLiveIdInstance -ine 'Gallatin')
        {
            $name = "WindowsLiveId"
            $metadataUrl = $RoleDatacenterFederationTrustMetadataUrl
            $thumbprint = $RoleDatacenterSHA1Thumbprint
            $applicationIdentifier = $RoleDatacenterSiteId
            $applicationUri = $RoleDatacenterSiteName

            $delegationTrust = Get-FederationTrust | where {$_.Name -ieq $name};
            if($delegationTrust -eq $null)
            {
                New-FederationTrust -Name $name -Thumbprint $thumbprint -ApplicationIdentifier $applicationIdentifier -ApplicationUri $applicationUri -MetadataUrl $metadataUrl -SkipNamespaceProviderProvisioning;
            }
        }

        $name = "MicrosoftOnline"
        $metadataUrl = $RoleDatacenterFederationTrustMetadataUrlBusiness
        $thumbprint = $RoleDatacenterSHA1ThumbprintBusiness
        $applicationIdentifier = $RoleDatacenterSiteIdBusiness
        $applicationUri = $RoleDatacenterSiteName

        $delegationTrust = Get-FederationTrust | where {$_.Name -ieq $name};
        if($delegationTrust -eq $null)
        {
            New-FederationTrust -Name $name -Thumbprint $thumbprint -ApplicationIdentifier $applicationIdentifier -ApplicationUri $applicationUri -MetadataUrl $metadataUrl -SkipNamespaceProviderProvisioning;
        }
      </Global>
      <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the AddressBookPolicyRouting setting to the Datacenter default.  Default is different in on-prem. -->
    <OrgTaskInfo Id="_d8576bf48f7b4091966a17be4afc9efd" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Global>
          Set-TransportConfig -AddressBookPolicyRoutingEnabled $true
        </Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Update transport hub's MaxDumpsterSizePerDatabase to support the Store Max Mount threshold -->
    <OrgTaskInfo Id="_c720dce1a4964c689045128bbe36acfb" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-TransportConfig -MaxDumpsterSizePerDatabase 100MB
        </Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Update transport's MaxSendSize to 35MB and MaxReceiveSize to 36 MB in the data-center -->
    <OrgTaskInfo Id="_e65c179f67e143f391b20417920b813d" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-TransportConfig -MaxSendSize 35MB -MaxReceiveSize 36MB;
        </Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    <!-- create a partner user-->

    <!-- Create a EduLive partner scope -->
    <OrgTaskInfo Id="_47d7ec6829d74f549f8a7aa0801982eb" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLivePartnerScope = Get-ManagementScope -DomainController $RoleDomainController | where {$_.Name -ieq "EduLivePartnerScope" };
          if($EduLivePartnerScope -eq $null)
          {
            $EduLivePartnerScope =  New-ManagementScope -Name "EduLivePartnerScope" -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'EDU' -or ProgramId -eq 'msonlinemigration' -or ProgramId -eq 'ffdf'" -DomainController $RoleDomainController;
          }
          else
          {
            Get-ManagementScope "EduLivePartnerScope" | Set-ManagementScope -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'EDU' -or ProgramId -eq 'msonlinemigration' -or ProgramId -eq 'ffdf'" -DomainController $RoleDomainController
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner user for Live@EDU -->
    <OrgTaskInfo Id="_4635968d4b5c4a67b2d4bbbb9397fdad" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLivePartnerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveServiceAcct"};
          if($EduLivePartnerUser -eq $null)
          {
          $EduLiveUPN = "EduLiveServiceAcct@" + $RoleFullyQualifiedDomainName;
          $EduLivePartnerUser = New-LinkedUser -Name "EduLiveServiceAcct" -UserPrincipalName $EduLiveUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner role for Live@EDU so Live@EDU can run get-managementendpoint.  The partner role is insufficient for this because it is scoped to OfferID -->
    <!-- Create new R4 role EduLivePartner-UnscopedRole that can be updated and assignment for EduLiveServiceAcct -->
    <OrgTaskInfo Id="_8852a7ad5efd452487844d582bb6f200" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $EduLiveUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "EduLivePartner-UnscopedRole"};
          if($EduLiveUnscopedRole -eq $null)
          {
            $EduLiveUnscopedRole = New-ManagementRole -Name "EduLivePartner-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }
          $getManagementEndPointEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController EduLivePartner-UnscopedRole\Get-ManagementEndpoint;
          Get-ManagementRoleEntry -DomainController $RoleDomainController EduLivePartner-UnscopedRole\* | where {$_.Name -ine $getManagementEndPointEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-Organization") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $EduLiveUnscopedRole.Identity -DomainController $RoleDomainController;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Update-ServicePlan") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $EduLiveUnscopedRole.Identity -DomainController $RoleDomainController;
      
          $EduLiveUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "EduLivePartner-UnscopedRoleAssignment"};
          if($EduLiveUnscopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User "EduLiveServiceAcct" -Role $EduLiveUnscopedRole.Identity -DomainController $RoleDomainController -Name "EduLivePartner-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject, and enable RemotePowershell on the newly created Partner user for EduLive -->
    <OrgTaskInfo Id="_d2bb6c4c686d4d2da6c1ecbbfc8c5ce3" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "EduLiveServiceAcct" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterEduLivePartnerCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the management role to the new partner user -->
    <OrgTaskInfo Id="_844ee080a2fc4faeb5af99e4140c3398" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLivePartnerRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "EduLivePartnerRoleAssignment"};
          if($EduLivePartnerRoleAssignment -eq $null)
          {
            $PartnerRole = Get-ManagementRole -RoleType "PartnerDelegatedTenantManagement" -DomainController $RoleDomainController | where {$_.IsRootRole};
            New-ManagementRoleAssignment -User $EduLivePartnerUser.Identity -Role $PartnerRole -Name "EduLivePartnerRoleAssignment" -CustomConfigWriteScope $EduLivePartnerScope -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the management role to the $EduLivePartnerUser partner user -->
    <OrgTaskInfo Id="_3398844ee080a2fc4faeb5af99e4140c" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $roleName = "EduPartnerScriptRole";
          $roleAssignmentName = "EduLivePartnerScriptRoleAssignment";
          $EduLivePartnerRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $roleAssignmentName};
          if($EduLivePartnerRoleAssignment -eq $null)
          {
              $PartnerRole = Get-ManagementRole $roleName -DomainController $RoleDomainController;
              New-ManagementRoleAssignment -User $EduLivePartnerUser.Identity -Role $PartnerRole -Name $roleAssignmentName -CustomConfigWriteScope $EduLivePartnerScope -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the partner user for Live@EDU   -->
    <OrgTaskInfo Id="_D5EF2420823C4b62AEBB2C841D2C1EA1" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "EduLiveServiceAcct" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign ViewAdminDebugScripts role to View Only Admin SG-->
    <OrgTaskInfo Id="_C8E3877F5944405692F90F186C0386EB" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $roleName = "ViewAdminDebugScripts";
          $roleAssignmentName = "ViewAdminDebugScriptsRoleAssignment";
          $roleGroup = Get-RoleGroup "View-Only Organization Management"
          $ViewAdminDebugScriptsRoleAssignment = Get-ManagementRoleAssignment -RoleAssignee $roleGroup -DomainController $RoleDomainController | where {$_.Name -ieq $roleAssignmentName};
          if($ViewAdminDebugScriptsRoleAssignment -eq $null)
          {
              $PartnerRole = Get-ManagementRole $roleName -DomainController $RoleDomainController;
              New-ManagementRoleAssignment -SecurityGroup "View-Only Organization Management" -Role $PartnerRole -Name $roleAssignmentName -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- create a partner user-->

    <!-- Create a partner user for the live@EDU Opt in handler-->
    <OrgTaskInfo Id="_78d9525f3f6446d09472c5cc947098e0" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLiveOptInPartnerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveOptInServiceAcct"};
          if($EduLiveOptInPartnerUser -eq $null)
          {
          $EduLiveOptInUPN = "EduLiveOptInServiceAcct@" + $RoleFullyQualifiedDomainName;
          $EduLiveOptInPartnerUser = New-LinkedUser -Name "EduLiveOptInServiceAcct" -UserPrincipalName $EduLiveOptInUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject, and enable RemotePowershell on the newly created Partner user for EduLive Email Handler-->
    <OrgTaskInfo Id="_7d2e2487748b4c3b923ff5f0b85d896f" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "EduLiveOptInServiceAcct" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterEDULivePartnerOptInPortalCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the partner user for Live@EDU Email Handler  -->
    <OrgTaskInfo Id="_4faae60c83604dd9810c1c2472692e2c" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "EduLiveOptInServiceAcct" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a unscoped partner role for Live@EDU Opt in Handler so it can run get-managementendpoint. -->
    <OrgTaskInfo Id="_ac40c42bfc634cd5b563854633928aa7" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $EduLiveOptInHandlerUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveOptInHandler-UnscopedRole"};
          if($EduLiveOptInHandlerUnscopedRole -eq $null)
          {
          $EduLiveOptInHandlerUnscopedRole = New-ManagementRole -Name "EduLiveOptInHandler-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }

          $getManagementEndPointEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController EduLiveOptInHandler-UnscopedRole\Get-ManagementEndpoint;
          Get-ManagementRoleEntry -DomainController $RoleDomainController EduLiveOptInHandler-UnscopedRole\* | where {$_.Name -ine $getManagementEndPointEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-Organization") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $EduLiveOptInHandlerUnscopedRole.Identity -DomainController $RoleDomainController;

          $EduLiveOptInHandlerUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveOptInHandler-UnscopedRoleAssignment"};
          if($EduLiveOptInHandlerUnscopedRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User "EduLiveOptInServiceAcct" -Role $EduLiveOptInHandlerUnscopedRole.Identity -DomainController $RoleDomainController -Name "EduLiveOptInHandler-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign a scoped management role to the Live@EDU Opt In Handler Service Account-->
    <OrgTaskInfo Id="_9cb44d684e30480e963782870d4675e2" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLiveOptInHandlerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveOptInServiceAcct"};
          $PartnerDelegatedTenantManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType PartnerDelegatedTenantManagement | where { $_.IsRootRole };

          $LiveEduOptInHandlerScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduOptInHandler-ScopedRole"};
          if($LiveEduOptInHandlerScopedRole -eq $null)
          {
            $LiveEduOptInHandlerScopedRole = New-ManagementRole -Name "LiveEduOptInHandler-ScopedRole" -Parent $PartnerDelegatedTenantManagementRole -DomainController $RoleDomainController;
          }

          $scopedCmdlets = @{}
          $scopedCmdlets["Get-User"] = ("ErrorAction", "Identity", "Filter")
          $scopedCmdlets["Set-User"] = ("ErrorAction", "Identity", "LEOEnabled")
          $scopedCmdlets["Set-CurrentOrganization"] = ("Identity", "ErrorAction")
          $scopedCmdlets["Get-Organization"] = ("Identity", "ErrorAction")

          Get-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduOptInHandlerScopedRole\* | where { $scopedCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          foreach ($cmdlet in $scopedCmdlets.Keys)
          {
            $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduOptInHandlerScopedRole\$cmdlet -ErrorAction:SilentlyContinue
            if ($entry -eq $null)
            {
              Get-ManagementRoleEntry ("{0}\{1}" -f $PartnerDelegatedTenantManagementRole.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $LiveEduOptInHandlerScopedRole.Identity -DomainController $RoleDomainController
            }

            Set-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduOptInHandlerScopedRole\$cmdlet -Parameters $scopedCmdlets[$cmdlet]
          }

          $LiveEduOptInHandlerScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduOptInHandler-ScopedRoleAssignment"};
          if($LiveEduOptInHandlerScopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User $EduLiveOptInHandlerUser.Identity -Role $LiveEduOptInHandlerScopedRole.Identity -CustomConfigWriteScope "EduLivePartnerScope" -DomainController $RoleDomainController -Name "LiveEduOptInHandler-ScopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- End Create a partner user for the live@EDU opt in handler-->

    <!-- Create a partner user for the live@EDU email handler-->
    <OrgTaskInfo Id="_94c81218a1d44a909e704c1e1c6e83c4" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLiveEmailHandlerPartnerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveEmailHandlerServiceAcct"};
          if($EduLiveEmailHandlerPartnerUser -eq $null)
          {
            $EduLiveEmailHandlerUPN = "EduLiveEmailHandlerServiceAcct@" + $RoleFullyQualifiedDomainName;
            $EduLiveEmailHandlerPartnerUser = New-LinkedUser -Name "EduLiveEmailHandlerServiceAcct" -UserPrincipalName $EduLiveEmailHandlerUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject, and enable RemotePowershell on the newly created Partner user for EduLive Email Handler-->
    <OrgTaskInfo Id="_b53d7c3733e04745baed7e6d56551bce" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "EduLiveEmailHandlerServiceAcct" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterEDULivePartnerEmailHandlerCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the partner user for Live@EDU Email Handler  -->
    <OrgTaskInfo Id="_9b05847ee3ed4096a84a8b85fd43ab12" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "EduLiveEmailHandlerServiceAcct" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a unscoped partner role for Live@EDU Email Handler so it can run get-managementendpoint. -->
    <OrgTaskInfo Id="_c9e8398bdb944de498d51852064cf216" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $EduLiveEmailHandlerUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveEmailHandler-UnscopedRole"};
          if($EduLiveEmailHandlerUnscopedRole -eq $null)
          {
            $EduLiveEmailHandlerUnscopedRole = New-ManagementRole -Name "EduLiveEmailHandler-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }

          $getManagementEndPointEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController EduLiveEmailHandler-UnscopedRole\Get-ManagementEndpoint;
          Get-ManagementRoleEntry -DomainController $RoleDomainController EduLiveEmailHandler-UnscopedRole\* | where {$_.Name -ine $getManagementEndPointEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-Organization") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $EduLiveEmailHandlerUnscopedRole.Identity -DomainController $RoleDomainController;

          $EduLiveEmailHandlerUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveEmailHandler-UnscopedRoleAssignment"};
          if($EduLiveEmailHandlerUnscopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User "EduLiveEmailHandlerServiceAcct" -Role $EduLiveEmailHandlerUnscopedRole.Identity -DomainController $RoleDomainController -Name "EduLiveEmailHandler-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign a scoped (to EDU tenants) management role to the Live@EDU Email Handler Service Account-->
    <OrgTaskInfo Id="_31bfbfbf64774e8fbf676c8280926c29" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLiveEmailHandlerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveEmailHandlerServiceAcct"};
          $PartnerDelegatedTenantManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType PartnerDelegatedTenantManagement | where { $_.IsRootRole };

          $LiveEduEmailHandlerScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduEmailHandler-ScopedRole"};
          if($LiveEduEmailHandlerScopedRole -eq $null)
          {
            $LiveEduEmailHandlerScopedRole = New-ManagementRole -Name "LiveEduEmailHandler-ScopedRole" -Parent $PartnerDelegatedTenantManagementRole -DomainController $RoleDomainController;
          }

          $scopedCmdlets = @{}
          $scopedCmdlets["Get-SyncMailbox"]  = ("ErrorAction", "Identity", "SortBy", "Filter", "Pages", "Cookie")
          $scopedCmdlets["Set-CurrentOrganization"] = ("Identity", "ErrorAction")
          $scopedCmdlets["Get-Organization"] = ("Identity", "ErrorAction")
          $scopedCmdlets["Get-User"] = ("Identity", "ErrorAction", "Filter")
          $scopedCmdlets["Get-RecipientEnforcementProvisioningPolicy"] = ("Identity", "Status")

          Get-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduEmailHandlerScopedRole\* | where { $scopedCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          foreach ($cmdlet in $scopedCmdlets.Keys)
          {
            $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduEmailHandlerScopedRole\$cmdlet -ErrorAction:SilentlyContinue
            if ($entry -eq $null)
            {
              Get-ManagementRoleEntry ("{0}\{1}" -f $PartnerDelegatedTenantManagementRole.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $LiveEduEmailHandlerScopedRole.Identity -DomainController $RoleDomainController
            }

            Set-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduEmailHandlerScopedRole\$cmdlet -Parameters $scopedCmdlets[$cmdlet]
          }

          $LiveEduEmailHandlerScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduEmailHandler-ScopedRoleAssignment"};
          if($LiveEduEmailHandlerScopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User $EduLiveEmailHandlerUser.Identity -Role $LiveEduEmailHandlerScopedRole.Identity -CustomConfigWriteScope "EduLivePartnerScope" -DomainController $RoleDomainController -Name "LiveEduEmailHandler-ScopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a TIP partner scope -->
    <OrgTaskInfo Id="_077aaf61abcf40e1990e0a5094142463" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $TIPPartnerScope = Get-ManagementScope -DomainController $RoleDomainController | where {$_.Name -ieq "TIPPartnerScope" };
          if($TIPPartnerScope -eq $null)
          {
            $TIPPartnerScope =  New-ManagementScope -Name "TIPPartnerScope" -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'ExchangeTest'" -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner user for TIP -->
    <OrgTaskInfo Id="_159845c851554eb89835d4f9f4382c21" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $TIPPartnerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "TIPUser"};
          $TIPUPN = "TIPUser@" + $RoleFullyQualifiedDomainName;
          if($TIPPartnerUser -eq $null)
          {
          $TIPPartnerUser = New-LinkedUser -Name "TIPUser" -UserPrincipalName $TIPUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create the FFO service partner User -->
    <OrgTaskInfo Id="_0c856ce1d8b349f3ac82b8a1c4a605c8" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
         <Install>
              <Global>
                   $ffoServicePartnerUserName = "FfoServicePartnerUser";
                   $ffoServicePartnerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerUserName};
                   if($ffoServicePartnerUser -eq $null)
                   {
                     $ffoServicePartnerUserUPN = $ffoServicePartnerUserName + "@" + $RoleFullyQualifiedDomainName;
                     $ffoServicePartnerUser = New-LinkedUser -Name $ffoServicePartnerUserName -UserPrincipalName $ffoServicePartnerUserUPN -DomainController $RoleDomainController;
                   }
              </Global>
              <Tenant />
         </Install>
         <BuildToBuildUpgrade UseInstallTasks="true" />
         <Uninstall />
    </OrgTaskInfo>
	
    <!-- Create Mailbox Intelligence Custom role -->
    <OrgTaskInfo Id="_75dd05decb4d483d919f455d69fc77fc" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="false">
		  <Install>
				<Global>
          Write-ExchangeSetupLog -Info "Adding MI custom role";
          $UnsafeCmdlets = @{
          "DatabasesScopedRole" = @( "New-MailboxDatabase", "Remove-StoreMailbox", "Remove-MailboxDatabase", "Move-DatabasePath", "Update-DatabaseSchema", "New-PublicFolderDatabase", "Remove-PublicFolderDatabase", "Set-PublicFolderDatabase" ,"Dismount-Database")
          "DatabaseCopiesScopedRole" = @("Remove-MailboxDatabaseCopy")
          "DatabaseAvailabilityGroupsScopedRole" = @("Remove-DatabaseAvailabilityGroup", "Remove-DatabaseAvailabilityGroupNetwork", "Remove-DatabaseAvailabilityGroupConfiguration")
          "MEPublicFolderScopedRole" = @("Disable-MailPublicFolder", "Set-Organization")
          "DisasterRecoveryScopedRole" =@("New-MailboxDatabase")
          "WorkloadManagementScopedRole" = @()
          "MoveMailboxesScopedRole" = @("Complete-OrganizationUpgrade", "Disable-Mailbox", "Disable-MailUser", "Enable-Mailbox", "Enable-MailUser", "New-MailboxRestoreRequest", "New-ExchangeUpgradeBucket", "Remove-ExchangeUpgradeBucket", "Set-ExchangeUpgradeBucket", "Set-Mailbox", "Set-MailboxRestoreRequest", "Start-OrganizationPilot", "Start-OrganizationUpgrade")
          }

          $UnsafeCmdletsParameters = @{"DatabasesScopedRole" = @{ "Mount-Database" = ("Force", "AcceptDataLoss")
                                                                  "Move-ActiveMailboxDatabase" = ("MountDialOverride")}
          "DatabaseCopiesScopedRole" = @{"Update-MailboxDatabaseCopy" = ("DeleteExistingFiles")}
          "DisasterRecoveryScopedRole" = @{"Set-Mailbox" = ("Database","ArchiveDatabase")}
          "MoveMailboxesScopedRole" = @{"New-MoveRequest" = "Outbound"
                                        "Set-Mailbox" = ("Database","ArchiveDatabase")
                                        "Set-User" = ("UpgradeDetails", "UpgradeMessage", "UpgradeRequest", "UpgradeStage", "UpgradeStageTimeStamp", "UpgradeStatus")
                                        "Set-Organization" = ("UpgradeConstraints", "UpgradeConstraintsDisabled", "UpgradeDetails","UpgradeE14MbxCountForCurrentStage", "UpgradeE14RequestCountForCurrentStage",
                                        "UpgradeLastE14CountsUpdateTime", "UpgradeMessage", "UpgradeRequest", "UpgradeStage","UpgradeStageTimeStamp", "UpgradeStatus", "UpgradeUnitsOverride")
                                        }
          }

          $CmdletsRoleName = @("DatabasesScopedRole", "DatabaseCopiesScopedRole","DatabaseAvailabilityGroupsScopedRole","MEPublicFolderScopedRole","DisasterRecoveryScopedRole","WorkloadManagementScopedRole","MoveMailboxesScopedRole")
          $RoleNameToType = @{"DatabasesScopedRole" = "Databases"
          "DatabaseCopiesScopedRole" = "DatabaseCopies"
          "DatabaseAvailabilityGroupsScopedRole" = "DatabaseAvailabilityGroups"
          "MEPublicFolderScopedRole" = "MailEnabledPublicFolders"
          "DisasterRecoveryScopedRole" = "DisasterRecovery"
          "WorkloadManagementScopedRole" = "WorkloadManagement"
          "MoveMailboxesScopedRole" = "MoveMailboxes"}

          $RoleAssignmentNameDict = @{"DatabasesScopedRole" = "DatabasesCmdlets-RulesScopedRoleAssignment"
          "DatabaseCopiesScopedRole" = "DatabaseCopiesCmdlets-RulesScopedRoleAssignment"
          "DatabaseAvailabilityGroupsScopedRole" = "DatabaseAvailabilityGroupsCmdlets-RulesScopedRoleAssignment"
          "MEPublicFolderScopedRole" = "MEPublicFolderCmdlets-RulesScopedRoleAssignment"
          "DisasterRecoveryScopedRole" = "DisasterRecoveryCmdlets-RulesScopedRoleAssignment"
          "WorkloadManagementScopedRole" = "WorkloadManagementCmdlets-RulesScopedRoleAssignment"
          "MoveMailboxesScopedRole" = "MoveMailboxesCmdlets-RulesScopedRoleAssignment"}

          foreach($roleName in $CmdletsRoleName)
          {
          #
          # Get the base role
          #
          $ManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType $RoleNameToType[$roleName] | where{ $_.IsRootRole }
          $ManagementRoleCmdletsRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $roleName}
          if($ManagementRoleCmdletsRole -eq $null)
          {
          Write-ExchangeSetupLog -Info  "Creating new Management Role $($roleName)"
          $ManagementRoleCmdletsRole = New-ManagementRole -Name $roleName -Parent $ManagementRole -DomainController $RoleDomainController
          }

          Write-ExchangeSetupLog -Info  "Taking out unsafe cmdlets from $($roleName)"

          # Taking out unsafe cmdlets
          Get-ManagementRoleEntry -DomainController $RoleDomainController $roleName\* | Where { $UnsafeCmdlets[$roleName] -contains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false

          Write-ExchangeSetupLog -Info  "Taking out parameters from $($roleName)"

          # Taking out unsafe parameters
          foreach ($cmdlet in $UnsafeCmdletsParameters[$roleName].Keys)
          {
          $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ManagementRoleCmdletsRole\$cmdlet -ErrorAction:SilentlyContinue
          if ($entry -ne $null)
          {
          Set-ManagementRoleEntry -DomainController $RoleDomainController $ManagementRoleCmdletsRole\$cmdlet -Parameters $UnsafeCmdletsParameters[$roleName][$cmdlet] -RemoveParameter -ErrorAction:SilentlyContinue
          }
          }

          Write-ExchangeSetupLog -Info  "Assigning the new role $($roleName) to Mailbox Management role group"

          # Assigning the new role to Mailbox Management Role Group
          $RoleAssignmentName = $RoleAssignmentNameDict[$roleName]
          $ManagementRoleCmdletsRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $RoleAssignmentName}
          if($ManagementRoleCmdletsRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -SecurityGroup "Mailbox Management" -Role $ManagementRoleCmdletsRole.Identity -DomainController $RoleDomainController -Name $RoleAssignmentName
          }
          }
        </Global>
		  </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
	
    <!-- Set the CertificateSubject and enable RemotePowershell on the newly created user for Ffo service partner user -->
    <OrgTaskInfo Id="_3baf0d64272d4c5f8a7eab39d5137ac9" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
         <Install>
              <Global>
                   Set-User "FfoServicePartnerUser" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterFfoServicePartnerUserCertSubjects -DomainController $RoleDomainController;
              </Global>
              <Tenant />
         </Install>
         <BuildToBuildUpgrade UseInstallTasks="true" />
         <Uninstall />
    </OrgTaskInfo>

    <!-- Create a antispam admins scoped role for anti spam admins so that they can run required commandlets -->
    <OrgTaskInfo Id="_3552a64f3e544c15a74b4175ee6522e2" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
        <Install>
            <Global>
              $dataCenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
              $ffoAntiSpamAdminsScopedRoleName = "FfoAntiSpamAdmins-DataCenterOperationsScopedRole";
              $ffoAntiSpamAdminsScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoAntiSpamAdminsScopedRoleName};
              if($ffoAntiSpamAdminsScopedRole -eq $null)
              {
              $ffoAntiSpamAdminsScopedRole = New-ManagementRole -Name $ffoAntiSpamAdminsScopedRoleName -Parent $dataCenterOperationsRole -DomainController $RoleDomainController;
              }

              $ffoAntiSpamAdminsCmdlets = @{}
              $ffoAntiSpamAdminsCmdlets["Add-DelistIP"] = "*"
              $ffoAntiSpamAdminsCmdlets["Add-OutboundIps"] = "*"
              $ffoAntiSpamAdminsCmdlets["Convert-CountryLookupData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Delist-Ip"] = "*"
              $ffoAntiSpamAdminsCmdlets["Find-RuleData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Find-SpamDataBlob"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-DnsBlocklistInfo"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-GenericReputationData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-ReputationOverride"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-ReputationOverrideInternal"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-IpReputation"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-IpStat"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-KEStoreClusters"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-KEStoreMails"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-ListedIP"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-ListedIPWrapper"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-OutboundSingleSenderData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-OutboundIps"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-OutboundSpamExclusionData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-RuleData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-SpamDataBlob"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-SpamDbAppConfig"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-SyncWatermark"] = "*"
              $ffoAntiSpamAdminsCmdlets["Set-SyncWatermark"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-URIData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-URIExclusionData"] = "*"
              $ffoAntiSpamAdminsCmdlets["New-ReputationOverride"] = "*"
              $ffoAntiSpamAdminsCmdlets["New-ReputationOverrideInternal"] = "*"
              $ffoAntiSpamAdminsCmdlets["New-OutboundSpamExclusionData"] = "*"
              $ffoAntiSpamAdminsCmdlets["New-RuleData"] = "*"
              $ffoAntiSpamAdminsCmdlets["New-URIExclusionData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Remove-ReputationOverride"] = "*"
              $ffoAntiSpamAdminsCmdlets["Remove-ReputationOverrideInternal"] = "*"
              $ffoAntiSpamAdminsCmdlets["Remove-OutboundIps"] = "*"
              $ffoAntiSpamAdminsCmdlets["Remove-OutboundSpamExclusionData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Remove-URIExclusionData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Save-CountryLookupData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Save-SpamDataBlob"] = "*"
              $ffoAntiSpamAdminsCmdlets["Search-KEStoreMetadata"] = "*"
              $ffoAntiSpamAdminsCmdlets["Set-RuleInactive"] = "*"
              $ffoAntiSpamAdminsCmdlets["Set-RuleInvalid"] = "*"
              $ffoAntiSpamAdminsCmdlets["Set-SpamDbAppConfig"] = "*"
              $ffoAntiSpamAdminsCmdlets["Set-URIData"] = "*"
              $ffoAntiSpamAdminsCmdlets["Test-DbAccess"] = "*"
              $ffoAntiSpamAdminsCmdlets["Test-NetworkServicePermissionToFileShare"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-KEStoreClusters"] = "*"
              $ffoAntiSpamAdminsCmdlets["Get-KEStoreMails"] = "*"
              $ffoAntiSpamAdminsCmdlets["Search-KEStoreMetadata"] = "*"
              $ffoAntiSpamAdminsCmdlets["Triage-KEStoreMails"] = "*"
              $ffoAntiSpamAdminsCmdlets["Set-SpamEngineExecutionPackage"] = "*"
              $ffoAntiSpamAdminsCmdlets["Set-DbebMode"] = "*"

              Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoAntiSpamAdminsScopedRoleName\* | where { $ffoAntiSpamAdminsCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

              foreach ($cmdlet in $ffoAntiSpamAdminsCmdlets.Keys)
              {
              $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoAntiSpamAdminsScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
              if ($entry -eq $null)
              {
              Get-ManagementRoleEntry ("{0}\{1}" -f $dataCenterOperationsRole.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoAntiSpamAdminsScopedRole.Identity -DomainController $RoleDomainController
              }

              $parameterSet = $ffoAntiSpamAdminsCmdlets[$cmdlet]
              if ($parameterSet -eq "*")
              {
              $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $dataCenterOperationsRole.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
              }

              Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoAntiSpamAdminsScopedRoleName\$cmdlet -Parameters $parameterSet
              }

              $ffoAntiSpamAdminsrScopedRoleAssignmentName = "FfoAntiSpamAdmins-DataCenterOperationsScopedRoleAssignment";
              $ffoAntiSpamAdminsRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoAntiSpamAdminsrScopedRoleAssignmentName};
              if($ffoAntiSpamAdminsRoleAssignment -eq $null)
              {
              New-ManagementRoleAssignment -SecurityGroup "Ffo AntiSpam Admins" -Role $ffoAntiSpamAdminsScopedRole.Identity -DomainController $RoleDomainController -Name $ffoAntiSpamAdminsrScopedRoleAssignmentName;
              }
            </Global>
            <Tenant />
        </Install>
        <BuildToBuildUpgrade UseInstallTasks="true" />
        <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner scoped role for Ffo service user so that it can run required commandlets -->
    <OrgTaskInfo Id="_70de263b2ffc4b39aae7f5b91483837b" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
         <Install>
              <Global>
                   $FfoServicePartnerScope = Get-ManagementScope | where {$_.Name -ieq "FfoPartnerScope" };
                   if($FfoServicePartnerScope -eq $null)
                   {
                     $FfoServicePartnerScope =  New-ManagementScope -Name "FfoPartnerScope" -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'MSOnline' -or ProgramId -eq 'EDU' -or ProgramId -eq 'ffdf' -or ProgramId -eq 'ExchangeTest'" -DomainController $RoleDomainController;
                   }

                   # If in FFO, update the partner tenant filter to include FFO tenants that do not have a ProgramId.
                   if ($RoleDatacenterFfoEnvironment -eq "True")
                   {
                       $FfoServicePartnerScope | Set-ManagementScope -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'MSOnline' -or ProgramId -eq 'EDU' -or ProgramId -eq 'ffdf' -or ProgramId -eq 'ExchangeTest' -or ProgramId -eq `$null" -DomainController $RoleDomainController;
                   }

                   $partnerMailRecipients = Get-ManagementRole -DomainController $RoleDomainController -RoleType MailRecipients | where { $_.IsRootRole };
                   $ffoServicePartnerScopedRoleName = "FfoServicePartner-MailRecipientsScopedRole";
                   $ffoServicePartnerScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerScopedRoleName};
                   if($ffoServicePartnerScopedRole -eq $null)
                   {
                     $ffoServicePartnerScopedRole = New-ManagementRole -Name $ffoServicePartnerScopedRoleName -Parent $partnerMailRecipients -DomainController $RoleDomainController;
                   }
                   
                   $mailRecipientsCmdlets = @{}
                   $mailRecipientsCmdlets["Get-Mailbox"] = "*"
                   $mailRecipientsCmdlets["Set-Mailbox"] = ("Identity", "ProhibitSendQuota", "IssueWarningQuota", "EmailAddresses")
                   $mailRecipientsCmdlets["Get-MailUser"] = ("Organization", "Identity")
                   $mailRecipientsCmdlets["Set-MailUser"] = ("Identity", "EmailAddresses")
                   $mailRecipientsCmdlets["Get-User"] = ("Organization", "Identity")
                   $mailRecipientsCmdlets["Enable-MailUser"] = ("Identity", "ExternalEmailAddress")

                   Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerScopedRoleName\* | where { $mailRecipientsCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                   foreach ($cmdlet in $mailRecipientsCmdlets.Keys)
                   {
                       $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                       if ($entry -eq $null)
                       {
                           Get-ManagementRoleEntry ("{0}\{1}" -f $partnerMailRecipients.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerScopedRole.Identity -DomainController $RoleDomainController
                       }
                       
                       $parameterSet = $mailRecipientsCmdlets[$cmdlet]
                       if ($parameterSet -eq "*")
                       {
                          $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $partnerMailRecipients.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                       }

                       Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerScopedRoleName\$cmdlet -Parameters $parameterSet
                   }

                   $ffoServicePartnerScopedRoleAssignmentName = "FfoServicePartner-MailRecipientsScopedRoleAssignment";
                   $ffoServicePartnerRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerScopedRoleAssignmentName};
                   if($ffoServicePartnerRoleAssignment -eq $null)
                   {
                     New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerScopedRoleAssignmentName;
                   }

                   # Add FfoServicePartnerUser to the appropriate RBAC role.
                   $roleGroupName = "View-Only Mgmt Forest Operator"
                   $roleGroup = Get-RoleGroup $roleGroupName
                   $roleMembers = Get-RoleGroupMember -Identity $roleGroup.Identity | Where { $_.Name -ieq "FfoServicePartnerUser" }
                   if ($roleMembers -eq $null)
                   {
                       Add-RoleGroupMember -Identity $roleGroup.Identity -Member "FfoServicePartnerUser" -BypassSecurityGroupManagerCheck
                   }
              </Global>
              <Tenant />
         </Install>
         <BuildToBuildUpgrade UseInstallTasks="true" />
         <Uninstall />
    </OrgTaskInfo>

    <!-- Create scoped roles for Ffo service user so that it can run commands for FOPE14 to FFO15 migration and FFO to EXO service upgrade -->
    <OrgTaskInfo Id="_833b685b604d44a8a4a309514c7c3aaf" Component="OFFICE15:\Current\Forefront for Office Datacenter\Service Locator\Migration" ExcludeInDatacenterDedicated="true">
         <Install>
              <Global>
                $transportHygiene = Get-ManagementRole -DomainController $RoleDomainController -RoleType TransportHygiene | where { $_.IsRootRole };
                $transportRules = Get-ManagementRole -DomainController $RoleDomainController -RoleType TransportRules | where { $_.IsRootRole };
                $dataLossPrevention = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataLossPrevention | where { $_.IsRootRole };
                $informationRightsManagement = Get-ManagementRole -DomainController $RoleDomainController -RoleType InformationRightsManagement | where { $_.IsRootRole };
                $remoteAndAcceptedDomains = Get-ManagementRole -DomainController $RoleDomainController -RoleType RemoteAndAcceptedDomains | where { $_.IsRootRole };
                $organizationConfiguration = Get-ManagementRole -DomainController $RoleDomainController -RoleType OrganizationConfiguration | where {$_.IsRootRole };
                $organizationTransportSettings = Get-ManagementRole -DomainController $RoleDomainController -RoleType OrganizationTransportSettings | where {$_.IsRootRole };
                $roleManagement = Get-ManagementRole -DomainController $RoleDomainController -RoleType RoleManagement | where {$_.IsRootRole };
                $distributionGroups = Get-ManagementRole -DomainController $RoleDomainController -RoleType DistributionGroups | where { $_.IsRootRole };
                $dataCenterOperations = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
                $mailRecipientCreation = Get-ManagementRole -DomainController $RoleDomainController -RoleType MailRecipientCreation | where { $_.IsRootRole };

                #
                # Transport Hygiene scoped role
                #
                $ffoServicePartnerTransportHygieneScopedRoleName = "FfoServicePartner-TransportHygieneScopedRole";
                $ffoServicePartnerTransportHygieneScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where { $_.Name -ieq $ffoServicePartnerTransportHygieneScopedRoleName };
                if($ffoServicePartnerTransportHygieneScopedRole -eq $null)
                {
                $ffoServicePartnerTransportHygieneScopedRole = New-ManagementRole -Name $ffoServicePartnerTransportHygieneScopedRoleName -Parent $transportHygiene -DomainController $RoleDomainController;
                }

                $transportHygieneCmdlets = @{}
                $transportHygieneCmdlets["Get-HostedConnectionFilterPolicy"] = ("Identity")
                $transportHygieneCmdlets["Get-HostedContentFilterPolicy"] = ("Identity")
                $transportHygieneCmdlets["Get-HostedContentFilterRule"] = ("Identity")
                $transportHygieneCmdlets["Get-HostedOutboundSpamFilterPolicy"] = ("Identity")
                $transportHygieneCmdlets["Get-MalwareFilterPolicy"] = ("Identity")
                $transportHygieneCmdlets["Get-MalwareFilterRule"] = ("Identity")
                $transportHygieneCmdlets["Enable-HostedContentFilterRule"] = ("Identity")
                $transportHygieneCmdlets["Enable-MalwareFilterRule"] = ("Identity")
                $transportHygieneCmdlets["New-HostedConnectionFilterPolicy"] = "*"
                $transportHygieneCmdlets["New-HostedContentFilterPolicy"] = "*"
                $transportHygieneCmdlets["New-HostedContentFilterRule"] = "*"
                $transportHygieneCmdlets["New-MalwareFilterPolicy"] = "*"
                $transportHygieneCmdlets["New-MalwareFilterRule"] = "*"
                $transportHygieneCmdlets["Disable-HostedContentFilterRule"] = ("Identity")
                $transportHygieneCmdlets["Disable-MalwareFilterRule"] = ("Identity")
                $transportHygieneCmdlets["Remove-HostedConnectionFilterPolicy"] = ("Identity", "Force")
                $transportHygieneCmdlets["Remove-HostedContentFilterPolicy"] = ("Identity", "Force")
                $transportHygieneCmdlets["Remove-HostedContentFilterRule"] = ("Identity")
                $transportHygieneCmdlets["Remove-MalwareFilterPolicy"] = ("Identity", "Force")
                $transportHygieneCmdlets["Remove-MalwareFilterRule"] = ("Identity")
                $transportHygieneCmdlets["Set-HostedConnectionFilterPolicy"] = "*"
                $transportHygieneCmdlets["Set-HostedContentFilterPolicy"] = "*"
                $transportHygieneCmdlets["Set-HostedContentFilterRule"] = "*"
                $transportHygieneCmdlets["Set-HostedOutboundSpamFilterPolicy"] = "*"
                $transportHygieneCmdlets["Set-MalwareFilterPolicy"] = "*"
                $transportHygieneCmdlets["Set-MalwareFilterRule"] = "*"

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerTransportHygieneScopedRoleName\* | Where { $transportHygieneCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $transportHygieneCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerTransportHygieneScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $transportHygiene.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerTransportHygieneScopedRole.Identity -DomainController $RoleDomainController
                }

                $parameterSet = $transportHygieneCmdlets[$cmdlet]
                if ($parameterSet -eq "*")
                {
                $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $transportHygiene.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerTransportHygieneScopedRoleName\$cmdlet -Parameters $parameterSet
                }

                $ffoServicePartnerTransportHygieneScopedRoleAssignmentName = "FfoServicePartner-TransportHygieneScopedRoleAssignment";
                $ffoServicePartnerTransportHygieneRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where { $_.Name -ieq $ffoServicePartnerTransportHygieneScopedRoleAssignmentName };
                if($ffoServicePartnerTransportHygieneRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerTransportHygieneScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerTransportHygieneScopedRoleAssignmentName;
                }

                #
                #  Organization Transport Settings scoped role
                #
                $ffoServicePartnerOrganizationTransportSettingsScopedRoleName = "FfoServicePartner-OrganizationTransportSettingsScopedRole";
                $ffoServicePartnerOrganizationTransportSettingsScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerOrganizationTransportSettingsScopedRoleName};
                if($ffoServicePartnerOrganizationTransportSettingsScopedRole -eq $null)
                {
                $ffoServicePartnerOrganizationTransportSettingsScopedRole = New-ManagementRole -Name $ffoServicePartnerOrganizationTransportSettingsScopedRoleName -Parent $organizationTransportSettings -DomainController $RoleDomainController;
                }

                $organizationTransportSettingsCmdlets = @{}
                $organizationTransportSettingsCmdlets["Get-TransportConfig"] = ("*")
                $organizationTransportSettingsCmdlets["Set-TransportConfig"] = ("Identity","TransportRuleCollectionAddedRecipientsLimit", "TransportRuleLimit", "TransportRuleCollectionRegexCharsLimit", "TransportRuleSizeLimit", "TransportRuleMinProductVersion")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerOrganizationTransportSettingsScopedRoleName\* | Where { $organizationTransportSettingsCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $organizationTransportSettingsCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerOrganizationTransportSettingsScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $organizationTransportSettings.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerOrganizationTransportSettingsScopedRole.Identity -DomainController $RoleDomainController
                }

                $parameterSet = $organizationTransportSettingsCmdlets[$cmdlet]
                if ($parameterSet -eq "*")
                {
                $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $organizationTransportSettings.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerOrganizationTransportSettingsScopedRoleName\$cmdlet -Parameters $parameterSet
                }

                $ffoServicePartnerOrganizationTransportSettingsScopedRoleAssignmentName = "FfoServicePartner-OrganizationTransportSettingsScopedRoleAssign";
                $ffoServicePartnerOrganizationTransportSettingsRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerOrganizationTransportSettingsScopedRoleAssignmentName};
                if($ffoServicePartnerOrganizationTransportSettingsRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerOrganizationTransportSettingsScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerOrganizationTransportSettingsScopedRoleAssignmentName;
                }

                #
                # Transport Rules scoped role
                #
                $ffoServicePartnerTransportRulesScopedRoleName = "FfoServicePartner-TransportRulesScopedRole";
                $ffoServicePartnerTransportRulesScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerTransportRulesScopedRoleName};
                if($ffoServicePartnerTransportRulesScopedRole -eq $null)
                {
                $ffoServicePartnerTransportRulesScopedRole = New-ManagementRole -Name $ffoServicePartnerTransportRulesScopedRoleName -Parent $transportRules -DomainController $RoleDomainController;
                }

                $transportRulesCmdlets = @{}
                $transportRulesCmdlets["Export-TransportRuleCollection"] = ("*")
                $transportRulesCmdlets["Import-TransportRuleCollection"] = ("*")
                $transportRulesCmdlets["Get-TransportRule"] = ("*")
                $transportRulesCmdlets["Set-TransportRule"] = ("*")
                $transportRulesCmdlets["Disable-TransportRule"] = ("*")
                $transportRulesCmdlets["Enable-TransportRule"] = ("*")
                $transportRulesCmdlets["New-TransportRule"] = ("*")
                $transportRulesCmdlets["Remove-TransportRule"] = ("*")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerTransportRulesScopedRoleName\* | Where { $transportRulesCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $transportRulesCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerTransportRulesScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $transportRules.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerTransportRulesScopedRole.Identity -DomainController $RoleDomainController
                }

                $parameterSet = $transportRulesCmdlets[$cmdlet]
                if ($parameterSet -eq "*")
                {
                $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $transportRules.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerTransportRulesScopedRoleName\$cmdlet -Parameters $parameterSet
                }

                $ffoServicePartnerTransportRulesScopedRoleAssignmentName = "FfoServicePartner-TransportRulesScopedRoleAssignment";
                $ffoServicePartnerTransportRulesRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerTransportRulesScopedRoleAssignmentName};
                if($ffoServicePartnerTransportRulesRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerTransportRulesScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerTransportRulesScopedRoleAssignmentName;
                }

                #
                # DataLossPrevention scoped role
                #
                $ffoServicePartnerDlpScopedRoleName = "FfoServicePartner-DataLossPreventionScopedRole";
                $ffoServicePartnerDlpScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerDlpScopedRoleName};
                if($ffoServicePartnerDlpScopedRole -eq $null)
                {
                $ffoServicePartnerDlpScopedRole = New-ManagementRole -Name $ffoServicePartnerDlpScopedRoleName -Parent $dataLossPrevention -DomainController $RoleDomainController;
                }

                $dlpCmdlets = @{}
                $dlpCmdlets["New-TransportRule"] = ("DlpPolicy", "MessageContainsDataClassifications", "ExceptIfMessageContainsDataClassifications", "NotifySender")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDlpScopedRoleName\* | Where { $dlpCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $dlpCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDlpScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $dataLossPrevention.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerDlpScopedRole.Identity -DomainController $RoleDomainController
                }

                $parameterSet = $dlpCmdlets[$cmdlet]
                if ($parameterSet -eq "*")
                {
                $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $dataLossPrevention.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDlpScopedRoleName\$cmdlet -Parameters $parameterSet
                }

                $ffoServicePartnerDlpScopedRoleAssignmentName = "FfoServicePartner-DlpScopedRoleAssignment";
                $ffoServicePartnerDlpRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerDlpScopedRoleAssignmentName};
                if($ffoServicePartnerDlpRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerDlpScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerDlpScopedRoleAssignmentName;
                }

                #
                # Information Rights Management scoped role
                #

                # Create the scoped management role, inherit from InformationRightsManagement role.
                $ffoServicePartnerInformationRightsManagementScopedRoleName = "FfoServicePartner-InformationRightsManagementScopedRole";
                $ffoServicePartnerInformationRightsManagementScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerInformationRightsManagementScopedRoleName};
                if($ffoServicePartnerInformationRightsManagementScopedRole -eq $null)
                {
                $ffoServicePartnerInformationRightsManagementScopedRole = New-ManagementRole -Name $ffoServicePartnerInformationRightsManagementScopedRoleName -Parent $informationRightsManagement -DomainController $RoleDomainController;
                }

                # Add the cmdlets to the role entries of scoped management role
                # First remove all entries that not in the cmdlet list,
                # then add/update the role entries with the cmdlets and parameter in the list.
                $irmCmdlets = @{}
                $irmCmdlets["Import-RMSTrustedPublishingDomain"] = ("*")
                $irmCmdlets["Get-RMSTrustedPublishingDomain"] = ("*")
                $irmCmdlets["Set-RMSTrustedPublishingDomain"] = ("*")
                $irmCmdlets["Remove-RMSTrustedPublishingDomain"] = ("*")
                $irmCmdlets["Get-IRMConfiguration"] = ("*")
                $irmCmdlets["Set-IRMConfiguration"] = ("*")
                $irmCmdlets["Test-IRMConfiguration"] = ("*")
                $irmCmdlets["Get-RMSTemplate"] = ("*")
                $irmCmdlets["Set-RMSTemplate"] = ("*")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerInformationRightsManagementScopedRoleName\* | Where { $irmCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $irmCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerInformationRightsManagementScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $informationRightsManagement.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerInformationRightsManagementScopedRole.Identity -DomainController $RoleDomainController
                }

                $parameterSet = $irmCmdlets[$cmdlet]
                if ($parameterSet -eq "*")
                {
                $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $informationRightsManagement.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerInformationRightsManagementScopedRoleName\$cmdlet -Parameters $parameterSet
                }

                # Assign the scoped management role to FfoServicePartnerUser
                $ffoServicePartnerInformationRightsManagementScopedRoleAssignmentName = "FfoServicePartner-IRMScopedRoleAssignment";
                $ffoServicePartnerInformationRightsManagementRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerInformationRightsManagementScopedRoleAssignmentName};
                if($ffoServicePartnerInformationRightsManagementRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerInformationRightsManagementScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerInformationRightsManagementScopedRoleAssignmentName;
                }

                #
                # Remote and Accepted Domains scoped role
                #
                $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleName = "FfoServicePartner-RemoteAndAcceptedDomainsScopedRole";
                $ffoServicePartnerRemoteAndAcceptedDomainsScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleName};
                if($ffoServicePartnerRemoteAndAcceptedDomainsScopedRole -eq $null)
                {
                $ffoServicePartnerRemoteAndAcceptedDomainsScopedRole = New-ManagementRole -Name $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleName -Parent $remoteAndAcceptedDomains -DomainController $RoleDomainController;
                }

                $remoteAndAcceptedDomainsCmdlets = @{}
                $remoteAndAcceptedDomainsCmdlets["Get-AcceptedDomain"] = ("Identity")
                $remoteAndAcceptedDomainsCmdlets["Get-InboundConnector"] = ("Identity")
                $remoteAndAcceptedDomainsCmdlets["Get-OutboundConnector"] = ("Identity", "IsTransportRuleScoped")
                $remoteAndAcceptedDomainsCmdlets["Get-RemoteDomain"] = ("Identity")
                $remoteAndAcceptedDomainsCmdlets["New-InboundConnector"] = "*"
                $remoteAndAcceptedDomainsCmdlets["New-OutboundConnector"] = "*"
                $remoteAndAcceptedDomainsCmdlets["New-RemoteDomain"] = "*"
                $remoteAndAcceptedDomainsCmdlets["Remove-InboundConnector"] = ("Identity")
                $remoteAndAcceptedDomainsCmdlets["Remove-OutboundConnector"] = ("Identity")
                $remoteAndAcceptedDomainsCmdlets["Remove-RemoteDomain"] = ("Identity")
                $remoteAndAcceptedDomainsCmdlets["Set-AcceptedDomain"] = ("DomainType", "Identity", "MatchSubDomains")
                $remoteAndAcceptedDomainsCmdlets["Set-InboundConnector"] = "*"
                $remoteAndAcceptedDomainsCmdlets["Set-OutboundConnector"] = "*"
                $remoteAndAcceptedDomainsCmdlets["Set-RemoteDomain"] = "*"

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleName\* | Where { $remoteAndAcceptedDomainsCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $remoteAndAcceptedDomainsCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $remoteAndAcceptedDomains.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerRemoteAndAcceptedDomainsScopedRole.Identity -DomainController $RoleDomainController
                }

                $parameterSet = $remoteAndAcceptedDomainsCmdlets[$cmdlet]
                if ($parameterSet -eq "*")
                {
                $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $remoteAndAcceptedDomains.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleName\$cmdlet -Parameters $parameterSet
                }

                $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleAssignmentName = "FfoServicePartner-RemoteAndAcceptedDomainsScopedRoleAssignment";
                $ffoServicePartnerRemoteAndAcceptedDomainsRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleAssignmentName};
                if($ffoServicePartnerRemoteAndAcceptedDomainsRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerRemoteAndAcceptedDomainsScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerRemoteAndAcceptedDomainsScopedRoleAssignmentName;
                }

                #
                # Organization Configuration scoped role
                #
                $ffoServicePartnerOrganizationConfigurationScopedRoleName = "FfoServicePartner-OrganizationConfigurationScopedRole";
                $ffoServicePartnerOrganizationConfigurationScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerOrganizationConfigurationScopedRoleName};
                if ($ffoServicePartnerOrganizationConfigurationScopedRole -eq $null)
                {
                $ffoServicePartnerOrganizationConfigurationScopedRole = New-ManagementRole -Name $ffoServicePartnerOrganizationConfigurationScopedRoleName -Parent $organizationConfiguration -DomainController $RoleDomainController;
                }

                $organizationConfigurationCmdlets = @{}
                $organizationConfigurationCmdlets["Get-PerimeterConfig"] = ("Identity")
                $organizationConfigurationCmdlets["Set-PerimeterConfig"] = ("Identity", "RouteOutboundViaFfoFrontEndEnabled", "RouteOutboundViaEhfEnabled", "EheEnabled", "RMSOFwdSyncEnabled", "EheDecryptEnabled")
                $organizationConfigurationCmdlets["Enable-OrganizationCustomization"] = ("Identity")
                $organizationConfigurationCmdlets["Get-OrganizationConfig"] = ("Identity")
                $organizationConfigurationCmdlets["Set-OrganizationConfig"] = ("Identity", "IsFfoMigrationInProgress", "RmsoSubscriptionStatus")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerOrganizationConfigurationScopedRoleName\* | where { $organizationConfigurationCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $organizationConfigurationCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerOrganizationConfigurationScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $organizationConfiguration.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerOrganizationConfigurationScopedRole.Identity -DomainController $RoleDomainController
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerOrganizationConfigurationScopedRoleName\$cmdlet -Parameters $organizationConfigurationCmdlets[$cmdlet]
                }

                $ffoServicePartnerOrganizationConfigurationScopedRoleAssignmentName = "FfoServicePartner-OrganizationConfigurationScopedRoleAssignment";
                $ffoServicePartnerOrganizationConfigurationScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerOrganizationConfigurationScopedRoleAssignmentName};
                if ($ffoServicePartnerOrganizationConfigurationScopedRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerOrganizationConfigurationScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerOrganizationConfigurationScopedRoleAssignmentName
                }

                #
                # Role Management scoped role
                #
                $ffoServicePartnerRoleManagementScopedRoleName = "FfoServicePartner-RoleManagementScopedRole";
                $ffoServicePartnerRoleManagementScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerRoleManagementScopedRoleName};
                if ($ffoServicePartnerRoleManagementScopedRole -eq $null)
                {
                $ffoServicePartnerRoleManagementScopedRole = New-ManagementRole -Name $ffoServicePartnerRoleManagementScopedRoleName -Parent $roleManagement -DomainController $RoleDomainController;
                }

                $roleManagementCmdlets = @{}
                $roleManagementCmdlets["Update-RoleGroupMember"] = ("Identity", "Members", "BypassSecurityGroupManagerCheck")
                $roleManagementCmdlets["Get-RoleGroupMember"] = ("Identity")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerRoleManagementScopedRoleName\* | where { $roleManagementCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $roleManagementCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerRoleManagementScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $roleManagement.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerRoleManagementScopedRole.Identity -DomainController $RoleDomainController
                }

                $parameterSet = $roleManagementCmdlets[$cmdlet]
                if ($parameterSet -eq "*")
                {
                $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $roleManagement.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerRoleManagementScopedRoleName\$cmdlet -Parameters $parameterSet
                }

                $ffoServicePartnerRoleManagementScopedRoleAssignmentName = "FfoServicePartner-RoleManagementScopedRoleAssignment";
                $ffoServicePartnerRoleManagementScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerRoleManagementScopedRoleAssignmentName};
                if ($ffoServicePartnerRoleManagementScopedRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerRoleManagementScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerRoleManagementScopedRoleAssignmentName
                }

                #
                # Distribution Groups scoped role
                #
                $ffoServicePartnerDistributionGroupScopedRoleName = "FfoServicePartner-DistributionGroupScopedRole";
                $ffoServicePartnerDistributionGroupScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where { $_.Name -ieq $ffoServicePartnerDistributionGroupScopedRoleName };
                if($ffoServicePartnerDistributionGroupScopedRole -eq $null)
                {
                $ffoServicePartnerDistributionGroupScopedRole = New-ManagementRole -Name $ffoServicePartnerDistributionGroupScopedRoleName -Parent $distributionGroups -DomainController $RoleDomainController;
                }

                $distributionGroupCmdlets = @{}
                $distributionGroupCmdlets["Get-DistributionGroup"] = ("Identity", "ResultSize")
                $distributionGroupCmdlets["Remove-DistributionGroup"] = ("Identity")
                $distributionGroupCmdlets["New-DistributionGroup"] = ("Name", "DisplayName", "PrimarySmtpAddress", "Notes", "IgnoreNamingPolicy", "MemberDepartRestriction", "MemberJoinRestriction", "ManagedBy", "Members")
                $distributionGroupCmdlets["Get-DistributionGroupMember"] = ("Identity", "ResultSize")
                $distributionGroupCmdlets["Add-DistributionGroupMember"] = ("Identity", "Member")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDistributionGroupScopedRoleName\* | Where { $distributionGroupCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $distributionGroupCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDistributionGroupScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $distributionGroups.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerDistributionGroupScopedRole.Identity -DomainController $RoleDomainController
                }

                $parameterSet = $distributionGroupCmdlets[$cmdlet]
                if ($parameterSet -eq "*")
                {
                $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $distributionGroups.Identity,$cmdlet) -DomainController $RoleDomainController).Parameters
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDistributionGroupScopedRoleName\$cmdlet -Parameters $parameterSet
                }


                $ffoServicePartnerDistributionGroupScopedRoleAssignmentName = "FfoServicePartner-DistributionGroupScopedRoleAssignment";
                $ffoServicePartnerDistributionGroupRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where { $_.Name -ieq $ffoServicePartnerDistributionGroupScopedRoleAssignmentName };
                if($ffoServicePartnerDistributionGroupRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerDistributionGroupScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerDistributionGroupScopedRoleAssignmentName;
                }

                #
                # DataCenter Operations scoped role
                #
                $ffoServicePartnerDataCenterOperationsScopedRoleName = "FfoServicePartner-DataCenterOperationsScopedRole";
                $ffoServicePartnerDataCenterOperationsScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerDataCenterOperationsScopedRoleName};
                if ($ffoServicePartnerDataCenterOperationsScopedRole -eq $null)
                {
                $ffoServicePartnerDataCenterOperationsScopedRole = New-ManagementRole -Name $ffoServicePartnerDataCenterOperationsScopedRoleName -Parent $dataCenterOperations -DomainController $RoleDomainController;
                }

                $dataCenterOperationsCmdlets = @{}
                $dataCenterOperationsCmdlets["Set-Organization"] = ("Identity", "RelocationConstraintType", "AddRelocationConstraint", "RelocationConstraintExpirationInDays")
                $dataCenterOperationsCmdlets["Send-ComplianceMessage"] = ("SerializedComplianceMessage")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDataCenterOperationsScopedRoleName\* | where { $dataCenterOperationsCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $dataCenterOperationsCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDataCenterOperationsScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $DataCenterOperations.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerDataCenterOperationsScopedRole.Identity -DomainController $RoleDomainController
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerDataCenterOperationsScopedRoleName\$cmdlet -Parameters $dataCenterOperationsCmdlets[$cmdlet]
                }

                $ffoServicePartnerDataCenterOperationsScopedRoleAssignmentName = "FfoServicePartner-DataCenterOperationsScopedRoleAssignment";
                $ffoServicePartnerDataCenterOperationsScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerDataCenterOperationsScopedRoleAssignmentName};
                if ($ffoServicePartnerDataCenterOperationsScopedRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerDataCenterOperationsScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerDataCenterOperationsScopedRoleAssignmentName
                }

                #
                # Mail Recipient Creation scoped role
                #
                $ffoServicePartnerMailRecipientCreationScopedRoleName = "FfoServicePartner-MailRecipientCreationScopedRole";
                $ffoServicePartnerMailRecipientCreationScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerMailRecipientCreationScopedRoleName};
                if ($ffoServicePartnerMailRecipientCreationScopedRole -eq $null)
                {
                $ffoServicePartnerMailRecipientCreationScopedRole = New-ManagementRole -Name $ffoServicePartnerMailRecipientCreationScopedRoleName -Parent $mailRecipientCreation -DomainController $RoleDomainController;
                }

                $mailRecipientCreationCmdlets = @{}
                $mailRecipientCreationCmdlets["New-MailUser"] = ("Organization", "Name", "Alias", "DisplayName", "FirstName", "LastName", "WindowsLiveID", "ExternalEmailAddress", "ResetPasswordOnNextLogon", "Password", "UseExistingLiveId")
                $mailRecipientCreationCmdlets["Remove-MailUser"] = ("Identity")

                Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerMailRecipientCreationScopedRoleName\* | where { $mailRecipientCreationCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
                foreach ($cmdlet in $mailRecipientCreationCmdlets.Keys)
                {
                $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerMailRecipientCreationScopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                if ($entry -eq $null)
                {
                Get-ManagementRoleEntry ("{0}\{1}" -f $mailRecipientCreation.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerMailRecipientCreationScopedRole.Identity -DomainController $RoleDomainController
                }

                Set-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerMailRecipientCreationScopedRoleName\$cmdlet -Parameters $mailRecipientCreationCmdlets[$cmdlet]
                }

                $ffoServicePartnerMailRecipientCreationScopedRoleAssignmentName = "FfoServicePartner-MailRecipientCreationScopedRoleAssignment";
                $ffoServicePartnerMailRecipientCreationScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerMailRecipientCreationScopedRoleAssignmentName};
                if ($ffoServicePartnerMailRecipientCreationScopedRoleAssignment -eq $null)
                {
                New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerMailRecipientCreationScopedRole.Identity -DomainController $RoleDomainController -CustomConfigWriteScope "FfoPartnerScope" -Name $ffoServicePartnerMailRecipientCreationScopedRoleAssignmentName
                }
              </Global>
              <Tenant />
         </Install>
         <BuildToBuildUpgrade UseInstallTasks="true" />
         <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner unscoped role for Ffo service user so that it can run get-managementendpoint. -->
    <OrgTaskInfo Id="_941fffbe1ba14ece806e7e390d92b000" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
         <Install>
              <Global>
                   $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
                   $ffoServicePartnerUnscopedRoleName = "FfoServicePartner-UnscopedRole";
                   $ffoServicePartnerUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerUnscopedRoleName};
                   if($ffoServicePartnerUnscopedRole -eq $null)
                   {
                       $ffoServicePartnerUnscopedRole = New-ManagementRole -Name $ffoServicePartnerUnscopedRoleName -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
                   }

                   if ($RoleDatacenterFfoEnvironment -eq "True")
                   {
                       $ffoUnscopedRoleCmdlets = ("Get-ManagementEndpoint", "Get-Organization")
                   }
                   else
                   {
                       $ffoUnscopedRoleCmdlets = ("Get-ManagementEndpoint")
                   }

                   Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerUnscopedRoleName\* | where { $ffoUnscopedRoleCmdlets -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

                   foreach ($cmdlet in $ffoUnscopedRoleCmdlets)
                   {
                       $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ffoServicePartnerUnscopedRoleName\$cmdlet -ErrorAction:SilentlyContinue

                       if ($entry -eq $null)
                       {
                           Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $ffoServicePartnerUnscopedRole.Identity -DomainController $RoleDomainController
                       }
                   }

                   $ffoServicePartnerUnscopedRoleAssignmentName = "FfoServicePartner-UnscopedRoleAssignment";
                   $ffoServicePartnerUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $ffoServicePartnerUnscopedRoleAssignmentName};
                   if($ffoServicePartnerUnscopedRoleAssignment -eq $null)
                   {
                     New-ManagementRoleAssignment -User "FfoServicePartnerUser" -Role $ffoServicePartnerUnscopedRole.Identity -DomainController $RoleDomainController -Name $ffoServicePartnerUnscopedRoleAssignmentName;
                   }
              </Global>
              <Tenant />
         </Install>
         <BuildToBuildUpgrade UseInstallTasks="true" />
         <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the partner user for FFO Service partner user   -->
    <OrgTaskInfo Id="_1c84e4a754e74067a4b0014a76786057" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
         <Install>
              <Global>
                   Set-ThrottlingPolicyAssociation -Identity "FfoServicePartnerUser" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
              </Global>
              <Tenant />
         </Install>
         <BuildToBuildUpgrade UseInstallTasks="true"/>
         <Uninstall />
    </OrgTaskInfo>

    <!-- create the FOPE partner user and permissions-->
    <!-- Create FOPE Service Account -->
    <OrgTaskInfo Id="_3b98c12529ea40dfad6c57abcd530432" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">                      
      <Install>
        <Global>
          $FOPEServicePartnerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "FOPEServiceAccount"};
          if($FOPEServicePartnerUser -eq $null)
          {
            $FOPEServicePartnerUserUPN = "FOPEServiceAccount@" + $RoleFullyQualifiedDomainName;
            $FOPEServicePartnerUser = New-LinkedUser -Name "FOPEServiceAccount" -UserPrincipalName $FOPEServicePartnerUserUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>    

    <!-- Set the CertificateSubject and enable RemotePowershell on the newly created FOPE Service Account -->
    <OrgTaskInfo Id="_7611940104854a1d8ad3f88e08ac1a8b" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "FOPEServiceAccount" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterFOPEServiceCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign a scoped management role to the FOPE Service Account -->
    <OrgTaskInfo Id="_d90fd64f6d174e80a26b063d38491e89" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $FOPEServicePartnerScope = Get-ManagementScope -DomainController $RoleDomainController | where {$_.Name -ieq "MSOnlinePartnerScope" };
          if($FOPEServicePartnerScope -eq $null)
          {
          $FOPEServicePartnerScope =  New-ManagementScope -Name "MSOnlinePartnerScope" -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'MSOnline'" -DomainController $RoleDomainController;
          }

          $partnerDelegatedTenantManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType PartnerDelegatedTenantManagement | where { $_.IsRootRole };

          $FOPEServiceScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "FOPEServicePartner-ScopedRole"};
          if($FOPEServiceScopedRole -eq $null)
          {
          $FOPEServiceScopedRole = New-ManagementRole -Name "FOPEServicePartner-ScopedRole" -Parent $partnerDelegatedTenantManagementRole -DomainController $RoleDomainController;
          }

          $setCurrentOrganizationEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController FOPEServicePartner-ScopedRole\Set-CurrentOrganization;
          $setPerimeterConfigEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController FOPEServicePartner-ScopedRole\Set-PerimeterConfig;

          Get-ManagementRoleEntry -DomainController $RoleDomainController FOPEServicePartner-ScopedRole\* | Where { ($_.Name -ine $setPerimeterConfigEntry.Name) -and ($_.Name -ine $setCurrentOrganizationEntry.Name )} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

          $desiredParams = ("Confirm", "PerimeterOrgId", "Identity", "EhfAdminAccountSyncEnabled", "EhfConfigSyncEnabled", "MigrationInProgress");

          $paramsToRemove = $setPerimeterConfigEntry.Parameters | Where { $desiredParams -notcontains $_ };
          foreach ($p in $paramsToRemove)
          {
          Set-ManagementRoleEntry -Identity $setPerimeterConfigEntry -Parameters $p -RemoveParameter -DomainController $RoleDomainController;
          }

          foreach ($p in $desiredParams)
          {
          Set-ManagementRoleEntry -Identity $setPerimeterConfigEntry -Parameters $p -AddParameter -ErrorAction:SilentlyContinue -DomainController $RoleDomainController;
          }

          $FOPEServicePartnerScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "FOPEServicePartner-ScopedRoleAssignment"};
          if($FOPEServicePartnerScopedRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User $FOPEServicePartnerUser.Identity -Role $FOPEServiceScopedRole.Identity -CustomConfigWriteScope "MSOnlinePartnerScope" -DomainController $RoleDomainController -Name "FOPEServicePartner-ScopedRoleAssignment";
          }
        </Global>
      <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Add set-accepteddomain capability to the FOPE role -->
    <OrgTaskInfo Id="_1ba85102136c4ccd8e22843c5b3c32bd" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $setAcceptedDomainEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController FOPEServicePartner-ScopedRole\Set-AcceptedDomain -ErrorAction:SilentlyContinue;

          if ($setAcceptedDomainEntry -eq $null)
          {
            Get-ManagementRoleEntry -DomainController $RoleDomainController PartnerDelegatedTenantManagement\set-accepteddomain | Add-ManagementRoleEntry -Role FOPEServicePartner-ScopedRole -DomainController $RoleDomainController;

            $setAcceptedDomainEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController FOPEServicePartner-ScopedRole\Set-AcceptedDomain -ErrorAction:SilentlyContinue;
          }

          $params = $setAcceptedDomainEntry.Parameters | Where { ($_ -ine "Confirm") -and ($_ -ine "DomainType") -and ($_ -ine "Identity") -and ($_ -ine "OutboundOnly")};
          foreach ($p in $params)
          {
            Set-ManagementRoleEntry -Identity $setAcceptedDomainEntry -Parameters $p -RemoveParameter;
          }
      </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner (unscoped) role for FOPE Service so they can run get-managementendpoint -->
    <OrgTaskInfo Id="_9a6ca766048f4a2cb5d7bdc4782f348e" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $FOPEServiceUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "FOPEServicePartner-UnscopedRole"};
          if($FOPEServiceUnscopedRole -eq $null)
          {
          $FOPEServiceUnscopedRole = New-ManagementRole -Name "FOPEServicePartner-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }

          $getManagementEndPointEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController FOPEServicePartner-UnscopedRole\Get-ManagementEndpoint;
          
          Get-ManagementRoleEntry -DomainController $RoleDomainController FOPEServicePartner-UnscopedRole\* | where { $_.Name -ine $getManagementEndPointEntry.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

          $FOPEServiceUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "FOPEServicePartner-UnscopedRoleAssignment"};
          if($FOPEServiceUnscopedRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User $FOPEServicePartnerUser.Identity -Role $FOPEServiceUnscopedRole.Identity -DomainController $RoleDomainController -Name "FOPEServicePartner-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>


    <!-- Assign the Throttling Policy for the FOPE Service Account   -->
    <OrgTaskInfo Id="_204ABFA120CC4e7fB6386F37C94B8FC0" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "FOPEServiceAccount" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- end of create FOPEServiceAccount-->

    <!-- BEGIN - OSP User -->

    <!-- Step 1 of 4 - Create a new user -->
    <OrgTaskInfo Id="_9f6e49d0a64f483a99a5ebdefc2b5272" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            If ($RoleDatacenterFfoEnvironment -eq "True")
            {
                # Create OspUser 
                $ospUserName = "OspUser";
                $ospUser = Get-LinkedUser -DomainController $RoleDomainController | ? {$_.Name -ieq $ospUserName};
                If(-Not $ospUser)
                {
                    $ospUserUPN = $ospUserName + "@" + $RoleFullyQualifiedDomainName;
                    $ospUser = New-LinkedUser -Name $ospUserName -UserPrincipalName $ospUserUPN -DomainController $RoleDomainController;
                }
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Step 2 of 4 - Set the CertificateSubject and enable remote PowerShell for the user created at step 1 -->
    <OrgTaskInfo Id="_d3ac112b245d45ea8b076c276927bfa8" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            If ($RoleDatacenterFfoEnvironment -eq "True")
            {
                $ospUserName = "OspUser";
                Set-User $ospUserName -RemotePowerShellEnabled $True -CertificateSubject $RoleDatacenterOspCertSubjects -DomainController $RoleDomainController;


                # Define new Management Role
                $centralAdminManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType CentralAdminManagement | ? { $_.IsRootRole };

                $ospUserUnscopedRoleName = "OspUser-UnscopedRole";
                $ospUserUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | ? {$_.Name -ieq $ospUserUnscopedRoleName};
                If(-Not $ospUserUnscopedRole)
                {
                    $ospUserUnscopedRole = New-ManagementRole -Name $ospUserUnscopedRoleName -Parent $centralAdminManagementRole -DomainController $RoleDomainController;
                }
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Step 3 of 4 - Create an unscoped role -->
    <OrgTaskInfo Id="_b8cf652bf8db42e79dba69c9561416db" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
      <Install>
         <Global>
            If ($RoleDatacenterFfoEnvironment -eq "True")
            {
                $ospUserName = "OspUser";
                $ospUserCmdlets = @{}
                $ospUserCmdlets["Get-CentralAdminMachine"] = "*"
                $ospUserCmdlets["Get-CentralAdminDropBoxMachineEntry"] = "*"
             
                $ospUserUnscopedRoleName = "OspUser-UnscopedRole";
                Get-ManagementRoleEntry -DomainController $RoleDomainController $ospUserUnscopedRoleName\* `
                    | ? { $ospUserCmdlets.Keys -NotContains $_.Name } `
                    | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$False;
             
                ForEach ($cmdlet in $ospUserCmdlets.Keys)
                {
                    $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $ospUserUnscopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                    If (-Not $entry)
                    {
                        Get-ManagementRoleEntry ("{0}\{1}" -f $centralAdminManagementRole.Identity, $cmdlet) -DomainController $RoleDomainController `
                            | Add-ManagementRoleEntry -Role $ospUserUnscopedRole.Identity -DomainController $RoleDomainController
                    }
                 
                    $parameterSet = $ospUserCmdlets[$cmdlet]
                    If ($parameterSet -eq "*")
                    {
                        $parameterSet = (Get-ManagementRoleEntry ("{0}\{1}" -f $centralAdminManagementRole.Identity, $cmdlet) -DomainController $RoleDomainController).Parameters
                    }
                    
                    Set-ManagementRoleEntry -DomainController $RoleDomainController $ospUserUnscopedRoleName\$cmdlet -Parameters $parameterSet
                }
             
                $ospUserUnscopedRoleAssignmentName = "OspUser-UnscopedRoleAssignment";
                $ospUserUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | ? { $_.Name -ieq $ospUserUnscopedRoleAssignmentName }
                If(-Not $ospUserUnscopedRoleAssignment)
                {
                    New-ManagementRoleAssignment -User $ospUserName -Role $ospUserUnscopedRole.Identity -DomainController $RoleDomainController -Name $ospUserUnscopedRoleAssignmentName;
                }
            }
         </Global>
         <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Step 4 of 4 - Assign the Throttling Policy for the user -->
    <OrgTaskInfo Id="_0ef328e3f0224bb78dcc70763ca6398d" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            If ($RoleDatacenterFfoEnvironment -eq "True")
            {
                $ospUserName = "OspUser";
                Set-ThrottlingPolicyAssociation -Identity $ospUserName -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- END - OSP User -->

    <!-- BEGIN - EopSec User -->

    <!-- Step 1 of 4 - Create a new user -->
    <OrgTaskInfo Id="_9f6e49d0a64f483a99a5ebdefc2b5274" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            If ($RoleDatacenterFfoEnvironment -eq "True")
            {
                # Create EopSecUser 
                $EopSecUserName = "EopSecUser";
                $EopSecUser = Get-LinkedUser -DomainController $RoleDomainController | ? {$_.Name -ieq $EopSecUserName};
                If(-Not $EopSecUser)
                {
                    $EopSecUserUPN = $EopSecUserName + "@" + $RoleFullyQualifiedDomainName;
                    $EopSecUser = New-LinkedUser -Name $EopSecUserName -UserPrincipalName $EopSecUserUPN -DomainController $RoleDomainController;
                }
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Step 2 of 4 - Set the CertificateSubject and enable remote PowerShell for the user created at step 1 -->
    <OrgTaskInfo Id="_d3ac112b245d45ea8b076c276927bfa1" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            If ($RoleDatacenterFfoEnvironment -eq "True")
            {
                $EopSecUserName = "EopSecUser";
                Set-User $EopSecUserName -RemotePowerShellEnabled $True -CertificateSubject $RoleDatacenterEopSecUserCertSubjects -DomainController $RoleDomainController;
                
                $EopSecUserUnscopedRoleName = "EopSecUser-UnscopedRole";
                $EopSecUserUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | ? {$_.Name -ieq $EopSecUserUnscopedRoleName}
                If(-Not $EopSecUserUnscopedRole)
                {
                    $EopSecUserUnscopedRole = New-ManagementRole -Name $EopSecUserUnscopedRoleName -UnScopedTopLevel -DomainController $RoleDomainController;
                }
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Step 3 of 4 - Create an unscoped role -->
    <OrgTaskInfo Id="_b8cf652bf8db42e79dba69c9561416d1" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
      <Install>
         <Global>
            If ($RoleDatacenterFfoEnvironment -eq "True")
            {
                $EopSecUserName = "EopSecUser";
                $EopSecUserCmdlets = @{}
                $EopSecUserCmdlets["resetPassword.ps1"] = @("accountName", "newPassword");
                $EopSecUserCmdlets["GetAccountsForUser.ps1"] = @("userAlias");
                
                $EopSecUserUnscopedRoleName = "EopSecUser-UnscopedRole";
                Get-ManagementRoleEntry $EopSecUserUnscopedRoleName\* -DomainController $RoleDomainController -ErrorAction SilentlyContinue `
                    | ? { $EopSecUserCmdlets.Keys -NotContains $_.Name } `
                    | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$False;
                
                ForEach ($cmdlet in $EopSecUserCmdlets.Keys)
                {
                    $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $EopSecUserUnscopedRoleName\$cmdlet -ErrorAction:SilentlyContinue
                    If (-Not $entry)
                    {
                        Add-ManagementRoleEntry $EopSecUserUnscopedRoleName\$cmdlet -Parameters $EopSecUserCmdlets[$cmdlet] -UnScopedTopLevel -Type Script -SkipScriptExistenceCheck -DomainController $RoleDomainController 
                    }
                 
                    $parameterSet = $EopSecUserCmdlets[$cmdlet]       
                    Set-ManagementRoleEntry $EopSecUserUnscopedRoleName\$cmdlet -UnScopedTopLevel -Parameters $EopSecUserCmdlets[$cmdlet] -SkipScriptExistenceCheck -DomainController $RoleDomainController
                }
                
                $EopSecUserUnscopedRoleAssignmentName = "EopSecUser-UnscopedRoleAssignment";
                $EopSecUserUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | ? { $_.Name -ieq $EopSecUserUnscopedRoleAssignmentName }
                If(-Not $EopSecUserUnscopedRoleAssignment)
                {
                    New-ManagementRoleAssignment -User $EopSecUserName -Role $EopSecUserUnscopedRole.Identity -DomainController $RoleDomainController -Name $EopSecUserUnscopedRoleAssignmentName;
                }
            }
         </Global>
         <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Step 4 of 4 - Assign the Throttling Policy for the user -->
    <OrgTaskInfo Id="_0ef328e3f0224bb78dcc70763ca63981" Component="OFFICE15:\Current\Forefront for Office Transport and Information Protection\AntiSpam" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            If ($RoleDatacenterFfoEnvironment -eq "True")
            {
                $EopSecUserName = "EopSecUser";
                Set-ThrottlingPolicyAssociation -Identity $EopSecUserName -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- END - EOPSec User -->

    <!-- create the BOX partner user and permissions-->
    <!-- Create BOX Service Account -->
    <OrgTaskInfo Id="_bbc658397d1748c38265a5d36358c459" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $BOXServiceAccount = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "BOXServiceAccount"};
          if($BOXServiceAccount -eq $null)
          {
          $BOXServiceAccountUPN = "BOXServiceAccount@" + $RoleFullyQualifiedDomainName;
          $BOXServiceAccount = New-LinkedUser -Name "BOXServiceAccount" -UserPrincipalName $BOXServiceAccountUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject and enable RemotePowershell on the newly created BOX Service Account -->
    <OrgTaskInfo Id="_b0115b53311246048aa07d7dba605577" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "BOXServiceAccount" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterBOXServiceAccountCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign a scoped management role to the BOX Service Account -->
    <OrgTaskInfo Id="_a7aac41a480844d59c838b0b9b102859" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $BOXServiceAccountScope = Get-ManagementScope -DomainController $RoleDomainController | where {$_.Name -ieq "MSOnlinePartnerScope" };
          if($BOXServiceAccountScope -eq $null)
          {
          $BOXServiceAccountScope =  New-ManagementScope -Name "MSOnlinePartnerScope" -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'MSOnline'" -DomainController $RoleDomainController;
          }

          $partnerDelegatedTenantManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType PartnerDelegatedTenantManagement | where { $_.IsRootRole };

          $BOXServiceAccountScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "BOXServiceAccount-ScopedRole"};
          if($BOXServiceAccountScopedRole -eq $null)
          {
          $BOXServiceAccountScopedRole = New-ManagementRole -Name "BOXServiceAccount-ScopedRole" -Parent $partnerDelegatedTenantManagementRole -DomainController $RoleDomainController;
          }

          $BOXServiceAccountScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "BOXServiceAccount-ScopedRoleAssignment"};
          if($BOXServiceAccountScopedRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User $BOXServiceAccount.Identity -Role $BOXServiceAccountScopedRole.Identity -CustomConfigWriteScope "MSOnlinePartnerScope" -DomainController $RoleDomainController -Name "BOXServiceAccount-ScopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner (unscoped) role for BOX Service Account so they can run get-managementendpoint -->
    <OrgTaskInfo Id="_8b47707365404c26a1864088c641e911" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $BOXServiceAccountUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "BOXServiceAccount-UnscopedRole"};
          if($BOXServiceAccountUnscopedRole -eq $null)
          {
          $BOXServiceAccountUnscopedRole = New-ManagementRole -Name "BOXServiceAccount-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }

          $getManagementEndPointEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController BOXServiceAccount-UnscopedRole\Get-ManagementEndpoint;

          Get-ManagementRoleEntry -DomainController $RoleDomainController BOXServiceAccount-UnscopedRole\* | where { $_.Name -ine $getManagementEndPointEntry.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

          $BOXServiceAccountUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "BOXServiceAccount-UnscopedRoleAssignment"};
          if($BOXServiceAccountUnscopedRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User $BOXServiceAccount.Identity -Role $BOXServiceAccountUnscopedRole.Identity -DomainController $RoleDomainController -Name "BOXServiceAccount-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the BOX Service Account -->
    <OrgTaskInfo Id="_18a75f277f564b3e8bbe01d9a05bb8a9" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "BOXServiceAccount" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- end of create BOXServiceAccount-->

    <!-- create the LiveEduBPOSServiceAccount partner user and permissions-->
    <!-- This account is to give live@EDU access to reading PUIDs for consumer/organization instance of tenants that have -->
    <!-- been migrated from EDU to BPOS tenants -->
    <OrgTaskInfo Id="_90051ba0b26741c68e7fcd1db3038b9c" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $LiveEduBPOSServiceAccount = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduBPOSServiceAccount"};
          if($LiveEduBPOSServiceAccount -eq $null)
          {
            $LiveEduBPOSAccountUPN = "LiveEduBPOSServiceAccount@" + $RoleFullyQualifiedDomainName;
            $LiveEduBPOSServiceAccount = New-LinkedUser -Name "LiveEduBPOSServiceAccount" -UserPrincipalName $LiveEduBPOSAccountUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject and enable RemotePowershell on the newly created LiveEduBPOS Service Account -->
    <OrgTaskInfo Id="_4a4dbab8e11c48ed92afb0dcb0750194" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "LiveEduBPOSServiceAccount" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterLiveEduBPOSServiceAccountCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign a scoped management role to the LiveEduBPOS Service Account -->
    <OrgTaskInfo Id="_bd2f345e4ccf46a4b82e96ac9e2abc0a" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $LiveEduBPOSAccountScope = Get-ManagementScope -DomainController $RoleDomainController | where {$_.Name -ieq "MSOnlinePartnerScope" };
          if($LiveEduBPOSAccountScope -eq $null)
          {
          $LiveEduBPOSAccountScope =  New-ManagementScope -Name "MSOnlinePartnerScope" -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'MSOnline'" -DomainController $RoleDomainController;
          }

          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };

          $LiveEduBPOSScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduBPOSServiceAccount-ScopedRole2"};
          if($LiveEduBPOSScopedRole -eq $null)
          {
          $LiveEduBPOSScopedRole = New-ManagementRole -Name "LiveEduBPOSServiceAccount-ScopedRole2" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }

          $scopedCmdlets = @{}
          $scopedCmdlets["Get-User"]         = ("ResultSize", "ErrorAction", "Identity", "SortBy", "Filter", "RecipientTypeDetails")
          $scopedCmdlets["Get-SyncMailbox"]  = ("ResultSize", "ErrorAction", "Identity", "SortBy", "Filter", "Pages", "Cookie")
          $scopedCmdlets["Get-SyncMailUser"] = ("ResultSize", "ErrorAction", "Identity", "SortBy", "Filter", "Pages", "Cookie")
          $scopedCmdlets["Set-CurrentOrganization"] = ("Identity", "ErrorAction")
          $scopedCmdlets["Get-Organization"] = ("Identity", "ErrorAction")

          Get-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduBPOSScopedRole\* | where { $scopedCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          foreach ($cmdlet in $scopedCmdlets.Keys)
          {
          $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduBPOSScopedRole\$cmdlet -ErrorAction:SilentlyContinue
          if ($entry -eq $null)
          {
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $LiveEduBPOSScopedRole.Identity -DomainController $RoleDomainController
          }

          Set-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduBPOSScopedRole\$cmdlet -Parameters $scopedCmdlets[$cmdlet]
          }

          $LiveEduBPOSServiceAccountScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduBPOSServiceAccount-ScopedRoleAssignment2"};
          if($LiveEduBPOSServiceAccountScopedRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User $LiveEduBPOSServiceAccount.Identity -Role $LiveEduBPOSScopedRole.Identity -CustomConfigWriteScope "MSOnlinePartnerScope" -DomainController $RoleDomainController -Name "LiveEduBPOSServiceAccount-ScopedRoleAssignment2";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner (unscoped) role for LiveEduBPOS Service Account so they can run get-managementendpoint -->
    <OrgTaskInfo Id="_4a510ce2311a46de9744fb2d6539cf4a" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $LiveEduBPOSServiceAccountUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduBPOSServiceAccount-UnscopedRole"};
          if($LiveEduBPOSServiceAccountUnscopedRole -eq $null)
          {
              $LiveEduBPOSServiceAccountUnscopedRole = New-ManagementRole -Name "LiveEduBPOSServiceAccount-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }

          $getManagementEndPointEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController LiveEduBPOSServiceAccount-UnscopedRole\Get-ManagementEndpoint;
          $getOrganizationEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController LiveEduBPOSServiceAccount-UnscopedRole\Get-Organization;

          Get-ManagementRoleEntry -DomainController $RoleDomainController LiveEduBPOSServiceAccount-UnscopedRole\* | where { ($_.Name -ine $getManagementEndPointEntry.Name) -and ($_.Name -ine $getOrganizationEntry.Name) } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

          $LiveEduBPOSServiceAccountUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduBPOSServiceAccount-UnscopedRoleAssignment"};
          if($LiveEduBPOSServiceAccountUnscopedRoleAssignment -eq $null)
          {
              New-ManagementRoleAssignment -User $LiveEduBPOSServiceAccount.Identity -Role $LiveEduBPOSServiceAccountUnscopedRole.Identity -DomainController $RoleDomainController -Name "LiveEduBPOSServiceAccount-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the LiveEduBPOS Service Account -->
    <OrgTaskInfo Id="_ad14c9a1d22e49cb8747f343e2bfd932" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "LiveEduBPOSServiceAccount" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner role for the EduLiveServiceAcct Service so they can run new-organization. The partner role is insufficient for this because it is a scoped role -->
    <OrgTaskInfo Id="_6863fa84f362413a8dfeb026576309b2" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $dataCenterOperationsRole = Get-ManagementRole -RoleType DataCenterOperations | where { $_.IsRootRole };

          $EduLiveServiceAcctUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveServiceAcct-UnscopedRole"};
          if($EduLiveServiceAcctUnscopedRole -eq $null)
          {
            $EduLiveServiceAcctUnscopedRole = New-ManagementRole -Name "EduLiveServiceAcct-UnscopedRole" -Parent $dataCenterOperationsRole -DomainController $RoleDomainController;
          }

          $newOrganizationEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController EduLiveServiceAcct-UnscopedRole\New-Organization;
          Get-ManagementRoleEntry -DomainController $RoleDomainController EduLiveServiceAcct-UnscopedRole\* | where {$_.Name -ine $newOrganizationEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

          $EduLiveServiceAcctUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveServiceAcct-UnscopedRoleAssignment"};
          if($EduLiveServiceAcctUnscopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User "EduLiveServiceAcct" -Role $EduLiveServiceAcctUnscopedRole.Identity -DomainController $RoleDomainController -Name "EduLiveServiceAcct-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign a scoped management role to the EduLivePartnerUser Service Account. Do it here because this is the BPOS scoped tenant permissions -->
    <!-- they need and they need to use the "MSOnlinePartnerScope" scope created earlier. -->
    <OrgTaskInfo Id="_4b453a508bc4433aabb37c947742b3bc" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $PartnerDelegatedTenantManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType PartnerDelegatedTenantManagement | where { $_.IsRootRole };

          $EduLivePartnerUserBposScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveServiceAcct-BposScopedRole"};
          if($EduLivePartnerUserBposScopedRole -eq $null)
          {
            $EduLivePartnerUserBposScopedRole = New-ManagementRole -Name "EduLiveServiceAcct-BposScopedRole" -Parent $PartnerDelegatedTenantManagementRole -DomainController $RoleDomainController;
          }

          $scopedCmdlets = @{}
          $scopedCmdlets["Get-User"]  = ("ErrorAction", "Identity", "Filter", "ResultSize")
          $scopedCmdlets["Set-User"] = ("ErrorAction", "Identity", "SKUAssigned")
          $scopedCmdlets["Get-SyncMailbox"] = ("Identity", "ErrorAction", "SortBy", "Filter", "Pages", "Cookie", "ResultSize")
          $scopedCmdlets["Set-SyncMailbox"] = ("Identity", "SKUAssigned", "ErrorAction")
          $scopedCmdlets["Get-Organization"]  = ("ErrorAction", "Identity")
          $scopedCmdlets["Set-Organization"]  = ("ErrorAction", "ExcludedFromForwardSyncEDU2BPOS", "ExcludedFromBackSync", "IOwnMigrationTenant", "IOwnMigrationStatus")

          Get-ManagementRoleEntry -DomainController $RoleDomainController $EduLivePartnerUserBposScopedRole\* | where { $scopedCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          foreach ($cmdlet in $scopedCmdlets.Keys)
          {
            $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $EduLivePartnerUserBposScopedRole\$cmdlet -ErrorAction:SilentlyContinue
            if ($entry -eq $null)
            {
              Get-ManagementRoleEntry ("{0}\{1}" -f $PartnerDelegatedTenantManagementRole.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $EduLivePartnerUserBposScopedRole.Identity -DomainController $RoleDomainController
            }

            Set-ManagementRoleEntry -DomainController $RoleDomainController $EduLivePartnerUserBposScopedRole\$cmdlet -Parameters $scopedCmdlets[$cmdlet]
          }

          $EduLivePartnerUserBposScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveServiceAcct-BposScopedRoleAssignment2"};
          if($EduLivePartnerUserBposScopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User $EduLivePartnerUser.Identity -Role $EduLivePartnerUserBposScopedRole.Identity -CustomConfigWriteScope "MSOnlinePartnerScope" -DomainController $RoleDomainController -Name "EduLiveServiceAcct-BposScopedRoleAssignment2";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign a scoped (to BPOS tenants) management role to the Live@EDU Email Handler Service Account. Do it here because this is the BPOS scoped tenant permissions -->
    <!-- they need and they need to use the "MSOnlinePartnerScope" scope created earlier. -->
    <OrgTaskInfo Id="_a5630ed97d5f4f64a66ae943c8dc02c3" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLiveEmailHandlerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveEmailHandlerServiceAcct"};
          $PartnerDelegatedTenantManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType PartnerDelegatedTenantManagement | where { $_.IsRootRole };

          $LiveEduEmailHandlerBposScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduEmailHandler-BposScopedRole"};
          if($LiveEduEmailHandlerBposScopedRole -eq $null)
          {
            $LiveEduEmailHandlerBposScopedRole = New-ManagementRole -Name "LiveEduEmailHandler-BposScopedRole" -Parent $PartnerDelegatedTenantManagementRole -DomainController $RoleDomainController;
          }

          $scopedCmdlets = @{}
          $scopedCmdlets["Get-SyncMailbox"]  = ("ErrorAction", "Identity", "SortBy", "Filter", "Pages", "Cookie")
          $scopedCmdlets["Set-CurrentOrganization"] = ("Identity", "ErrorAction")
          $scopedCmdlets["Get-Organization"] = ("Identity", "ErrorAction")
          $scopedCmdlets["Get-User"] = ("Identity", "Filter", "ErrorAction")
          $scopedCmdlets["Get-RecipientEnforcementProvisioningPolicy"] = ("Identity", "Status")

          Get-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduEmailHandlerBposScopedRole\* | where { $scopedCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          foreach ($cmdlet in $scopedCmdlets.Keys)
          {
            $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduEmailHandlerBposScopedRole\$cmdlet -ErrorAction:SilentlyContinue
            if ($entry -eq $null)
            {
              Get-ManagementRoleEntry ("{0}\{1}" -f $PartnerDelegatedTenantManagementRole.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $LiveEduEmailHandlerBposScopedRole.Identity -DomainController $RoleDomainController
            }

            Set-ManagementRoleEntry -DomainController $RoleDomainController $LiveEduEmailHandlerBposScopedRole\$cmdlet -Parameters $scopedCmdlets[$cmdlet]
          }

          $LiveEduEmailHandlerBposScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "LiveEduEmailHandler-BposScopedRoleAssignment"};
          if($LiveEduEmailHandlerBposScopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User $EduLiveEmailHandlerUser.Identity -Role $LiveEduEmailHandlerBposScopedRole.Identity -CustomConfigWriteScope "MSOnlinePartnerScope" -DomainController $RoleDomainController -Name "LiveEduEmailHandler-BposScopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    <!-- end of create LiveEduBPOSServiceAccount-->

    <!-- Assign a scoped (to BPOS tenants) management role to the Live@EDU Opt In Handler Service Account. Do it here because this is the BPOS scoped tenant permissions -->
    <!-- they need and they need to use the "MSOnlinePartnerScope" scope created earlier. -->
    <OrgTaskInfo Id="_ba89fd3041d24fad98af731a20276048" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $EduLiveOptInHandlerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveOptInServiceAcct"};
          $PartnerDelegatedTenantManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType PartnerDelegatedTenantManagement | where { $_.IsRootRole };

          $EduLiveOptInBposScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveOptInServiceAcct-BposScopedRole"};
          if($EduLiveOptInBposScopedRole -eq $null)
          {
          $EduLiveOptInBposScopedRole = New-ManagementRole -Name "EduLiveOptInServiceAcct-BposScopedRole" -Parent $PartnerDelegatedTenantManagementRole -DomainController $RoleDomainController;
          }

          $scopedCmdlets = @{}
          $scopedCmdlets["Set-CurrentOrganization"] = ("Identity", "ErrorAction")
          $scopedCmdlets["Get-Organization"] = ("Identity", "ErrorAction")
          $scopedCmdlets["Get-User"] = ("Identity", "Filter", "ErrorAction")

          Get-ManagementRoleEntry -DomainController $RoleDomainController $EduLiveOptInBposScopedRole\* | where { $scopedCmdlets.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          foreach ($cmdlet in $scopedCmdlets.Keys)
          {
            $entry = Get-ManagementRoleEntry -DomainController $RoleDomainController $EduLiveOptInBposScopedRole\$cmdlet -ErrorAction:SilentlyContinue
            if ($entry -eq $null)
            {
              Get-ManagementRoleEntry ("{0}\{1}" -f $PartnerDelegatedTenantManagementRole.Identity,$cmdlet) -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $EduLiveOptInBposScopedRole.Identity -DomainController $RoleDomainController
            }

            Set-ManagementRoleEntry -DomainController $RoleDomainController $EduLiveOptInBposScopedRole\$cmdlet -Parameters $scopedCmdlets[$cmdlet]
          }

          $EduLiveOptInBposScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "EduLiveOptInServiceAcct-BposScopedRoleAssignment"};
          if($EduLiveOptInBposScopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User $EduLiveOptInHandlerUser.Identity -Role $EduLiveOptInBposScopedRole.Identity -CustomConfigWriteScope "MSOnlinePartnerScope" -DomainController $RoleDomainController -Name "EduLiveOptInServiceAcct-BposScopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- end of create LiveEduBPOSServiceAccount-->

    <!-- Create a partner role for TIP so TIP can run new-organization, get-organization, get-managementendpoint, and Get-MSOSyncData. The partner role is insufficient for this because it is scoped to OfferID -->
    <!-- Create new R4 role TIP-UnscopedRole that can be updated and assignment for TIPUser -->
    <!-- If the old role TIP-UnrestrictedCmdlets is deprecated (updated from R3 or early R4 keep it for coexistance) keep it, otherwise we do not need it-->
    <!-- Clean up auto_TIP* roles that were created during conversion and were not removed -->
    <OrgTaskInfo Id="_82ea3732dbcd4a1c964c32d457676b93" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $TIPUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "TIP-UnscopedRole"};
          if($TIPUnscopedRole -eq $null)
          {
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $TIPUnscopedRole = New-ManagementRole -Name "TIP-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }
          $newOrganizationEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController TIP-UnscopedRole\New-Organization;
          Get-ManagementRoleEntry -DomainController $RoleDomainController TIP-UnscopedRole\* | where {$_.Name -ine $newOrganizationEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-Organization") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $TIPUnscopedRole.Identity -DomainController $RoleDomainController;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-ManagementEndPoint") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $TIPUnscopedRole.Identity -DomainController $RoleDomainController;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-MSOSyncData") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $TIPUnscopedRole.Identity -DomainController $RoleDomainController;

          $TIPUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "TIP-UnscopedRoleAssignment"};
          if($TIPUnscopedRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User "TIPUser" -Role $TIPUnscopedRole.Identity -DomainController $RoleDomainController -Name "TIP-UnscopedRoleAssignment";
          }

          Get-ManagementRole -DomainController $RoleDomainController |
          where {$_.Name -ieq "TIP-UnrestrictedCmdlets" -and !$_.IsDeprecated} |
          foreach {
          Write-ExchangeSetupLog -Info ("Processing TIP unrestricted cmdlet " + $_.Identity)
          Get-ManagementRoleAssignment -Role $_.Identity -DomainController $RoleDomainController | Remove-ManagementRoleAssignment -DomainController $RoleDomainController -Confirm:$false;
          Remove-ManagementRole $_.Identity -DomainController $RoleDomainController -Confirm:$false;
          }

          Get-ManagementRole -DomainController $RoleDomainController |
          where {$_.Name -ilike "auto_TIP-UnrestrictedCmdlets*" -and !$_.IsDeprecated} |
          foreach {
          Write-ExchangeSetupLog -Info ("Processing auto TIP unrestricted cmdlet " + $_.Identity)
          Get-ManagementRoleAssignment -Role $_.Identity -DomainController $RoleDomainController | Remove-ManagementRoleAssignment -DomainController $RoleDomainController -Confirm:$false;
          Remove-ManagementRole $_.Identity -DomainController $RoleDomainController -Confirm:$false
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Set the CertificateSubject and enable RemotePowershell on the newly created Partner user for TIP -->
    <OrgTaskInfo Id="_949a9cfdf26f4dbc81d9854d76edfe9e" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "TIPUser" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterTIPPartnerCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the management role to the new partner user -->
    <OrgTaskInfo Id="_37be2aa0dc6243c18c8ea9dbe1a986c5" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $PartnerRole = Get-ManagementRole -RoleType "PartnerDelegatedTenantManagement" -DomainController $RoleDomainController | where {$_.IsRootRole};
          $TIPPartnerRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "TIPPartnerRoleAssignment"};
          if($TIPPartnerRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User $TIPPartnerUser.Identity -Role $PartnerRole -Name "TIPPartnerRoleAssignment" -CustomConfigWriteScope $TIPPartnerScope -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the partner user for TIP   -->
    <OrgTaskInfo Id="_D1D4BD93CC85479eAA0DA4EF409CA73D" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "TIPUser" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- create a partner user-->

    <!-- Create a MSOnline partner scope -->
    <OrgTaskInfo Id="_0ba4979d323a4d4ba0732829bc4cd846" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $MSOnlinePartnerScope = Get-ManagementScope -DomainController $RoleDomainController | where {$_.Name -ieq "MSOnlinePartnerScope" };
          if($MSOnlinePartnerScope -eq $null)
          {
            $MSOnlinePartnerScope =  New-ManagementScope -Name "MSOnlinePartnerScope" -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'MSOnline' -or ProgramId -eq 'msonlinemigration'" -DomainController $RoleDomainController;
          }
          else
          {
            Get-ManagementScope "MSOnlinePartnerScope" | Set-ManagementScope -PartnerDelegatedTenantRestrictionFilter "ProgramId -eq 'MSOnline' -or ProgramId -eq 'msonlinemigration'" -DomainController $RoleDomainController
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner user for MSOnline -->
    <OrgTaskInfo Id="_18d2dd043cba420188511500bcc3e61b" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $MSOnlinePartnerUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "MSOnlineUser"};
          $MSOnlineUPN = "MSOnlineUser@" + $RoleFullyQualifiedDomainName;
          if($MSOnlinePartnerUser -eq $null)
          {
          $MSOnlinePartnerUser = New-LinkedUser -Name "MSOnlineUser" -UserPrincipalName $MSOnlineUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create partner application object for reporting and link to BOXServiceAccount -->
    <OrgTaskInfo Id="_72D7F9DE8EC043F8A5FB937ED13B9EEB" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          #Create Partner Application object for Office365.
          $office365Portal = [Microsoft.Exchange.Data.Directory.SystemConfiguration.WellknownPartnerApplicationIdentifiers]::Office365Portal;
          $office365PortalName = "Office 365 Portal Online";
          $BOXServiceAccount = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "BOXServiceAccount"};
          $rpApp = Get-PartnerApplication $office365Portal -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
          if ($rpApp -eq $null)
          {
            $rpApp = New-PartnerApplication -Name $office365PortalName -ApplicationIdentifier $office365Portal -LinkedAccount $BOXServiceAccount -DomainController $RoleDomainController;
          }
          elseif ($rpApp.LinkedAccount.Name -ne "BOXServiceAccount")
          {
            Set-PartnerApplication -Identity $rpApp.Identity -LinkedAccount $BOXServiceAccount -DomainController $RoleDomainController;
          }          
        </Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner role for MSOnline so they can run get-managementendpoint and Get-MSOSyncData (officemain bug 178942). The partner role is insufficient for this because it is scoped to OfferID -->
    <!-- and in this case the tenant doesn't exist before hand to validate this -->
    <!-- Create new R4 role MSOnline-UnscopedRole that can be updated and assignment for MSOnlineUser -->
    <!-- If the old role MSOnline-NewOrgRole is deprecated (updated from R3 or early R4 keep it for coexistance) keep it, otherwise we do not need it -->
    <!-- Clean up auto_MSOnline* roles that were created during conversion and were not removed -->
    <OrgTaskInfo Id="_56768f0c341046d69023acc53e61c6d1" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $MSOnlineUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "MSOnline-UnscopedRole"};
          if($MSOnlineUnscopedRole -eq $null)
          {
            $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
            $MSOnlineUnscopedRole = New-ManagementRole -Name "MSOnline-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }
          $getManagementEndPointEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController MSOnline-UnscopedRole\Get-ManagementEndPoint;
          Get-ManagementRoleEntry -DomainController $RoleDomainController MSOnline-UnscopedRole\* | where {$_.Name -ine $getManagementEndPointEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-MSOSyncData") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $MSOnlineUnscopedRole.Identity -DomainController $RoleDomainController;
      
          $MSOnlineUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "MSOnline-UnscopedRoleAssignment"};
          if($MSOnlineUnscopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User "MSOnlineUser" -Role $MSOnlineUnscopedRole.Identity -DomainController $RoleDomainController -Name "MSOnline-UnscopedRoleAssignment";
          }

          Get-ManagementRole -DomainController $RoleDomainController |
            where {$_.Name -ieq "MSOnline-NewOrgRole" -and !$_.IsDeprecated} |
            foreach {
              Write-ExchangeSetupLog -Info ("Processing MSOnline cmdlet " + $_.Identity)
              Get-ManagementRoleAssignment -Role $_.Identity -DomainController $RoleDomainController | Remove-ManagementRoleAssignment -DomainController $RoleDomainController -Confirm:$false;
              Remove-ManagementRole $_.Identity -DomainController $RoleDomainController -Confirm:$false;
            }

          Get-ManagementRole -DomainController $RoleDomainController |
            where {$_.Name -ilike "auto_MSOnline-NewOrgRole*" -and !$_.IsDeprecated} |
            foreach {
              Write-ExchangeSetupLog -Info ("Processing auto MSOnline cmdlet " + $_.Identity)
              Get-ManagementRoleAssignment -Role $_.Identity -DomainController $RoleDomainController | Remove-ManagementRoleAssignment -DomainController $RoleDomainController -Confirm:$false; 
              Remove-ManagementRole $_.Identity -DomainController $RoleDomainController -Confirm:$false
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject and enable RemotePowershell on the newly created Partner user for MSOnline -->
    <OrgTaskInfo Id="_ee479b0a2ac74d26b7dbaab988d52c53" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "MSOnlineUser" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterMSOnlinePartnerCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Remove any previously existing management role on the MSOnline partner user (see officemain bug 178942) -->
    <OrgTaskInfo Id="_fa402090132f4dc0933b60041a51d472" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $MSOnlinePartnerRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "MSOnlinePartnerRoleAssignment"};
          if($MSOnlinePartnerRoleAssignment -ne $null)
          {
            $MSOnlinePartnerRoleAssignment | Remove-ManagementRoleAssignment -DomainController $RoleDomainController -Confirm:$false; 
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the partner user for MSOnline   -->
    <OrgTaskInfo Id="_9C875EF149504c5583E1AB6DDC0D2213" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "MSOnlineUser" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- create a partner user-->
    <!-- Create Rim Cert Management Account -->
    <OrgTaskInfo Id="_c1ba0f2a2aa541779f88c39e5f9a86dd" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $RimCertManagementAccount = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "RimCertManagementAccount"};
          if($RimCertManagementAccount -eq $null)
          {
            $RimCertManagementAccountUPN = "RimCertManagementAccount@" + $RoleFullyQualifiedDomainName;
            $RimCertManagementAccount = New-LinkedUser -Name "RimCertManagementAccount" -UserPrincipalName $RimCertManagementAccountUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Set the CertificateSubject and enable RemotePowershell on the newly created Rim Cert Management Account -->
    <OrgTaskInfo Id="_55a53ffc9fac48359c69348913ad7cf1" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "RimCertManagementAccount" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterRimCertManagementAccountCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the limited management role to the Rim Cert Management Account -->
    <OrgTaskInfo Id="_f5e727e6100241d082ceb920d2eb237e" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $RimCertManagementAccountPartnerScope = Get-ManagementScope -DomainController $RoleDomainController | where { $_.Name -ieq "RimCertManagementAccountPartnerScope" };
          if($RimCertManagementAccountPartnerScope -eq $null)
          {
            $RimCertManagementAccountPartnerScope = New-ManagementScope -Name "RimCertManagementAccountPartnerScope" -PartnerDelegatedTenantRestrictionFilter $RoleDatacenterRimTenantRestrictionFilter -DomainController $RoleDomainController;
          } 
          else 
          { 
            # In case $RoleDatacenterRimTenantName might be changing. Reset the filter.
            Set-ManagementScope "RimCertManagementAccountPartnerScope" -PartnerDelegatedTenantRestrictionFilter $RoleDatacenterRimTenantRestrictionFilter -DomainController $RoleDomainController;
            $RimCertManagementAccountPartnerScope = Get-ManagementScope -DomainController $RoleDomainController | where {$_.Name -ieq "RimCertManagementAccountPartnerScope" };
          }
            
          $mailRecipientsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType MailRecipients | where { $_.IsRootRole };
          $RimCertManagementAccountScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "RimCertManagementAccount-ScopedRole"};
          if($RimCertManagementAccountScopedRole -eq $null)
          {
            $RimCertManagementAccountScopedRole = New-ManagementRole -Name "RimCertManagementAccount-ScopedRole" -Parent $mailRecipientsRole -DomainController $RoleDomainController;
          }

          $getUserEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController RimCertManagementAccount-ScopedRole\Get-User;
          $setUserEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController RimCertManagementAccount-ScopedRole\Set-User;
          Get-ManagementRoleEntry -DomainController $RoleDomainController RimCertManagementAccount-ScopedRole\* | Where { ($_.Name -ine $getUserEntry.Name) -and ($_.Name -ine $setUserEntry.Name) } | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

          $RimCertManagementAccountScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "RimCertManagementAccount-ScopedRoleAssignment"};
          if($RimCertManagementAccountScopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User $RimCertManagementAccount.Identity -Role $RimCertManagementAccountScopedRole.Identity -CustomConfigWriteScope "RimCertManagementAccountPartnerScope" -DomainController $RoleDomainController -Name "RimCertManagementAccount-ScopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner role for RIM Service so they can run get-managementendpoint. -->
    <OrgTaskInfo Id="_080a925e563041568ae8d5a333ad8793" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $RimCertManagementAccountUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "RimCertManagementAccount-UnscopedRole"};
          if($RimCertManagementAccountUnscopedRole -eq $null)
          {
            $RimCertManagementAccountUnscopedRole = New-ManagementRole -Name "RimCertManagementAccount-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }

          $getManagementEndPointEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController RimCertManagementAccount-UnscopedRole\Get-ManagementEndpoint;
          Get-ManagementRoleEntry -DomainController $RoleDomainController RimCertManagementAccount-UnscopedRole\* | where {$_.Name -ine $getManagementEndPointEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
      
          $RimCertManagementAccountUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "RimCertManagementAccount-UnscopedRoleAssignment"};
          if($RimCertManagementAccountUnscopedRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User $RimCertManagementAccount.Identity -Role $RimCertManagementAccountUnscopedRole.Identity -DomainController $RoleDomainController -Name "RimCertManagementAccount-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>  

    <!-- Assign the Throttling Policy for the partner user RimCertManagementAccount -->
    <OrgTaskInfo Id="_81EB8204E613474B887386791DC44477" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "RimCertManagementAccount" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    <!-- end of create RimCertManagementAccount-->
    
    <!-- create a partner user-->

    <!-- Create MSO Sync Service Account -->
    <OrgTaskInfo Id="_8ac204ca125d4f16ab8c9c0828bc60e0" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $MSOSyncServiceAccount = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "MSOSyncServiceAccount"};
          if($MSOSyncServiceAccount -eq $null)
          {
          $MSOSyncServiceAccountUPN = "MSOSyncServiceAccount@" + $RoleFullyQualifiedDomainName;
          $MSOSyncServiceAccount = New-LinkedUser -Name "MSOSyncServiceAccount" -UserPrincipalName $MSOSyncServiceAccountUPN -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner role for MSO Sync Service so they can run new-organization, get-organization and get-managementendpoint. The partner role is insufficient for this because it is scoped to OfferID -->
    <OrgTaskInfo Id="_37c8c64de6bb470e91eff9e2da641988" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $MSOSyncServiceUnscopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "MSOSyncService-UnscopedRole"};
          if($MSOSyncServiceUnscopedRole -eq $null)
          {          
          $MSOSyncServiceUnscopedRole = New-ManagementRole -Name "MSOSyncService-UnscopedRole" -Parent $datacenterOperationsRole -DomainController $RoleDomainController;
          }
          $datacenterOperationsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType DataCenterOperations | where { $_.IsRootRole };
          $newOrganizationEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController MSOSyncService-UnscopedRole\New-Organization;
          Get-ManagementRoleEntry -DomainController $RoleDomainController MSOSyncService-UnscopedRole\* | where {$_.Name -ine $newOrganizationEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-Organization") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $MSOSyncServiceUnscopedRole.Identity -DomainController $RoleDomainController;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Get-ManagementEndPoint") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $MSOSyncServiceUnscopedRole.Identity -DomainController $RoleDomainController;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Enable-OrganizationCustomization") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $MSOSyncServiceUnscopedRole.Identity -DomainController $RoleDomainController;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Set-RecipientEnforcementProvisioningPolicy") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $MSOSyncServiceUnscopedRole.Identity -DomainController $RoleDomainController;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Import-RMSTrustedPublishingDomain") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $MSOSyncServiceUnscopedRole.Identity -DomainController $RoleDomainController;
          Get-ManagementRoleEntry ("{0}\{1}" -f $datacenterOperationsRole.Identity,"Set-OrganizationConfig") -DomainController $RoleDomainController | Add-ManagementRoleEntry -Role $MSOSyncServiceUnscopedRole.Identity -DomainController $RoleDomainController;

          $MSOSyncServiceUnscopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "MSOSyncService-UnscopedRoleAssignment"};
          if($MSOSyncServiceUnscopedRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User "MSOSyncServiceAccount" -Role $MSOSyncServiceUnscopedRole.Identity -DomainController $RoleDomainController -Name "MSOSyncService-UnscopedRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject and enable RemotePowershell on the newly created MSO Sync Service Account -->
    <OrgTaskInfo Id="_2d1c52ab9b7f4fd39cea1f2187876ddc" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-User "MSOSyncServiceAccount" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterMSOSyncServiceCertSubjects -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the management role to the MSO Sync Service Account -->
    <OrgTaskInfo Id="_16830ab8ad6d4ae5b550221898d78cb1" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $PartnerRole = Get-ManagementRole -RoleType "PartnerDelegatedTenantManagement" -DomainController $RoleDomainController | where {$_.IsRootRole};
          $MSOSyncServicePartnerRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "MSOSyncServicePartnerRoleAssignment"};
          if($MSOSyncServicePartnerRoleAssignment -eq $null)
          {
          New-ManagementRoleAssignment -User "MSOSyncServiceAccount" -Role $PartnerRole -Name "MSOSyncServicePartnerRoleAssignment" -CustomConfigWriteScope "MSOnlinePartnerScope" -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create the Placeholder Default Throttling Policy. -->
    <OrgTaskInfo Id="_e6fdb3176bb04b70802b853a632e215c" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning">
      <Install>
        <Global>
            if ($RoleIsDatacenterDedicated)
            {
                #
                #   NOTE: the DefaulThrottlingPolicy needs to be applied to all Dedicated customers.
                #
                
                $policy = Get-ThrottlingPolicy -DomainController $RoleDomainController | ? {$_.IsDefault };
                
                if (-not $policy)
                {
                    Write-ExchangeSetupLog -Info "Unable to find Default Throttling Policy.";
                }   
                else
                {                    
                    Write-ExchangeSetupLog -Info "Updating Default Throttling Policy.";
                        
                    Set-ThrottlingPolicy $policy `
                        -AnonymousMaxConcurrency 1 `
                        -AnonymousPercentTimeInAD 6 `
                        -AnonymousPercentTimeInCAS 30 `
                        -AnonymousPercentTimeInMailboxRPC 30 `
                        -EASMaxConcurrency 10 `
                        -EASPercentTimeInAD 20 `
                        -EASPercentTimeInCAS 45 `
                        -EASPercentTimeInMailboxRPC 20 `
                        -EASMaxDevices 30   `
                        -EASMaxDeviceDeletesPerMonth 60 `
                        -EWSMaxConcurrency 10 `
                        -EWSPercentTimeInAD 50 `
                        -EWSPercentTimeInCAS 90 `
                        -EWSPercentTimeInMailboxRPC 60 `
                        -EWSMaxSubscriptions 5000 `
                        -EWSFastSearchTimeoutInSeconds 60 `
                        -EWSFindCountLimit 1000 `
                        -IMAPMaxConcurrency 20 `
                        -IMAPPercentTimeInAD 20 `
                        -IMAPPercentTimeInCAS 80 `
                        -IMAPPercentTimeInMailboxRPC 60 `
                        -OutlookServiceMaxConcurrency 10 `
                        -OutlookServicePercentTimeInAD 50 `
                        -OutlookServicePercentTimeInCAS 90 `
                        -OutlookServicePercentTimeInMailboxRPC 60 `
                        -OutlookServiceMaxSubscriptions 5000 `
                        -OutlookServiceMaxSocketConnectionsPerDevice 4 `
                        -OutlookServiceMaxSocketConnectionsPerUser 12 `
                        -OutlookServiceFastSearchTimeoutInSeconds 60 `
                        -OutlookServiceFindCountLimit 1000 `
                        -OWAMaxConcurrency 5 `
                        -OWAPercentTimeInAD 30 `
                        -OWAPercentTimeInCAS 150 `
                        -OWAPercentTimeInMailboxRPC 150 `
                        -POPMaxConcurrency 20 `
                        -POPPercentTimeInAD 20 `
                        -POPPercentTimeInCAS 100 `
                        -POPPercentTimeInMailboxRPC 60 `
                        -PowerShellMaxConcurrency 18 `
                        -PowerShellMaxCmdlets 500 `
                        -PowerShellMaxCmdletsTimePeriod 10 `
                        -ExchangeMaxCmdlets 450 `
                        -PowerShellMaxCmdletQueueDepth 60 `
                        -RCAMaxConcurrency 20 `
                        -RCAPercentTimeInAD 5 `
                        -RCAPercentTimeInCAS 205 `
                        -RCAPercentTimeInMailboxRPC 200 `
                        -CPAMaxConcurrency 20 `
                        -CPAPercentTimeInCAS 205 `
                        -CPAPercentTimeInMailboxRPC 200 `
                        -CPUStartPercent 75 `
                        -PowerShellMaxDestructiveCmdlets $null `
                        -PowerShellMaxDestructiveCmdletsTimePeriod $null `
                        -PowerShellPercentTimeInCAS $null `
                        -DomainController $RoleDomainController
                }
            }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create the Placeholder Throttling Policy for the MSO Sync Service Account. -->
    <OrgTaskInfo Id="_60729f9d5d9a4b45a76f6f18d6901b95" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            $name = [Microsoft.Exchange.Data.Directory.SystemConfiguration.ThrottlingPolicy]::MSOSyncServiceThrottlingPolicyName;
            $policy = Get-ThrottlingPolicy -DomainController $RoleDomainController | ? {$_.Name -ieq $name}
            if($policy -eq $null)
            {
                $policy = New-ThrottlingPolicy -Name $name -DomainController $RoleDomainController
            }
            Set-ThrottlingPolicy $policy -IsServiceAccount -ExchangeMaxCmdlets 500 -PowerShellMaxBurst unlimited -PowerShellRechargeRate unlimited -PowerShellCutoff unlimited -PowerShellMaxOperations 800 -PowershellMaxCmdlets 600 -PowerShellMaxConcurrency 200 -PowerShellMaxCmdletQueueDepth unlimited -PowerShellMaxDestructiveCmdlets unlimited -PowerShellMaxDestructiveCmdletsTimePeriod unlimited -PowershellMaxRunspaces unlimited -PowershellMaxRunspacesTimePeriod unlimited -PswsMaxConcurrency 100 -PswsMaxRequest 100 -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Throttling Policy for the MSO Sync Service Account   -->
    <OrgTaskInfo Id="_31fdd7a7abca48c5a7307a312534c3ad" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Set-ThrottlingPolicyAssociation -Identity "MSOSyncServiceAccount" -ThrottlingPolicy "MSOSyncServiceThrottlingPolicy" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Add Add-SecondaryDomain cmdlet to unscoped role used by forward sync to enable scneario when tenant with more one accepted doamin is created - E14:289534 -->
    <OrgTaskInfo Id="_56768f0c341046d69023acc53e61c6d3" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "MSOSyncService-AddSecondaryDomainRoleAssignment"} | Remove-ManagementRoleAssignment -DomainController $RoleDomainController -Confirm:$false;
          Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "MSOSyncService-AddSecondaryDomainRole"} | Remove-ManagementRole -DomainController $RoleDomainController -Confirm:$false;
          
          $msoSyncServiceSecondaryDomainOperationsRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq "MSOSyncService-SecondaryDomainOperationsRole"};
          if ($msoSyncServiceSecondaryDomainOperationsRole -eq $null)
          {
            $remoteAndAcceptedDomainsRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType RemoteAndAcceptedDomains | where { $_.IsRootRole };
            $msoSyncServiceSecondaryDomainOperationsRole = New-ManagementRole -Name "MSOSyncService-SecondaryDomainOperationsRole" -Parent $remoteAndAcceptedDomainsRole -DomainController $RoleDomainController;
          }

          $addSecondaryDomainEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController MSOSyncService-SecondaryDomainOperationsRole\Add-SecondaryDomain;
          $getADServerSettingsEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController MSOSyncService-SecondaryDomainOperationsRole\Get-ADServerSettings;
          $setADServerSettingsEntry = Get-ManagementRoleEntry -DomainController $RoleDomainController MSOSyncService-SecondaryDomainOperationsRole\Set-ADServerSettings;
          Get-ManagementRoleEntry -DomainController $RoleDomainController MSOSyncService-SecondaryDomainOperationsRole\* | where {$_.Name -ine $addSecondaryDomainEntry.Name -and $_.Name -ine $getADServerSettingsEntry.Name -and $_.Name -ine $setADServerSettingsEntry.Name} | Remove-ManagementRoleEntry -DomainController $RoleDomainController -Confirm:$false;

          $msoSyncServiceSecondaryDomainOperationsRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq "MSOSyncService-SecondaryDomainOperationsRoleAssignment"};
          if ($msoSyncServiceSecondaryDomainOperationsRoleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -User "MSOSyncServiceAccount" -Role $msoSyncServiceSecondaryDomainOperationsRole.Identity -DomainController $RoleDomainController -Name "MSOSyncService-SecondaryDomainOperationsRoleAssignment";
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create the user for the R4 Bulk Provisioning Mailbox and R4+ Law Enforcement Mailbox -->
    <OrgTaskInfo Id="_f88b3c80970e46b1afc262cc001236d8" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Global>
          Install-UserAccount -Name "OrganizationalWorkflow{63d39db4-552c-4ba0-a18f-28d37e148a71}" -LastName "OrganizationalWorkflow 63d39db4-552c-4ba0-a18f-28d37e148a71";
        </Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create the migration Mailbox -->
    <OrgTaskInfo Id="_0f2cdc3c927f4752bebf7f1bd87657d4" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $mailboxId = [Microsoft.Exchange.Management.Migration.MigrationBatchIdParameter]::MigrationMailboxName;
          Install-UserAccount -Name $mailboxId -LastName $mailboxId;
        </Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Create a container for EHF EdgeSync cookies (CN=EHF Sync Cookies,CN=Tranport Settings,CN=<Org Name>... ) -->
    <OrgTaskInfo Id="_87646a71bee145f285a8967fae6d8afd" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          install-Container -Name:"Transport Settings","EHF Sync Cookies" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a container for Datacenter Mailflow partners (CN=Mailflow Partners,CN=Tranport Settings,CN=<First Org Name>... ) -->
    <OrgTaskInfo Id="_07685f3b13684192a03b3a1e1e91ded0" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          install-Container -Name:"Transport Settings","Mailflow Partners" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a container for Country Lists (CN=Country Lists,CN=RBAC,CN=<First Org Name>... ) -->
    <OrgTaskInfo Id="_f7685f3b13684192a03b3a1e1e910000" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          install-Container -Name:"RBAC","Country Lists" -DomainController $RoleDomainController
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a UMRestricted Country List -->
    <OrgTaskInfo Id="_a7685f3b13684192a03b3a1e1e910000" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $name = [Microsoft.Exchange.Data.Directory.SystemConfiguration.CountryList]::UMAllowedCountryListName;
          $CountryInfoList = [Microsoft.Exchange.Data.Directory.SystemConfiguration.CountryList]::UMAllowedCountryList;

          $list = Get-CountryList -DomainController $RoleDomainController | ?{$_.Name -ieq $name};
          if(!$list)
          {
              $list = New-CountryList -Name $name -DomainController $RoleDomainController;
          }

          Set-CountryList $list -Countries $CountryInfoList -DomainController $RoleDomainController;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <OrgTaskInfo Id="_a5755c93c4034310bbd3a6d4b67d1b29" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Write-ExchangeSetupLog -Info "Configuring UM global objects";

          $scriptPath = Join-Path $RoleBinPath "DatacenterUmGlobalConfiguration.ps1";
          Write-ExchangeSetupLog -Info "Script Path = '$scriptPath', ConfigId = '$RoleDatacenterUMGlobalCfgId', DomainController = '$RoleDomainController'";
          . $scriptPath;

          Configure-UMGlobalObjects -ConfigId $RoleDatacenterUMGlobalCfgId -DomainController $RoleDomainController;

          Write-ExchangeSetupLog -Info "Finished configuring UM global objects";
        </Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!--Create the NAT Servers USG if it does not exist-->
    <OrgTaskInfo Id="_145D0B88E49A42D58360AE49B19F8B68" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Service Engineering\Service Networking">
        <Install>
            <Global>
                . $RoleBinPath\CentralAdminSetup.ps1;
                CreateUSG -groupName "NAT Servers"
            </Global>
        </Install>
        <BuildToBuildUpgrade UseInstallTasks="true" />       
        <Uninstall/>
    </OrgTaskInfo>

    <!-- Create security groups-->
    <OrgTaskInfo Id="_62e50b78522545169f379cb7721b942e" Component="EXCHANGE14:\Current\Release\Shared\TwC\Performance">
      <Install>
        <Global>
          # Check to see if the group exists
          # Must perform detection for Local and Global/Universal Group separately and combine the results
          net localgroup "EDS Servers" /domain 2&gt;&amp;1 | Out-Null
          $LocalGroup = (get-variable LastExitCode).Value
          net group "EDS Servers" /domain 2&gt;&amp;1 | Out-Null
          $GlobalGroup = (get-variable LastExitCode).Value
          $GroupExists = !($LocalGroup -and $GlobalGroup)
 
          if (!$GroupExists)
          {
              Write-ExchangeSetupLog -Info "EDS group does not exist, creating group"
              net group "EDS Servers" /ADD /DOMAIN 2&gt;&amp;1 | Out-Null
          }          
 
          $exitCode = (get-variable LastExitCode).Value
          if ($exitCode)
          {
              Write-ExchangeSetupLog -Error "Unable to create EDS Servers security group"
          }
          else
          {
              Write-ExchangeSetupLog -Info "EDS Servers security group was created successfully"
          } 

          # Add all Exchange servers and domain controllers to the group with access to the DKM container.
          # They have EDS installed.

          $ds = new-object -type system.directoryservices.directorysearcher -argumentlist "(&amp;(objectClass=group)(cn=EDS Servers))"
          $searchResult = $ds.FindOne()
          if ($searchResult -eq $null)
          {
              Write-ExchangeSetupLog -Error "Cannot find the EDS Servers security group in AD."
          }
          $edsServers = $searchResult.GetDirectoryEntry()
          if ($edsServers -eq $null)
          {
              Write-ExchangeSetupLog -Error "The EDS Servers security group does not have a directory entry in AD."
          }

          # Make sure EDS Servers is a universal group.
          $universalSecurityGroup = 0x80000008
          $edsServers.InvokeSet("groupType", $universalSecurityGroup)
          $edsServers.CommitChanges()

          $ds = new-object -type system.directoryservices.directorysearcher -argumentlist "(&amp;(objectClass=group)(cn=Exchange Servers))"
          $searchResult = $ds.FindOne()
          if ($searchResult -eq $null)
          {
              Write-ExchangeSetupLog -Error "Cannot find the Exchange Servers security group in AD."
          }
          $exchangeServers = $searchResult.GetDirectoryEntry()
          if ($exchangeServers -eq $null)
          {
              Write-ExchangeSetupLog -Error "The Exchange Servers security group does not have a directory entry in AD."
          }
          $exchangeServersDN = $exchangeServers.DistinguishedName[0]
          if (-not $edsServers.Properties["member"].Contains($exchangeServersDN))
          {
              $edsServers.Properties["member"].Add($exchangeServersDN)
          }

          Write-ExchangeSetupLog -Info "The Exchange Servers group was added to the EDS Servers security group successfully."

          $ds = new-object -type system.directoryservices.directorysearcher -argumentlist "(&amp;(objectClass=group)(cn=Domain Controllers))"
          $searchResult = $ds.FindOne()
          if ($searchResult -eq $null)
          {
              Write-ExchangeSetupLog -Error "Cannot find the Domain Controllers security group in AD."
          }
          $domainControllers = $searchResult.GetDirectoryEntry()
          if ($domainControllers -eq $null)
          {
              Write-ExchangeSetupLog -Error "The Domain Controllers security group does not have a directory entry in AD."
          }
          $domainControllersDN = $domainControllers.DistinguishedName[0]
          if (-not $edsServers.Properties["member"].Contains($domainControllersDN))
          {
              $edsServers.Properties["member"].Add($domainControllersDN)
          }

          Write-ExchangeSetupLog -Info "The Domain Controllers group was added to the EDS Servers security group successfully."

          $ds = new-object -type system.directoryservices.directorysearcher -argumentlist "(&amp;(objectClass=group)(cn=Central Admin SQL Servers))"
          $searchResult = $ds.FindOne()
          if ($searchResult -ne $null)
          {              
              $centralAdminSQLServers = $searchResult.GetDirectoryEntry()
              if ($centralAdminSQLServers -eq $null)
              {
                 Write-ExchangeSetupLog -Error "The Central Admin SQL Servers security group does not have a directory entry in AD."
              }
              $centralAdminSQLServersDN = $centralAdminSQLServers.DistinguishedName[0]
              if (-not $edsServers.Properties["member"].Contains($centralAdminSQLServersDN))
              {
                 $edsServers.Properties["member"].Add($centralAdminSQLServersDN)
              }
              Write-ExchangeSetupLog -Info "The Central Admin SQL Servers group was added to the EDS Servers security group successfully."
          }
          
          $ds = new-object -type system.directoryservices.directorysearcher -argumentlist "(&amp;(objectClass=group)(cn=NAT Servers))"
          $searchResult = $ds.FindOne()
          if ($searchResult -ne $null)
          {              
              $natServers = $searchResult.GetDirectoryEntry()
              if ($natServers -eq $null)
              {
                 Write-ExchangeSetupLog -Error "The NAT Servers security group does not have a directory entry in AD."
              }
              $natServersDN = $natServers.DistinguishedName[0]
              if (-not $edsServers.Properties["member"].Contains($natServersDN))
              {
                 $edsServers.Properties["member"].Add($natServersDN)
              }
              Write-ExchangeSetupLog -Info "The NAT Servers security group was added to the EDS Servers security group successfully."
          }
           
          $edsServers.CommitChanges()

          Write-ExchangeSetupLog -Info "The EDS Servers group was committed successfully."
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create Ogrganizational Unit contianers in Dedicated capacity forests only -->
    <OrgTaskInfo Id="_159a09402a5342fdae3bc712b2510c3f" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Global>
          function Create-OUContainer ([System.DirectoryServices.DirectoryEntry] $Domain, [string] $ContainerPath)
          {
            $containerCreated = $false
            $parentContainer = $Domain
            foreach ($containerName in $ContainerPath.Split("/"))
            {
              $container = $parentContainer.Children | where { $_.Name -eq $containerName }
                if (-not $container)
                {
                  $container = $parentContainer.Children.Add("OU=$containerName", "organizationalUnit")
                  $container.CommitChanges()
                  $containerCreated = $true
                }
              $parentContainer = $container
            }

            if ($container.Guid -and $containerCreated)
            {
              Write-ExchangeSetupLog -Info "Organizational Unit '$ContainerPath' was created successfully."
            }
            elseif ($container.Guid -and -not $containerCreated)
            {
              Write-ExchangeSetupLog -Info "Organizational Unit '$ContainerPath' already exists in AD."
            }
            else
            {
              Write-ExchangeSetupLog -Error "Failed to create Organizational Unit '$ContainerPath'."
            }
          }

          if ($RoleIsDatacenterDedicated)
          {
            $domain = New-Object System.DirectoryServices.DirectoryEntry ("LDAP://$RoleDomainController")
            Create-OUContainer -Domain $domain -ContainerPath "ANSI-D/Exchange"            
            Create-OUContainer -Domain $domain -ContainerPath "Machines"
            Create-OUContainer -Domain $domain -ContainerPath "Accounts"
            Create-OUContainer -Domain $domain -ContainerPath "Groups"
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create Domain Local Security Groups in Dedicated capacity forests only -->
    <OrgTaskInfo Id="_5cb0b752b838497c9789bc2279d2d83f" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Global>
          function Create-SecurityGroup ([System.DirectoryServices.DirectoryEntry] $Domain, [string] $ContainerRDN, [string] $GroupName, [int] $Scope)
          {
            $ds = New-Object System.DirectoryServices.DirectorySearcher ($Domain, "(&amp;(sAMAccountName=$GroupName)(objectClass=group))")
            $searchResult = $ds.FindOne()
            if (-not $searchResult)
            {
              $container = New-Object System.DirectoryServices.DirectoryEntry ($Domain.Path + '/' + $ContainerRDN + ',' + $Domain.distinguishedName)
              $group = $container.Create("group", "CN=$GroupName")
              $null = $group.Properties["sAMAccountName"].Add($GroupName)
              $null = $group.Properties["groupType"].Add(0x80000000 -bor $Scope)
              $group.CommitChanges()
            }

            if ($group.Guid)
            {
              Write-ExchangeSetupLog -Info "Security Group '$GroupName' was created successfully."
            }
            elseif ($searchResult)
            {
              Write-ExchangeSetupLog -Info "Security Group '$GroupName' already exists in AD."
            }
            else
            {
              Write-ExchangeSetupLog -Error "Failed to create Security Group '$GroupName'."
            }
          }

          if ($RoleIsDatacenterDedicated)
          {
            $domain = New-Object System.DirectoryServices.DirectoryEntry ("LDAP://$RoleDomainController")
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "Exchange Server Admins" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "Exchange Event Log Readers" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "Exchange Perf Log Users" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "Exchange Perfmon Users" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-dsg-RMSLocalAdmin" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-dsg-RMSServiceAdministrators" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-dsg-RMSTemplateAdministrators" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-dsg-RMSAuditors" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-dsg-RMSSharePoint" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-gsg-RMSService" -Scope 2
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-dsg-RMSSQLRead" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-dsg-RMSSQLAdmins" -Scope 4
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "mgd-udg-RMSSuperUsers" -Scope 8
            Create-SecurityGroup -Domain $domain -ContainerRDN "OU=Groups" -GroupName "MGDL-EXO-DSG-LyncConfigNCPerms" -Scope 4
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Prepare for DKM (E14:167653) -->
    <OrgTaskInfo Id="_b9de1a4ae3b54190936d776fa8dc6016" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install>
        <Global>
          $dkmState = Test-DataCenterDKMAccess
          if ($dkmState.AclStateIsGood -eq $false)
          {
              Initialize-DkmDatacenter
          }
          else
          {
              Write-ExchangeSetupLog -Info "DKM ACL state is good. Skip Initialize-DkmDatacenter."
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Install schema changes to create containerized indexes on certain attributes to speed up Datacenter queries. For questions, contact xdcinfra -->
    <OrgTaskInfo Id="_4ff87dabe08f444e99b1f05424b78870" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Install-ExchangeSchema -LdapFileName ($roleInstallPath + "Setup\Data\DatacenterSchemaConfig.ldf");
        </Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create the Throttling Policy tenant hydration -->
    <OrgTaskInfo Id="_041f8ccf4f9341f185912772e7ab7000" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\AD Core\AD Driver" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
            $name = [Microsoft.Exchange.Data.Directory.SystemConfiguration.ThrottlingPolicy]::TenantHydrationThrottlingPolicyName;
            $policy = Get-ThrottlingPolicy -DomainController $RoleDomainController | ? {$_.Name -ieq $name}
            if($policy -eq $null)
            {
            $policy = New-ThrottlingPolicy -Name $name -DomainController $RoleDomainController
            }
            Set-ThrottlingPolicy $policy -ExchangeMaxCmdlets 3 -PowerShellMaxCmdletsTimePeriod 60 -PowerShellMaxCmdlets 4 -PowerShellMaxOperations 400 -PowerShellMaxConcurrency 3 -PowerShellMaxCmdletQueueDepth 200 -PowerShellMaxDestructiveCmdlets unlimited -PowerShellMaxDestructiveCmdletsTimePeriod unlimited -PowerShellMaxRunspaces unlimited -PowerShellMaxRunspacesTimePeriod unlimited
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set Auth config -->
    <OrgTaskInfo Id="_ecb56381b43c4fcd8659ffe9150a84f6" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="false">
      <Install>
        <Global>
          if ($RoleDatacenterWindowsLiveIdInstance -ine 'Gallatin')
          {
            $thumbprint = $RoleDatacenterSHA1Thumbprint
            $authConfig = Get-AuthConfig;
            if ([string]::IsNullOrEmpty($authConfig.CurrentCertificateThumbprint) -or ($RoleIsDatacenterDedicated -and ($authConfig.CurrentCertificateThumbprint -ine $thumbprint)))
            {
              Set-AuthConfig -CertificateThumbprint $thumbprint -DomainController $RoleDomainController -Force;
            }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

      <!-- OAuth Datacenter objects -->
    <OrgTaskInfo Id="_1d2d7e7358fc4f30bf78f4f6a074472f" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          #Reuse the FederationTrust certificate.  In Datacenter deployments always accept the passed in certificate.
          if ($RoleDatacenterWindowsLiveIdInstance -ine 'Gallatin')
          { 
              $allAS = Get-AuthServer -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
              #Create STS in Datacenter
              $stsAS = $allAS | Where { $_.AuthMetadataUrl -ieq $RoleDatacenterMicrosoftStsAuthMetadataUrl };
              if ($stsAS -eq $null)
              {
                New-AuthServer -Name MicrosoftSts -AuthMetadataUrl $RoleDatacenterMicrosoftStsAuthMetadataUrl -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
              }
                        
              #Create evoSTS in Datacenter
              if (![string]::IsNullOrEmpty($RoleDatacenterMicrosoftEvoStsAuthMetadataUrl)) 
              {
                $evoStsAS = $allAS | Where { $_.AuthMetadataUrl -ieq $RoleDatacenterMicrosoftEvoStsAuthMetadataUrl };
                  if ($evoStsAS -eq $null)
                  {
                  New-AuthServer -Name EvoSts -Type AzureAD -AuthMetadataUrl $RoleDatacenterMicrosoftEvoStsAuthMetadataUrl -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
                  Set-AuthServer EvoSts -IsDefaultAuthorizationEndpoint $true -ErrorAction SilentlyContinue;
                  }
              }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>    

      <!-- OAuth Datacenter PA objects -->
      <OrgTaskInfo Id="_1a0e9410d1044508981100a3a4eefa26" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
          <Install>
             <Global>
               function ConfigureApplication ([string] $appId, [string] $appName, [string[]] $roles, [string] $authMetadataUrl, [string[]] $actAsPerms, [string[]] $appOnlyPerms)
               {
               $partnerApp = Get-PartnerApplication $appId -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
               if ($partnerApp -eq $null)
               {
               if ([string]::IsNullOrEmpty($authMetadataUrl))
               {
               $partnerApp = New-PartnerApplication -Name $appName -ApplicationIdentifier $appId -AcceptSecurityIdentifierInformation $true -DomainController $RoleDomainController;
               }
               else
               {
               $partnerApp = New-PartnerApplication -Name $appName -AuthMetadataUrl $authMetadataUrl -AcceptSecurityIdentifierInformation $true -DomainController $RoleDomainController -TrustAnySSLCertificate;
               }
               }

               if($actAsPerms.count -gt 0)
               {
               Set-PartnerApplication -Identity $partnerApp.Identity -ActAsPermissions $actAsPerms;
               }

               if($appOnlyPerms.count -gt 0)
               {
               Set-PartnerApplication -Identity $partnerApp.Identity -AppOnlyPermissions $appOnlyPerms;
               }

               if ($partnerApp.LinkedAccount -eq $null)
               {
               $appAccountSuffix = "-ApplicationAccount";
               $appAccountName = $partnerApp.Name + $appAccountSuffix;
               $appAccount = Get-LinkedUser -Identity $appAccountName -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
               if ($appAccount -eq $null)
               {
               $appAccountUpn = $appAccountName.Replace(" ", "_") + "@" + $RoleFullyQualifiedDomainName;
               $appAccount = New-LinkedUser -Name $appAccountName -UserPrincipalName $appAccountUpn -DomainController $RoleDomainController;
               }

               Set-PartnerApplication -Identity $partnerApp.Identity -LinkedAccount $appAccount.Identity -DomainController $RoleDomainController;
               }
               else
               {
               $appAccount = Get-LinkedUser $partnerApp.LinkedAccount.DistinguishedName -DomainController $RoleDomainController;
               }

               foreach ($roleName in $roles)
               {
               $roleIdentity = Get-ManagementRole $roleName -DomainController $RoleDomainController;
               $roleAssignment = Get-ManagementRoleAssignment -Role $roleIdentity.Identity -RoleAssignee $appAccount.Identity -DomainController $RoleDomainController;
               if ($roleAssignment -eq $null)
               {
               New-ManagementRoleAssignment -Role $roleName -User $appAccount.Identity -DomainController $RoleDomainController;
               }
               }
               }

               $appList = [Microsoft.Exchange.Data.Directory.SystemConfiguration.ExchangePartnerApplication]::Office365CrossServiceFirstPartyAppList;
               foreach($app in $appList) { ConfigureApplication $app.AppId $app.AppName $app.Roles }
             </Global>
          <Tenant />
        </Install>
        <BuildToBuildUpgrade UseInstallTasks="true" />
        <Uninstall />
      </OrgTaskInfo>
    
    <!-- Assign a scoped management role to the Exchange Online Protection Service Account in EXO so EOP can send unified policy notification to EXO -->
    <OrgTaskInfo Id="_677f565336864d8fb7dc119e35775016" Component="OFFICEMAIN:\IP\Transport and Data Loss Prevention\Policy and DLP\Platform\Unified Policy" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          # Only assign a scoped management role to Exchange Online Protection Service Account in EXO.
          if ($RoleDatacenterFfoEnvironment -ne "True")
          {
            $EOPServiceAccountScopedRoleName = "EOPServiceAccount-ScopedRole";
            $EOPServiceAccountScopedRoleAssignmentName = "EOPServiceAccount-ScopedRoleAssignment";

            $partnerDelegatedTenantManagementRole = Get-ManagementRole -DomainController $RoleDomainController -RoleType PartnerDelegatedTenantManagement | where { $_.IsRootRole };
            $EOPServiceAccountScopedRole = Get-ManagementRole -DomainController $RoleDomainController | where {$_.Name -ieq $EOPServiceAccountScopedRoleName};

            if($EOPServiceAccountScopedRole -eq $null)
            {
              Write-ExchangeSetupLog -Info "'$EOPServiceAccountScopedRoleName' doesn't exists, a new one will be created."
              $EOPServiceAccountScopedRole = New-ManagementRole -Name $EOPServiceAccountScopedRoleName -Parent $partnerDelegatedTenantManagementRole -DomainController $RoleDomainController;
            }

            $appId = [Microsoft.Exchange.Data.Directory.SystemConfiguration.WellknownPartnerApplicationIdentifiers]::ExchangeOnlineProtection;
            $partnerApp = Get-PartnerApplication $appId -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
            $EOPServiceAccountScopedRoleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $EOPServiceAccountScopedRoleAssignmentName};
            if($EOPServiceAccountScopedRoleAssignment -eq $null)
            {
              Write-ExchangeSetupLog -Info "'$EOPServiceAccountScopedRoleAssignmentName' doesn't exists, a new one will be created."
              New-ManagementRoleAssignment -User $partnerApp.LinkedAccount -Role $EOPServiceAccountScopedRole.Identity -CustomConfigWriteScope "FfoPartnerScope" -DomainController $RoleDomainController -Name $EOPServiceAccountScopedRoleAssignmentName;
            }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <OrgTaskInfo Id="_f02c7567fa0c40ceb16a34581dda070d" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterWindowsLiveIdInstance -ine 'Gallatin')
          {
              # Create Facebook STS server
              $sts = [Microsoft.Exchange.Data.Directory.SystemConfiguration.WellknownAuthServerIssuerNames]::Facebook
              $existingSTS = Get-AuthServer $sts -ErrorAction SilentlyContinue -DomainController $RoleDomainController
              if ($existingSTS -ne $null)
              {
                # Facebook STS already exists.
                Write-ExchangeSetupLog -Info "Facebook STS already exists.  AppId: '$($existingSTS.ApplicationIdentifier)'  TokenIssuingEndpoint: '$($existingSTS.TokenIssuingEndpoint)'  AuthorizationEndpoint: '$($existingSTS.AuthorizationEndpoint)'"
              }
              else
              {
                if (-not $RoleDatacenterPeopleConnectFacebookAppSecret)
                {
                  # Secret has not been initialized to $RoleDatacenterPeopleConnectFacebookAppSecret.  Read from Registry.
                  Write-ExchangeSetupLog -Info "Retrieving Facebook app secret from Registry"
                  $RoleDatacenterPeopleConnectFacebookAppSecret = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\ExchangeLabs).PeopleConnectFacebookAppSecret
                }

                # Dump app configuration variables to the log to help troubleshooting.
                Write-ExchangeSetupLog -Info "Facebook app id: $($RoleDatacenterPeopleConnectFacebookAppId)"
                Write-ExchangeSetupLog -Info "Facebook app secret is blank? $([string]::IsNullOrEmpty($RoleDatacenterPeopleConnectFacebookAppSecret)).  Hash: $(([string]$RoleDatacenterPeopleConnectFacebookAppSecret).GetHashCode().ToString("X8"))"
                Write-ExchangeSetupLog -Info "Facebook Graph token issuing endpoint: $($RoleDatacenterPeopleConnectFacebookGraphTokenIssuingEndpoint)"
                Write-ExchangeSetupLog -Info "Facebook authorization endpoint: $($RoleDatacenterPeopleConnectFacebookAuthorizationEndpoint)"

                # Ensure parameters have been populated.
                if ((-not $RoleDatacenterPeopleConnectFacebookAppId) -or
                    (-not $RoleDatacenterPeopleConnectFacebookAppSecret) -or
                    ($RoleDatacenterPeopleConnectFacebookAppSecret -ieq "%Prod_PeopleConnectFacebookAppSecret%") -or
                    (-not $RoleDatacenterPeopleConnectFacebookGraphTokenIssuingEndpoint) -or
                    (-not $RoleDatacenterPeopleConnectFacebookAuthorizationEndpoint))

                {
                  Write-ExchangeSetupLog -Warning "Cannot create Facebook STS server because one or more required parameters are empty or null."
                }
                else
                {
                  # Create STS.
                  New-AuthServer -Name Facebook `
                  -IssuerIdentifier $sts `
                  -ApplicationIdentifier $RoleDatacenterPeopleConnectFacebookAppId `
                  -AppSecret $RoleDatacenterPeopleConnectFacebookAppSecret `
                  -TokenIssuingEndpoint $RoleDatacenterPeopleConnectFacebookGraphTokenIssuingEndpoint `
                  -AuthorizationEndpoint $RoleDatacenterPeopleConnectFacebookAuthorizationEndpoint `
                  -Type Facebook `
                  -DomainController $RoleDomainController
                }
              }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    <OrgTaskInfo Id="_363ddb9396ca44cd926f5852bf6903f8" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
              # Create LinkedIn STS server
              $sts = [Microsoft.Exchange.Data.Directory.SystemConfiguration.WellknownAuthServerIssuerNames]::LinkedIn
              $existingSTS = Get-AuthServer $sts -ErrorAction SilentlyContinue -DomainController $RoleDomainController
              if ($existingSTS -ne $null)
              {
                # LinkedIn STS already exists.
                Write-ExchangeSetupLog -Info "LinkedIn STS already exists.  AppId: '$($existingSTS.ApplicationIdentifier)'  TokenIssuingEndpoint: '$($existingSTS.TokenIssuingEndpoint)'  AuthorizationEndpoint: '$($existingSTS.AuthorizationEndpoint)'"
              }
              else
              {
                if (-not $RoleDatacenterPeopleConnectLinkedInAppSecret)
                {
                  # Secret has not been initialized to $RoleDatacenterPeopleConnectLinkedInAppSecret.  Read from Registry.
                  Write-ExchangeSetupLog -Info "Retrieving LinkedIn app secret from Registry"
                  $RoleDatacenterPeopleConnectLinkedInAppSecret = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\ExchangeLabs).PeopleConnectLinkedInAppSecret
                }
                
                # Dump app configuration variables to the log to help troubleshooting.
                Write-ExchangeSetupLog -Info "LinkedIn app id: $($RoleDatacenterPeopleConnectLinkedInAppId)"
                Write-ExchangeSetupLog -Info "LinkedIn app secret is blank? $([string]::IsNullOrEmpty($RoleDatacenterPeopleConnectLinkedInAppSecret)).  Hash: $(([string]$RoleDatacenterPeopleConnectLinkedInAppSecret).GetHashCode().ToString("X8"))"
                Write-ExchangeSetupLog -Info "LinkedIn request token endpoint: $($RoleDatacenterPeopleConnectLinkedInRequestTokenEndpoint)"
                Write-ExchangeSetupLog -Info "LinkedIn access token issuing endpoint: $($RoleDatacenterPeopleConnectLinkedInAccessTokenIssuingEndpoint)"
            
                # Ensure parameters have been populated.
                if ((-not $RoleDatacenterPeopleConnectLinkedInAppId) -or
                    (-not $RoleDatacenterPeopleConnectLinkedInAppSecret) -or
                    ($RoleDatacenterPeopleConnectLinkedInAppSecret -ieq "%Prod_PeopleConnectLinkedInAppSecret%") -or
                    ($RoleDatacenterPeopleConnectLinkedInAppSecret -ieq "%Gallatin_PeopleConnectLinkedInAppSecret%") -or
                    (-not $RoleDatacenterPeopleConnectLinkedInRequestTokenEndpoint) -or
                    (-not $RoleDatacenterPeopleConnectLinkedInAccessTokenIssuingEndpoint))
                {
                  Write-ExchangeSetupLog -Warning "Cannot create LinkedIn STS server because one or more required parameters are empty or null."
                }
                else
                {
                  # Create STS.
                  New-AuthServer -Name LinkedIn `
                  -IssuerIdentifier $sts `
                  -ApplicationIdentifier $RoleDatacenterPeopleConnectLinkedInAppId `
                  -AppSecret $RoleDatacenterPeopleConnectLinkedInAppSecret `
                  -TokenIssuingEndpoint $RoleDatacenterPeopleConnectLinkedInAccessTokenIssuingEndpoint `
                  -AuthorizationEndpoint $RoleDatacenterPeopleConnectLinkedInRequestTokenEndpoint `
                  -Type LinkedIn `
                  -DomainController $RoleDomainController
                }
              }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    <OrgTaskInfo Id="_d68a1a1d52514607a05f98333b5843c4" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          # Create/Update Endpoints for Places
          if (-not $RoleDatacenterLocationServicesKey)
          {
            # LocationServicesKey not initialized. Try reading from the registry.
            Write-ExchangeSetupLog -Info "Retrieving LocationServicesKey from Registry"
            $RoleDatacenterLocationServicesKey = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\ExchangeLabs).LocationServicesKey
          }

          if (-not $RoleDatacenterPhonebookServicesKey)
          {
            # PhonebookServicesKey not initialized. Try reading from the registry.
            Write-ExchangeSetupLog -Info "Retrieving PhonebookServicesKey from Registry"
            $RoleDatacenterPhonebookServicesKey = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\ExchangeLabs).PhonebookServicesKey
          }

          if (-not $RoleDatacenterMapControlKey)
          {
            # MapControlKey not initialized. Try reading from the registry.
            Write-ExchangeSetupLog -Info "Retrieving MapControlKey from Registry"
            $RoleDatacenterMapControlKey = (Get-ItemProperty HKLM:\SOFTWARE\Microsoft\ExchangeLabs).MapControlKey
          }

          # Ensure parameters have been populated.
          if ((-not $RoleDatacenterLocationServicesUrl) -or
            (-not $RoleDatacenterLocationServicesKey) -or
            (-not $RoleDatacenterPhonebookServicesUrl) -or
            (-not $RoleDatacenterPhonebookServicesKey) -or
            (-not $RoleDatacenterMapControlUrl) -or
            (-not $RoleDatacenterMapControlKey) -or
            (-not $RoleDatacenterDirectionsPageUrl))
          {
            Write-ExchangeSetupLog -Warning "Cannot create/update Places service end points because one or more required parameters are empty or null. Removing any existing end points."

            # Remove existing service endpoints
            Write-ExchangeSetupLog -Info "Removing existing Places service endpoints (if any)."
            ('LocationServices', 'PhonebookServices', 'MapControl', 'DirectionsPage', 'StaticMap') |
            foreach {
              $epName = $_ + 'Url'
              Write-ExchangeSetupLog -Info ("Removing endpoint " + $epName);
              Remove-ServiceEndpoint $epName -ErrorAction SilentlyContinue
            }
          }
          else
          {
            # Create service endpoints
            ('LocationServices', 'PhonebookServices', 'MapControl', 'DirectionsPage') |
            foreach {
              $urlName = 'RoleDatacenter' + $_ + 'Url'
              $url = Get-Variable -Name $urlName -ValueOnly
              $tokenName = 'RoleDatacenter' + $_ + 'Key'
              $token = Get-Variable -Name $tokenName -ValueOnly -ErrorAction SilentlyContinue
              $epName = $_ + 'Url'             
              Write-ExchangeSetupLog -Info ("Creating/Updating endpoint " + $epName);
              New-ServiceEndpoint -Name $epName -Url $url -Token $token
            }

            $epStaticMap = "StaticMapUrl"
            Write-ExchangeSetupLog -Info ("Creating/Updating endpoint for " + $epStaticMap);
            New-ServiceEndpoint -Name $epStaticMap -Url "https://dev.virtualearth.net/REST/v1/Imagery/Map/Road"
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    <OrgTaskInfo Id="_9683df4f70aa4ed8afe0414709b46499" Component="EXCHANGE14:\Current\Release\Client Access\Web Services" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          # Create/Update Endpoints for Weather
          if (-not $RoleDatacenterWeatherServicesUrl)
          {
            Write-ExchangeSetupLog -Warning "Cannot create/update weather service end points because one or more required parameters are empty or null. Removing any existing end points."

            # Remove existing service endpoints
            Write-ExchangeSetupLog -Info "Removing existing weather service endpoints (if any)."
            $epName = 'WeatherServicesUrl'
            Write-ExchangeSetupLog -Info ("Removing endpoint " + $epName);
            Remove-ServiceEndpoint $epName -ErrorAction SilentlyContinue
          }
          else
          {
            # Create service endpoints
            $urlName = 'RoleDatacenterWeatherServicesUrl'
            $url = Get-Variable -Name $urlName -ValueOnly
            $epName = 'WeatherServicesUrl'
            Write-ExchangeSetupLog -Info ("Creating/Updating endpoint " + $epName);
            New-ServiceEndpoint -Name $epName -Url $url
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    <OrgTaskInfo Id="_71ccd012a9584784b3f2d8ef9a6b13d3" Component="EXCHANGE14:\Current\Release\Shared\TwC\Performance">
      <Install>
        <Global>
          if(!(Get-ServiceEndpoint EdsSqlEndpoints -ErrorAction SilentlyContinue))
          {
            Write-ExchangeSetupLog -Info "Creating a new service endpoint for EDS"
            New-ServiceEndpoint EdsSqlEndpoints
          } 
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <OrgTaskInfo Id="_a1ccd012a9584784b3f2d8ef9a6b13da" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\AD Core" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if($RoleDatacenterSupportRelocation -eq $true)
          {
            Write-ExchangeSetupLog -Info "Enabling tenant relocation for current forest"
            Set-OrganizationConfig -TenantRelocationsAllowed:$true -DomainController $RoleDomainController
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <OrgTaskInfo Id="_BD68A9D864744DF0B1B9D871FB854A66" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\AD Core" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          Write-ExchangeSetupLog -Info "Creating Exchange Domain Local Groups"
          Initialize-ExchangeLocalGroups -Verbose
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
  
    <!-- Create the PushNotification service throttling policy -->
    <OrgTaskInfo Id="_b2b105a0a7834617a490d0283dc29a63" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" >
      <Install>
        <Global>
          $policyName = [Microsoft.Exchange.Data.Directory.SystemConfiguration.ThrottlingPolicy]::PushNotificationServiceThrottlingPolicy;
          $policy = Get-ThrottlingPolicy -DomainController $RoleDomainController | ? {$_.Name -ieq $policyName}
          if($policy -eq $null)
          {
            $policy = New-ThrottlingPolicy -Name $policyName -IsServiceAccount -DomainController $RoleDomainController;
          }
          
          Set-ThrottlingPolicy -Identity $policyName -DomainController $RoleDomainController `
            -PushNotificationMaxConcurrency:20 `
            -PushNotificationMaxBurst:unlimited `
            -PushNotificationRechargeRate:unlimited `
            -PushNotificationCutoffBalance:unlimited;
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!--Creates the Pre-Canned PushNotificationApps for Datacenter -->
    <!--TODO(jdferre): make the path a parameter too, so we don't have to duplicate it here-->
    <OrgTaskInfo Id="_20caf9dce73a401ab7c05054a7887180" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" >
      <Install>
        <Global>
          if (![string]::IsNullOrEmpty($RoleDatacenterPushNotificationEnvironment))
          {
            $pushNotificationAuthKeysPath = 'HKLM:\SOFTWARE\Microsoft\ExchangeLabs\PushNotificationAuthKeys';
            $authKeys = @{};
            $pushNotificationAuthKeysItem = Get-Item $pushNotificationAuthKeysPath -ErrorAction:SilentlyContinue;

            if ($pushNotificationAuthKeysItem -ne $null)
            {
              $pushNotificationAuthKeysItem | Select-Object -ExpandProperty property | ForEach-Object `
              {
                $keyValue = (Get-ItemProperty -Path $pushNotificationAuthKeysPath -Name $_).$_;
                if (![string]::IsNullOrEmpty($keyValue))
                {
                    $authKeys[$_] = ConvertTo-SecureString $keyValue -AsPlainText -Force;
                }
              }
            }

            Install-CannedPushNotificationApp `
                -AuthenticationKeys $authKeys `
                -Environment:$RoleDatacenterPushNotificationEnvironment `
                -IsDedicated:$RoleIsDatacenterDedicated `
                -AcsUser:$RoleDatacenterPushNotificationAcsUser;
          }
        </Global>
        <Tenant/>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create a partner scope for Exchange servers to call -->
    <OrgTaskInfo Id="_25C4440E89424832A557ED05CA273592" Component="EXCHANGE14:\Current\Release\Client Access\OWA\Contacts" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $ExchangeCrossServiceIntegrationScope = Get-ManagementScope -DomainController $RoleDomainController | where {$_.Name -ieq "ExchangeCrossServiceIntegrationScope" };
          if($ExchangeCrossServiceIntegrationScope -eq $null)
          {
            New-ManagementScope -Name "ExchangeCrossServiceIntegrationScope" -PartnerDelegatedTenantRestrictionFilter {ProgramId -ne $null} -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Grant access so that Exchange servers can manage group mailboxes. -->
    <OrgTaskInfo Id="_40DEBC3D57A84DD6BF7CBB0AF40071C7" Component="EXCHANGE14:\Current\Release\Client Access\OWA\Contacts" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $appId = [Microsoft.Exchange.Data.Directory.SystemConfiguration.WellknownPartnerApplicationIdentifiers]::Exchange;
          $partnerApp = Get-PartnerApplication $appId -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
          $roleAssignmentName = "ExchangeCrossServiceIntegration-Exchange Online"
          $roleAssignment = Get-ManagementRoleAssignment -DomainController $RoleDomainController | where {$_.Name -ieq $roleAssignmentName };
          if($roleAssignment -eq $null)
          {
            New-ManagementRoleAssignment -Role "ExchangeCrossServiceIntegration" -User $partnerApp.LinkedAccount -Name $roleAssignmentName -CustomConfigWriteScope "ExchangeCrossServiceIntegrationScope" -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Grant access so that SharePoint servers can manage group mailboxes. -->
    <OrgTaskInfo Id="_12EA771B2544469AB76E846B2C541826" Component="EXCHANGE14:\Current\Release\Client Access\OWA\Contacts" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          $appId = [Microsoft.Exchange.Data.Directory.SystemConfiguration.WellknownPartnerApplicationIdentifiers]::SharePoint;
          $partnerApp = Get-PartnerApplication $appId -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
          if ($partnerApp -ne $null)
          {
            $roleAssignments = Get-ManagementRoleAssignment -DomainController $RoleDomainController;
            $roleAssignmentName = "ExchangeCrossServiceIntegration-SharePoint Online-Scoped";
            $roleAssignment = $roleAssignments | where {$_.Name -ieq $roleAssignmentName };
            if($roleAssignment -eq $null)
            {
              New-ManagementRoleAssignment -Role "ExchangeCrossServiceIntegration" -User $partnerApp.LinkedAccount -Name $roleAssignmentName -CustomConfigWriteScope "ExchangeCrossServiceIntegrationScope" -DomainController $RoleDomainController;
            }
          }
          else
          {
            Write-ExchangeSetupLog -Info ("'ExchangeCrossServiceIntegration-SharePoint Online' not created because PartnerApplication for SharePoint was not found");
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create LockMod service account -->
    <OrgTaskInfo Id="_F8B901936E2B46C3A8266CD6EC2EE54A" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
            $userName = "LockModServiceAccount";
            $user = Get-LinkedUser $userName -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
            if ($user -eq $null)
            {
              # Create new linked user.
              $upn = $userName + '@' + $RoleFullyQualifiedDomainName;
              New-LinkedUser -Name $userName -UserPrincipalName $upn -DomainController $RoleDomainController;
            }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject on the LockMod service account, and enable remote Powershell -->
    <OrgTaskInfo Id="_C6D1035D485B4F6098DD16A70F9E552D" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
            Set-User -Identity "LockModServiceAccount" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterLockModCertSubjects -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create the LockMod role -->
    <OrgTaskInfo Id="_D926EE2AFB72485B9DE5FE3FE9D72A72" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
          # Cleanup old LockMod role and role assignments
          $lockModRoleName = "LockMod";
          Get-ManagementRoleAssignment -Role $lockModRoleName -RoleAssignee "LockModServiceAccount" -ErrorAction SilentlyContinue -DomainController $RoleDomainController | Remove-ManagementRoleAssignment -Confirm:$false -DomainController $RoleDomainController;
          Get-ManagementRole $lockModRoleName -ErrorAction SilentlyContinue -DomainController $RoleDomainController | Remove-ManagementRole -Confirm:$false -DomainController $RoleDomainController;

          # Create the new role
          $lockModScriptsRoleName = "LockModScripts";
          if (-not (Get-ManagementRole $lockModScriptsRoleName -ErrorAction SilentlyContinue -DomainController $RoleDomainController))
          {
          # Create a new script role
          Write-ExchangeSetupLog -Info "Creating a new script role '$lockModScriptsRoleName'."
          New-ManagementRole -Name $lockModScriptsRoleName -UnScopedTopLevel -DomainController $RoleDomainController;
          }

          # Set the role entries
          $scripts = @{};
          $scripts["LockMod-CreateRequest.ps1"] = ('ActionParameters', 'ApprovalPolicy', 'Duration', 'RbacApprovalRoles', 'Reason', 'Requestor', 'Role', 'ScriptPath', 'Target', 'Team', 'WorkflowName', 'PartitionId', 'WorkloadContext', 'NewCmdletParameters', 'SetCmdletParameters');
          $scripts["LockMod-GetRequest.ps1"] = ('Filter', 'RequestIds', 'ResultSize');
          $scripts["LockMod-SetRequest.ps1"] = ('ActionStatus', 'Approver', 'Comment', 'Decision', 'RequestId');

          # Remove the role entries that is not needed any more
          Get-ManagementRoleEntry $lockModScriptsRoleName\* -ErrorAction SilentlyContinue -DomainController $RoleDomainController | where { $scripts.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry  -Confirm:$false -DomainController $RoleDomainController;

          # Add or update the role entries
          foreach ($scriptName in $scripts.Keys)
          {
          # When the role entry already exists, we need to do Set-ManagementRoleEntry as the parameters may have been modified.
          # Otherwise, we create the entry.
          if (-not (Get-ManagementRoleEntry $lockModScriptsRoleName\$scriptName -ErrorAction SilentlyContinue -DomainController $RoleDomainController))
          {
          Write-ExchangeSetupLog -Info "Adding a new Management Role Entry '$scriptName' to Script Role '$lockModScriptsRoleName'."
          Add-ManagementRoleEntry $lockModScriptsRoleName\$scriptName -UnScopedTopLevel -Parameters $scripts[$scriptName] -Type Script -SkipScriptExistenceCheck -DomainController $RoleDomainController;
          }
          else
          {
          Write-ExchangeSetupLog -Info  "Management Role Entry '$lockModScriptsRoleName\$scriptName' already exists. Updating the entry."
          Set-ManagementRoleEntry $lockModScriptsRoleName\$scriptName -UnScopedTopLevel -Parameters $scripts[$scriptName] -SkipScriptExistenceCheck -DomainController $RoleDomainController;
          }
          }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
      
    <!-- Assign the LockMod role to LockMod service account user -->
    <OrgTaskInfo Id="_1B01A2FE1FB14C79B380B16F95A0812D" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
            $userName = "LockModServiceAccount";
            $lockModScriptsRoleName = "LockModScripts";
            $roleAssignment = Get-ManagementRoleAssignment -Role $lockModScriptsRoleName -RoleAssignee $userName -DomainController $RoleDomainController;
            if ($roleAssignment -eq $null)
            {
              Write-ExchangeSetupLog -Info "Creating a new role assignment for role '$lockModScriptsRoleName' and user '$userName'."
              New-ManagementRoleAssignment -Role $lockModScriptsRoleName -User $userName -DomainController $RoleDomainController;
            }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Partner Throttling Policy for the LockMod service account user -->
    <OrgTaskInfo Id="_83C6EA8AEED04C9BAD74D7A211898DC2" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
            $policyName = [Microsoft.Exchange.Data.Directory.SystemConfiguration.ThrottlingPolicy]::PartnerThrottlingPolicyName;
            Set-ThrottlingPolicyAssociation -Identity "LockModServiceAccount" -ThrottlingPolicy $policyName -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Create OnCallAccountManagement service account (ExSecSvc) if it does not exist -->
    <OrgTaskInfo Id="_FAB62D33536B404A8A09F4F58B2F82E2" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
            $userName = "ExSecSvc";
            $user = Get-LinkedUser $userName -ErrorAction SilentlyContinue -DomainController $RoleDomainController;
            if ($user -eq $null)
            {
              # Create new linked user.
              $upn = $userName + '@' + $RoleFullyQualifiedDomainName;
              New-LinkedUser -Name $userName -UserPrincipalName $upn -DomainController $RoleDomainController;
            }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Set the CertificateSubject on the ExSecSvc service account, and enable remote Powershell -->
    <OrgTaskInfo Id="_0B3BAAF25D5F4295ADE1528CCDC7078D" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
            Set-User -Identity "ExSecSvc" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterOCAMCertSubjects -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

    <!-- Create the OnCallAccountManagement role -->
    <OrgTaskInfo Id="_7F10D9E1289A4C0DAAFB5E478CCB06E0" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {            
            # Create the new role
            $ocamRoleName = "OnCallAccountManagement";
            if (-not (Get-ManagementRole $ocamRoleName -ErrorAction SilentlyContinue -DomainController $RoleDomainController))
            {
              # Create a new script role
              Write-ExchangeSetupLog -Info "Creating a new script role '$ocamRoleName'."
              New-ManagementRole -Name $ocamRoleName -UnScopedTopLevel -DomainController $RoleDomainController;
            }
       
            # Set the role entries
            $scripts = @{};
            $scripts["resetPassword.ps1"] = ('accountName', 'newPassword');
            $scripts["GetAccountsForUser.ps1"] = ('userAlias');
                                
            # If role entries have changed, ensure only current role entries exist
            Get-ManagementRoleEntry $ocamRoleName\* -ErrorAction SilentlyContinue -DomainController $RoleDomainController | where { $scripts.Keys -notcontains $_.Name } | Remove-ManagementRoleEntry -Confirm:$false -DomainController $RoleDomainController
            
            # Add or update the role entries
            foreach ($scriptName in $scripts.Keys)
            {
              # When the role entry already exists, we need to do Set-ManagementRoleEntry as the parameters may have been modified.
              # Otherwise, we create the entry.
              if (-not (Get-ManagementRoleEntry $ocamRoleName\$scriptName -ErrorAction SilentlyContinue -DomainController $RoleDomainController))
              {
                Write-ExchangeSetupLog -Info "Adding a new Management Role Entry '$scriptName' to Script Role '$ocamRoleName'."
                Add-ManagementRoleEntry $ocamRoleName\$scriptName -UnScopedTopLevel -Parameters $scripts[$scriptName] -Type Script -SkipScriptExistenceCheck -DomainController $RoleDomainController;
              }
              else
              {
                Write-ExchangeSetupLog -Info  "Management Role Entry '$ocamRoleName\$scriptName' already exists. Updating the entry."
                Set-ManagementRoleEntry $ocamRoleName\$scriptName -UnScopedTopLevel -Parameters $scripts[$scriptName] -SkipScriptExistenceCheck -DomainController $RoleDomainController;
              }
            }
            
            $oldRbacRoles = @('resetpwd', 'ManagementScripts');
            
            # Remove script mappings from old RBAC roles
            foreach ($roleName in $oldRbacRoles)
            {
                Get-ManagementRoleEntry $roleName\GetAccountsForUser.ps1 -ErrorAction SilentlyContinue -DomainController $RoleDomainController | Remove-ManagementRoleEntry -Confirm:$false -DomainController $RoleDomainController;
                Get-ManagementRoleEntry $roleName\resetPassword.ps1 -ErrorAction SilentlyContinue -DomainController $RoleDomainController | Remove-ManagementRoleEntry -Confirm:$false -DomainController $RoleDomainController;
            }
          }      
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
      
    <!-- Assign the OnCallAccountManagement role to service account user ExSecSvc -->
    <OrgTaskInfo Id="_DB88B1A8765F44BFAF37195E92B7C9A4" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
            $serviceAccount = "ExSecSvc";
            $ocamRoleName = "OnCallAccountManagement";
            $roleAssignment = Get-ManagementRoleAssignment -Role $ocamRoleName -RoleAssignee $serviceAccount -DomainController $RoleDomainController;
            if ($roleAssignment -eq $null)
            {
              Write-ExchangeSetupLog -Info "Creating a new role assignment for role '$ocamRoleName' and user '$serviceAccount'."
              New-ManagementRoleAssignment -Role $ocamRoleName -User $serviceAccount -DomainController $RoleDomainController;
            }
            
            # Remove any extra assignments
            Get-ManagementRoleAssignment -RoleAssignee $serviceAccount -AssignmentMethod Direct -DomainController $RoleDomainController | Where {$_.Role -ne $ocamRoleName} | Remove-ManagementRoleAssignment -Confirm:$false -DomainController $RoleDomainController
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>

    <!-- Assign the Partner Throttling Policy for the ExSecSvc service account user -->
    <OrgTaskInfo Id="_ADCDCCDD9DA14C12B8BE88E07AD19FA0" Component="EXCHANGE14:\Current\Release\Shared\DIY\Recipients&amp;Provisioning" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
            $policyName = [Microsoft.Exchange.Data.Directory.SystemConfiguration.ThrottlingPolicy]::PartnerThrottlingPolicyName;
            Set-ThrottlingPolicyAssociation -Identity "ExSecSvc" -ThrottlingPolicy $policyName -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true"/>
      <Uninstall />
    </OrgTaskInfo>
    
    <!--Create the JitUsers USG if it does not exist-->
    <OrgTaskInfo Id="_C654326616574E7CB1C35D333E5392A1" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
        <Install>
            <Global>
              if ($RoleDatacenterIsManagementForest -eq "True")
              {
                . $RoleBinPath\CentralAdminSetup.ps1;
                CreateUSG -groupName "JitUsers"
              }
            </Global>
        </Install>
        <BuildToBuildUpgrade UseInstallTasks="true" />       
        <Uninstall/>
    </OrgTaskInfo>
    
    <!-- Add the JitUsers USG to the right set of Security Groups -->
    <OrgTaskInfo Id="_4364744511FD458996F3751957F72AF2" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
        <Install>
            <Global>
              if ($RoleDatacenterIsManagementForest -eq "True")
              {
                function AddJitUsersToGroup([string] $TargetGroup, [string] $JitUsersGroupDN)
                {
                    $ds = new-object -type system.directoryservices.directorysearcher -argumentlist "(&amp;(objectClass=group)(cn=$TargetGroup))"
                    $searchResult = $ds.FindOne()
                    if ($searchResult -eq $null)
                    {
                        Write-ExchangeSetupLog -Warning "Cannot find the $TargetGroup security group in AD."
                    }
                    else
                    {
                        $targetGroupEntry = $searchResult.GetDirectoryEntry()
                        if ($targetGroupEntry -eq $null)
                        {
                            Write-ExchangeSetupLog -Warning "The $TargetGroup security group does not have a directory entry in AD."
                        }
                        else
                        {
                            if (-not $targetGroupEntry.Properties["member"].Contains($JitUsersGroupDN))
                            {
                                $targetGroupEntry.Properties["member"].Add($JitUsersGroupDN)
                                             
                                $targetGroupEntry.CommitChanges()
                                Write-ExchangeSetupLog -Info "The JitUsers group was added to the $TargetGroup security group successfully."
                            }
                        }
                    }
                }
              
                $ds = new-object -type system.directoryservices.directorysearcher -argumentlist "(&amp;(objectClass=group)(cn=JitUsers))"
                $searchResult = $ds.FindOne()
                if ($searchResult -eq $null)
                {
                    Write-ExchangeSetupLog -Error "Cannot find the JitUsers security group in AD."
                }
                
                $jitUsersGroup = $searchResult.GetDirectoryEntry()
                if ($jitUsersGroup -eq $null)
                {
                    Write-ExchangeSetupLog -Error "The JitUsers security group does not have a directory entry in AD."
                }

                $jitUsersGroupDN = $jitUsersGroup.DistinguishedName[0]
              
                AddJitUsersToGroup -TargetGroup 'Debug Server Users' -JitUsersGroupDN $jitUsersGroupDN
                AddJitUsersToGroup -TargetGroup 'Event Log Readers' -JitUsersGroupDN $jitUsersGroupDN
                AddJitUsersToGroup -TargetGroup 'Performance Monitor Users' -JitUsersGroupDN $jitUsersGroupDN
                AddJitUsersToGroup -TargetGroup 'View-Only Organization Management' -JitUsersGroupDN $jitUsersGroupDN
              }
            </Global>
        </Install>
        <BuildToBuildUpgrade UseInstallTasks="true" />       
        <Uninstall/>
    </OrgTaskInfo>

    <!-- Create the Flight Overrides container under "Global Settings" (CN=Flight Overrides,CN=Global Settings,...) -->
    <OrgTaskInfo Id="FlightOverrides" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup">
      <Install DescriptionId="SetupProgressCreateConfigurationSettingsContainer">
        <Global>install-Container -Name:"Global Settings","Flight Overrides" -DomainController $RoleDomainController</Global>
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Create a service account for OSP.Azure to use Mafe -->
    <OrgTaskInfo Id="_4619868d4b5c4a67b2d4bbbb9397fc3d" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
              $OspAzureUser = Get-LinkedUser -DomainController $RoleDomainController | where {$_.Name -ieq "OspAzureUser"};
              if($OspAzureUser -eq $null)
              {
                  $OspAzureUserUPN = "OspAzureUser@" + $RoleFullyQualifiedDomainName;
                  $OspAzureUser = New-LinkedUser -Name "OspAzureUser" -UserPrincipalName $OspAzureUserUPN -DomainController $RoleDomainController;
              }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Assign RBAC roles to service account OspAzureUser for Mafe -->
    <!-- Required cmdlets: Get-CentralAdminForest, Get-CentralAdminMachine, Get-CentralAdminDagLocationInfo, Get-AzureInstance, 
                           Get-CentralAdminLoadBalancer, Get-CentralAdminRouter, Get-CentralAdminDropBoxMachineEntry             -->
    <OrgTaskInfo Id="_de70263b2ffc4b39cde7f5891483836a" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
              $roleGroupName = "View-Only Mgmt Forest Operator"
              $roleGroup = Get-RoleGroup $roleGroupName
              $roleMembers = Get-RoleGroupMember -Identity $roleGroup.Identity | Where { $_.Name -ieq "OspAzureUser" }
              if ($roleMembers -eq $null)
              {
                  Add-RoleGroupMember -Identity $roleGroup.Identity -Member "OspAzureUser" -BypassSecurityGroupManagerCheck
              }
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Set the CertificateSubject, and enable RemotePowershell on the newly created OspAzureUser for Mafe -->
    <OrgTaskInfo Id="_d2bb6c4c686dd52d78c1ecbbfc8c5ce3" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
              Set-User "OspAzureUser" -RemotePowerShellEnabled $true -CertificateSubject $RoleDatacenterOspAzureUserCertSubjects -DomainController $RoleDomainController;
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>
    
    <!-- Assign the Throttling Policy for OspAzureUser for Mafe   -->
    <OrgTaskInfo Id="_23bb7c4c686dd52d78c1ecbbfc8c576d" Component="EXCHANGE14:\Current\Release\Shared\Datacenter\Setup" ExcludeInDatacenterDedicated="true">
      <Install>
        <Global>
          if ($RoleDatacenterIsManagementForest -eq "True")
          {
              Set-ThrottlingPolicyAssociation -Identity "OspAzureUser" -ThrottlingPolicy "PartnerThrottlingPolicy" -DomainController $RoleDomainController
          }
        </Global>
        <Tenant />
      </Install>
      <BuildToBuildUpgrade UseInstallTasks="true" />
      <Uninstall />
    </OrgTaskInfo>

  </OrgTasks>
</SetupComponentInfo>
