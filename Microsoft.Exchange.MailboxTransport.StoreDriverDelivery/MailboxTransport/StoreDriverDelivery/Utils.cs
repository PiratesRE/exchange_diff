using System;
using Microsoft.Exchange.Configuration.Tasks;
using Microsoft.Exchange.Data;
using Microsoft.Exchange.Data.Transport;
using Microsoft.Exchange.Diagnostics;
using Microsoft.Exchange.MailboxTransport.Shared.Smtp;
using Microsoft.Exchange.MailboxTransport.StoreDriver;
using Microsoft.Exchange.MailboxTransport.StoreDriverCommon;
using Microsoft.Exchange.Transport;

namespace Microsoft.Exchange.MailboxTransport.StoreDriverDelivery
{
	internal static class Utils
	{
		public static void SubmitMailItem(TransportMailItem mailItem, bool suppressDSNs)
		{
			try
			{
				TraceHelper.StoreDriverDeliveryTracer.TracePass(TraceHelper.MessageProbeActivityId, 0L, "Delivery: Start sending email generated by delivery agent.");
				if (suppressDSNs)
				{
					foreach (MailRecipient mailRecipient in mailItem.Recipients)
					{
						mailRecipient.DsnRequested = DsnRequestedFlags.Never;
					}
				}
				SmtpMailItemResult smtpMailItemResult = SmtpMailItemSender.Instance.Send(new MbxTransportMailItem(mailItem));
				if (smtpMailItemResult.ConnectionResponse.AckStatus != AckStatus.Success || smtpMailItemResult.MessageResponse.AckStatus != AckStatus.Success)
				{
					TraceHelper.StoreDriverDeliveryTracer.TraceFail<AckStatus, AckStatus>(TraceHelper.MessageProbeActivityId, 0L, "Delivery: Failure sending email generated by delivery agent. ConnectionResponse {0} MessageResponse {1}", smtpMailItemResult.ConnectionResponse.AckStatus, smtpMailItemResult.MessageResponse.AckStatus);
					throw new StoreDriverAgentTransientException(Strings.StoreDriverAgentTransientExceptionEmail);
				}
				SubmitHelper.AgentMessageCounter.AddValue(1L);
			}
			catch (Exception ex)
			{
				TraceHelper.StoreDriverDeliveryTracer.TraceFail<string>(TraceHelper.MessageProbeActivityId, 0L, "Delivery: Failure sending email generated by delivery agent. Error {0}", ex.ToString());
				throw new StoreDriverAgentTransientException(Strings.StoreDriverAgentTransientExceptionEmail, ex);
			}
			TraceHelper.StoreDriverDeliveryTracer.TracePass(TraceHelper.MessageProbeActivityId, 0L, "Delivery: Completed sending email generated by delivery agent.");
		}

		public static string RedactRoutingAddressIfNecessary(RoutingAddress address, bool isNecessary)
		{
			ArgumentValidator.ThrowIfNullOrEmpty("address.ToString()", address.ToString());
			if (isNecessary)
			{
				return SuppressingPiiData.Redact(address).ToString();
			}
			return address.ToString();
		}

		public static bool IsRedactionNecessary()
		{
			return MultiTenantTransport.MultiTenancyEnabled;
		}
	}
}
