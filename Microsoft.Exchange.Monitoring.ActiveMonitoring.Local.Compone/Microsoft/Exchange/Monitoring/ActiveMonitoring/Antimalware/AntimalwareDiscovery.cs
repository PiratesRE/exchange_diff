using System;
using System.Collections.Generic;
using System.Threading;
using Microsoft.Exchange.Diagnostics.Components.ActiveMonitoring;
using Microsoft.Exchange.Monitoring.ActiveMonitoring.Common;
using Microsoft.Exchange.Monitoring.ActiveMonitoring.Local;
using Microsoft.Office.Datacenter.ActiveMonitoring;
using Microsoft.Office.Datacenter.WorkerTaskFramework;

namespace Microsoft.Exchange.Monitoring.ActiveMonitoring.Antimalware
{
	public sealed class AntimalwareDiscovery : MaintenanceWorkItem
	{
		protected override void DoWork(CancellationToken cancellationToken)
		{
			try
			{
				LocalEndpointManager instance = LocalEndpointManager.Instance;
				if ((instance.ExchangeServerRoleEndpoint != null || !FfoLocalEndpointManager.IsHubTransportRoleInstalled) && (instance.ExchangeServerRoleEndpoint == null || !instance.ExchangeServerRoleEndpoint.IsBridgeheadRoleInstalled))
				{
					WTFDiagnostics.TraceInformation(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "[AntimalwareDiscovery.DoWork]: No Hub Transport or Bridgehead role is installed on this server.", null, "DoWork", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\AntimalwareDiscovery.cs", 52);
					base.Result.StateAttribute1 = "AntimalwareDiscovery: No Hub Transport or Bridgehead role is installed on this server.";
					return;
				}
			}
			catch (EndpointManagerEndpointUninitializedException)
			{
				WTFDiagnostics.TraceDebug(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "[FFO AntimalwareDiscovery.DoWork]: Exception occurred due to EndpointManagerEndpointUninitializedException, ignoring exception and treating as transient.", null, "DoWork", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\AntimalwareDiscovery.cs", 64);
				return;
			}
			try
			{
				WTFDiagnostics.TraceInformation(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "[FFO AntimalwareDiscovery.DoWork]: Discovery Started.", null, "DoWork", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\AntimalwareDiscovery.cs", 73);
				GenericWorkItemHelper.CreateAllDefinitions(new List<string>
				{
					"Antimalware.xml"
				}, base.Broker, base.TraceContext, base.Result);
				this.CreateCleanupFolderResponder();
			}
			catch (EndpointManagerEndpointUninitializedException)
			{
				WTFDiagnostics.TraceDebug(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "[FFO AntimalwareDiscovery.DoWork]: Exception occurred due to EndpointManagerEndpointUninitializedException, ignoring exception and treating as transient.", null, "DoWork", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\AntimalwareDiscovery.cs", 94);
			}
			catch (Exception ex)
			{
				WTFDiagnostics.TraceError<string>(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "[FFO AntimalwareDiscovery.DoWork]: Exception occurred during discovery. {0}", ex.ToString(), null, "DoWork", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\AntimalwareDiscovery.cs", 101);
				throw;
			}
		}

		private void CreateCleanupFolderResponder()
		{
			WTFDiagnostics.TraceDebug(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "Creating CreateCleanupFolderResponder.", null, "CreateCleanupFolderResponder", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\AntimalwareDiscovery.cs", 115);
			string folderPath = base.Definition.Attributes.ContainsKey("CleanupFolderResponderFolderPath") ? base.Definition.Attributes["CleanupFolderResponderFolderPath"] : CleanupFolderResponder.DefaultValues.FolderPath;
			string fileRetentionPeriod = base.Definition.Attributes.ContainsKey("CleanupFolderResponderFileRetentionPeriod") ? base.Definition.Attributes["CleanupFolderResponderFileRetentionPeriod"] : CleanupFolderResponder.DefaultValues.FileRetentionPeriod.ToString();
			TimeSpan recurrenceInterval = base.Definition.Attributes.ContainsKey("CleanupFolderResponderRecurrenceIntervalSeconds") ? TimeSpan.Parse(base.Definition.Attributes["CleanupFolderResponderRecurrenceIntervalSeconds"]) : CleanupFolderResponder.DefaultValues.RecurrenceInterval;
			ResponderDefinition definition = CleanupFolderResponder.CreateDefinition("CleanupFolderResponder", "Antimalware", "Antimalware", folderPath, fileRetentionPeriod, recurrenceInterval, 600, 3, true);
			base.Broker.AddWorkDefinition<ResponderDefinition>(definition, base.TraceContext).Wait();
			WTFDiagnostics.TraceDebug(ExTraceGlobals.AntimalwareTracer, base.TraceContext, "CreateCleanupFolderResponder Created!", null, "CreateCleanupFolderResponder", "f:\\15.00.1497\\sources\\dev\\monitoring\\src\\ActiveMonitoring\\Components\\Antimalware\\AntimalwareDiscovery.cs", 146);
		}

		private const string ServiceName = "Antimalware";

		private static class Constants
		{
			public const string CleanupFolderResponderFolderPathKey = "CleanupFolderResponderFolderPath";

			public const string CleanupFolderResponderFileRetentionPeriodKey = "CleanupFolderResponderFileRetentionPeriod";

			public const string CleanupFolderResponderRecurrenceIntervalSecondsKey = "CleanupFolderResponderRecurrenceIntervalSeconds";
		}
	}
}
