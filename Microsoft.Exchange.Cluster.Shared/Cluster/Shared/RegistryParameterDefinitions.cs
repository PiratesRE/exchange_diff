using System;
using Microsoft.Exchange.Cluster.Common.ConfigurableParameters;
using Microsoft.Exchange.Cluster.Common.Extensions;

namespace Microsoft.Exchange.Cluster.Shared
{
	internal class RegistryParameterDefinitions : ConfigurableParameterDefinitionsBase
	{
		private RegistryParameterDefinitions() : base(200, Assert.Instance)
		{
		}

		protected override void DefineParameters()
		{
			this.DefineGeneratedParameters();
			base.DefineParameter(new Int32ConfigurableParameter("BcsCheckToDisable", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("ListMdbStatusRpcTimeoutInSec", 30, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MdbStatusFetcherServerUpTimeoutInSec", 35, 0, 1, null, null));
			base.DefineParameter(new DateTimeConfigurableParameter("StoreKillBugcheckDisabledTime", DateTime.MinValue, 1, 1));
		}

		protected void DefineGeneratedParameters()
		{
			base.DefineParameter(new Int32ConfigurableParameter("AcllDismountOrKillTimeoutInSec2", 75, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("AcllLockAutoReleaseAfterDurationMs", 20000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AcllSuspendLockTimeoutInSec", 30, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("ADConfigRefreshDefaultTimeoutInSec", 30, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("AdObjectCacheHitTtlInSec", 315, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AdObjectCacheMissTtlInSec", 120, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("ADReplicationSleepInSec", 5, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("AmConfigObjectDisposeDelayInSec", 3600, 0, 1, new int?(15), null));
			base.DefineParameter(new Int32ConfigurableParameter("AmDeferredDatabaseStateRestorerIntervalInMSec", 30000, 0, 1, new int?(5000), null));
			base.DefineParameter(new BooleanConfigurableParameter("AmDisableBatchOperations", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AmDismountOrKillTimeoutInSec", 60, 0, 1, new int?(1), null));
			base.DefineParameter(new BooleanConfigurableParameter("AmEnableCrimsonLoggingPeriodicEventProcessing", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AmPerfCounterUpdateIntervalInSec", 60, 0, 1, new int?(5), null));
			base.DefineParameter(new BooleanConfigurableParameter("AmPeriodicDatabaseAnalyzerEnabled", true, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AmPeriodicDatabaseAnalyzerIntervalInMSec", 120000, 0, 1, new int?(10000), null));
			base.DefineParameter(new Int32ConfigurableParameter("AmPeriodicRoleReportingIntervalInSec", 10800, 0, 1, new int?(30), null));
			base.DefineParameter(new Int32ConfigurableParameter("AmRemoteSiteCheckAlertTimeoutInSec", 900, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("AmServerNameCacheTTLInSec", 900, 0, 1, new int?(15), null));
			base.DefineParameter(new Int32ConfigurableParameter("AmSystemEventAssertOnHangTimeoutInMSec", 900000, 0, 1, new int?(15000), null));
			base.DefineParameter(new Int32ConfigurableParameter("AmSystemManagerEventWaitTimeoutInMSec", 10000, 0, 1, new int?(5000), null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoDagUseServerConfiguredProperty", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiBehindBacklog", 43200, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedCiBehindDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiBehindRetryCount", 500000, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedCiFailedSuspendedDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiMaxConcurrentSeeds", 10, 1, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiPeriodicIntervalInSecs", 900, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedCiRebuildFailedSuspendedDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiRebuildFailedSuspendedPeriodicIntervalInSecs", 900, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiCatalogOnUpgradeIntervalInSecs", 3600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiRebuildFailedSuspendedSuppressionInSecs", 900, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiRebuildFailedSuspendedThrottlingIntervalInSecs", 7200, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiSuppressionInSecs", 900, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedCiThrottlingIntervalInSecs", 3600, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedCiUpgradeDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedAssignSpareRetryCountMax", 5, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedInPlaceReseedDelayInSecs", 172800, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedPeriodicIntervalInSecs", 14400, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedReseedRetryCountMax", 5, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedResumeRetryCountMax", 3, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedDbFailedSuspendedDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedSuspendedPeriodicIntervalInSecs", 900, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedSuspendedSuppressionInSecs", 900, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedSuspendedThrottlingIntervalInSecs_Reseed", 3600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedSuspendedThrottlingIntervalInSecs_Resume", 300, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedDbFailedSuspendedUseNeighborsForDbGroups", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbFailedSuspendedWorkflowResetIntervalInSecs", 86400, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedDbFailedWorkflowDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbHealthySuppressionInSecs", 300, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbMaxConcurrentSeeds", 10, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedDbNeverMountedDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedDbNeverMountedThrottlingIntervalInSecs", 3600, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("AutoReseedManagerDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedManagerPollerIntervalInSecs", 300, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoReseedVolumeAssignmentCacheTTLInSecs", 3600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("BCSGetCopyStatusRPCTimeoutInMSec", 5000, 0, 1, new int?(3000), null));
			base.DefineParameter(new Int32ConfigurableParameter("BcsTotalQueueMaxThreshold", 400, 0, 1, new int?(10), null));
			base.DefineParameter(new Int32ConfigurableParameter("CheckCatalogReadyIntervalInSec", 10, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("CICurrentnessThresholdInSeconds", 120, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("CISuspendResumeTimeoutInSec", 5, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("ClusApiHangActionLatencyAllowedInSec", 180, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("ClusApiHangReportLongLatencyDurationInSec", 900, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("ClusApiLatencyAllowedInSec", 120, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("ClusdbHungNodesConfirmDurationInMSec", 240000, 0, 1, new int?(5000), null));
			base.DefineParameter(new Int32ConfigurableParameter("ClusterBatchWriterIntervalInMsec", 30000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("ConfigInitializedCheckTimeoutInSec", 15, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("ConfigUpdaterTimerIntervalSlow", 120000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("CopyStatusPollerIntervalInMsec", 30000, 0, 1, new int?(1000), null));
			base.DefineParameter(new Int32ConfigurableParameter("CopyQueueAlertThreshold", 100, 0, 1, new int?(1), null));
			base.DefineParameter(new BooleanConfigurableParameter("CopyStatusClientCachingDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("CorruptLogRequiredRange", 150, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("CrimsonPeriodicLoggingIntervalInSec", 900, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseCheckInspectorQueueLengthFailedThreshold", 1000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseCheckInspectorQueueLengthWarningThreshold", 100, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckAtLeastNCopies", 2, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckGreenPeriodicIntervalInSec", 3600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckGreenTransitionSuppressionInSec", 600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckRedPeriodicIntervalInSec", 900, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckRedTransitionSuppressionInSec", 1800, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckOneCopyGreenTransitionSuppressionInSec", 0, 0, 1, null, null));
			base.DefineParameter(new StringConfigurableParameter("DatabaseHealthCheckSkipDatabasesRegex", string.Empty, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckStaleStatusGreenPeriodicIntervalInSec", 43200, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckStaleStatusGreenTransitionSuppressionInSec", 600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckStaleStatusRedPeriodicIntervalInSec", 82800, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckStaleStatusRedTransitionSuppressionInSec", 82800, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckStaleStatusServerLevelMinStaleCopies", 12, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckStaleStatusServerLevelRedTransitionSuppressionInSec", 3600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckTwoCopyGreenPeriodicIntervalInSec", 3600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckTwoCopyGreenTransitionSuppressionInSec", 300, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckTwoCopyRedPeriodicIntervalInSec", 3600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckTwoCopyRedTransitionSuppressionInSec", 300, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckDelayInRaisingDatabasePotentialRedundancyAlertDueToServiceStartInSec", 120, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckCopyConnectedErrorThresholdInSec", 70, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckPotentialOneCopyTotalPassiveCopiesRequiredMin", 2, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckPotentialOneCopyRedTransitionSuppressionInSec", 120, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckPotentialOneCopyGreenTransitionSuppressionInSec", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckPotentialOneCopyRedPeriodicIntervalInSec", 300, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckServerLevelPotentialOneCopyRedTransitionSuppressionInSec", 600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckServerLevelPotentialOneCopyGreenTransitionSuppressionInSec", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthCheckServerLevelPotentialOneCopyRedPeriodicIntervalInSec", 300, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("DatabaseHealthCheckSiteAlertsDisabled", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DatabaseHealthMonitorDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseHealthMonitorPeriodicIntervalInMsec", 60000, 0, 1, new int?(5000), null));
			base.DefineParameter(new BooleanConfigurableParameter("DatabaseHealthTrackerDisabled", true, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DatabaseStateTrackerDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseStateTrackerInitTimeoutInSec", 10, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DatabaseType", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DbQueueMgrStopLimitInSecs", 60, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("DisableActivationDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DisableBugcheckOnHungIo", 0, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("DisableDatabaseScan", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableEdbLogDirectoryCreation", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableFailureItemProcessing", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableGranularReplication", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableGranularReplicationOverflow", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableISeedStreamingPageReader", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableJetFailureItemPublish", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableNetworkSigning", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisablePriorityBoost", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableSetBrokenFailureItemSuppression", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableSocketStream", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableSourceLogVerifier", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DiskReclaimerDelayedStartInSecs", 300, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("DiskReclaimerDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DiskReclaimerPollerIntervalInSecs", 300, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("DiskReclaimerSpareDelayInSecs_Long", 1209600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DiskReclaimerSpareDelayInSecs_Medium", 172800, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DiskReclaimerSpareDelayInSecs_Short", 86400, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DumpsterInfoCacheTTLInSec", 30, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("DumpsterRedeliveryEndBufferSeconds", 300, 0, 1, new int?(60), null));
			base.DefineParameter(new Int32ConfigurableParameter("DumpsterRedeliveryExpirationDurationInSecs", 604800, 0, 1, new int?(5), null));
			base.DefineParameter(new BooleanConfigurableParameter("DumpsterRedeliveryIgnoreBackoff", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DumpsterRedeliveryManagerTimerIntervalInSecs", 120, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("DumpsterRedeliveryMaxTimeRangeInSecs", 2592000, 0, 1, new int?(3600), null));
			base.DefineParameter(new Int32ConfigurableParameter("DumpsterRedeliveryPrimaryRetryDurationInSecs", 43200, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("DumpsterRedeliveryStartBufferSeconds", 300, 0, 1, new int?(60), null));
			base.DefineParameter(new Int32ConfigurableParameter("DumpsterRpcTimeoutInMSecs", 30000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("EnableNetworkChecksums", 0, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("EnableSupportApi", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("EnableV1IncReseed", true, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("EnableVssWriter", true, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("EnableWatsonDumpOnTooMuchMemory", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("EnforceDbFolderUnderMountPoint", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("ExtraReplayLagAllowedMinutes", 1, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("FailureItemHangDetectionIntervalInSec", 30, 0, 1, new int?(10), null));
			base.DefineParameter(new Int32ConfigurableParameter("FailureItemManagerDatabaseListUpdaterIntervalInSec", 120, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("FailureItemLocalDatabaseOperationTimeoutInSec", 120, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("FailureItemProcessingAllowedLatencyInSec", 300, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("FailureItemProcessingDelayInMSec", 0, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("FailureItemStromCoolingDurationInSec", 900, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("FailureItemWatchdogEngageDurationInSec", 30, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("FileInUseRetryLimitInSecs", 5, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("FilesystemMaintainsOrder", false, 0, 1));
			string text = "FullServerReseedRetryIntervalInSec";
			int num = 300;
			int? num2 = new int?(5);
			base.DefineParameter(new Int32ConfigurableParameter(text, num, 1, 1, num2, null));
			base.DefineParameter(new BooleanConfigurableParameter("GetActiveCopiesForDatabaseAvailabilityGroupUseCache", true, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("GetCopyStatusRpcCacheTTLInSec", 5, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("GetCopyStatusServerCachedEntryStaleTimeoutSec", 30, 0, 1, new int?(5), null));
			base.DefineParameter(new BooleanConfigurableParameter("GetCopyStatusServerTimeoutEnabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("GetCopyStatusServerTimeoutSec", 120, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("GetMailboxDatabaseCopyStatusRPCTimeoutInMSec", 10000, 0, 1, new int?(5000), null));
			base.DefineParameter(new BooleanConfigurableParameter("HealthStateTrackerDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("HealthStateTrackerLookupDurationInSec", 300, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("HighAvailabilityWebServiceMexPort", 64338, 0, 1, new int?(1024), new int?(65535)));
			base.DefineParameter(new Int32ConfigurableParameter("HighAvailabilityWebServicePort", 64337, 0, 1, new int?(1024), new int?(65535)));
			base.DefineParameter(new Int32ConfigurableParameter("HungCopyLimitInSec", 300, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("IgnoreCatalogHealthSetByCI", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("IncSeedThreshold", 100, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("IOBufferPoolPreallocationOverride", -1, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("IOSizeInBytes", 262144, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("IsApiLatencyTestEnabled", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("IsKillClusterServiceOnClusApiHang", true, 1, 1));
			base.DefineParameter(new BooleanConfigurableParameter("IsLogApiLatencyFailure", false, 1, 1));
			base.DefineParameter(new BooleanConfigurableParameter("KillStoreInsteadOfWatsonOnTimeout", true, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("LastLogUpdateThresholdInSec", 120, 0, 1, new int?(0), null));
			base.DefineParameter(new BooleanConfigurableParameter("ListMdbStatusMonitorDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("ListMdbStatusRecoveryLimitInSec", 3600, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("ListMdbStatusFailureSuppressionWindowInSec", 720, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogCopierHungIoLimitInMsec", 120000, 0, 1, null, null));
			string text2 = "LogCopierStalledToFailedThresholdInSecs";
			int num3 = 300;
			num2 = new int?(3600);
			base.DefineParameter(new Int32ConfigurableParameter(text2, num3, 0, 1, new int?(0), num2));
			base.DefineParameter(new Int32ConfigurableParameter("LogCopyBufferedIo", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogCopyDelayInMsec", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogCopyNetworkTransferSize", 16777216, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogCopyPull", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogInspectorDelayInMsec", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogInspectorReadSize", 1048576, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayerDelayInMsec", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayerIdleStoreRpcIntervalInMSecs", 30000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayerMaximumLogsForReplayLag", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayerMaxLogsToScanInOneIteration", 300, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayerPauseDurationInMSecs", 10000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayerResumeThreshold", 5, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayerScanMoreLogsWhenReplayWithinThreshold", 50, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayerSuspendThreshold", 12, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayQueueHighPlayDownDisableSuppressionWindowInSecs", 120, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogReplayQueueHighPlayDownEnableSuppressionWindowInSecs", 300, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogShipACLLTimeoutInMsec", 5000, 0, 1, new int?(1000), null));
			base.DefineParameter(new Int32ConfigurableParameter("LogShipCompressionDisable", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogShipTimeoutInMsec", 15000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("LogTruncationExtendedPreservation", 10, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("LogTruncationKeepAllLogsForLagCopy", false, 0, 1));
			string text3 = "LogTruncationOpenContextTimeoutInSec";
			int num4 = 60;
			num2 = new int?(2147483);
			base.DefineParameter(new Int32ConfigurableParameter(text3, num4, 0, 1, new int?(5), num2));
			base.DefineParameter(new Int32ConfigurableParameter("LogTruncationTimerDuration", 180000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MajorityDecisionRpcTimeoutInSec", 5, 1, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MaxADReplicationWaitInSec", 120, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MaxAutoDatabaseMountDial", 100, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("MaxBlockModeConsumerDepthInBytes", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MaximumGCHandleCount", 5000000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MaximumProcessHandleCount", 25000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MaximumProcessPrivateMemoryMB", 4096, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MaxLogFilesToSeed", 10000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MemoryLimitBaseInMB", 2048, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MemoryLimitPerDBInMB", 32, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("MaximumProcessThreadCount", 1500, 0, 1, new int?(100), null));
			base.DefineParameter(new Int32ConfigurableParameter("MaximumRpcThreadCount", 1000, 0, 1, new int?(100), null));
			base.DefineParameter(new Int32ConfigurableParameter("MdbStatusFetcherServerDownTimeoutInSec", 5, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("StartupLogScanTimeoutInSec", 300, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MdbStatusFetcherTimeoutInSec", 60, 0, 1, new int?(5), null));
			base.DefineParameter(new BooleanConfigurableParameter("MonitorGCHandleCount", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringADConfigManagerIntervalInMsec", 300000, 0, 1, new int?(5000), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringADConfigStaleTimeoutLongInSec", 3600, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringADConfigStaleTimeoutShortInSec", 600, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringADGetConfigTimeoutInSec", 40, 0, 1, new int?(5), null));
			base.DefineParameter(new BooleanConfigurableParameter("MonitoringComponentDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringDHTInitLastUpdateTimeDiffInSec", 14400, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringDHTMissingObjectCleanupAgeThresholdInDays", 60, 0, 1, new int?(7), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringDHTPeriodicIntervalInSec", 60, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringDHTPrimaryPeriodicSuppressionInSec", 300, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringDHTPrimaryPublishPeriodicSuppressionInSec", 3600, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringDHTPrimaryTransitionSuppressionInSec", 300, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringWebServicePort", 808, 0, 1, new int?(808), new int?(65535)));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringWebServiceClientOpenTimeoutInSecs", 10, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringWebServiceClientCloseTimeoutInSecs", 10, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringWebServiceClientSendTimeoutInSecs", 30, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("MonitoringWebServiceClientReceiveTimeoutInSecs", 300, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("MountTimeoutInSec", 300, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("NetworkManagerStartupTimeoutInSec", 10, 0, 1, new int?(2), null));
			base.DefineParameter(new Int32ConfigurableParameter("NetworkStatusPollingPeriodInSecs", 300, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("NodeActionDelayBetweenIterationsInSec", 15, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("NodeActionInProgressWaitDurationInSec", 300, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("NodeActionNodeStateJoiningWaitDurationInSec", 300, 0, 1, new int?(0), null));
			string text4 = "NumThreadsPerPamDbOperation";
			int num5 = 5;
			num2 = new int?(16);
			base.DefineParameter(new Int32ConfigurableParameter(text4, num5, 0, 1, new int?(1), num2));
			base.DefineParameter(new Int32ConfigurableParameter("OpenClusterTimeoutInSec", 240, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("OnReplDownConfirmDurationBeforeFailoverInSecs", 180, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("OnReplDownDurationBetweenFailoversInSecs", 3600, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("OnReplDownMaxAllowedFailoversAcrossDagInADay", 12, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("OnReplDownMaxAllowedFailoversPerNodeInADay", 6, 0, 1, new int?(0), null));
			base.DefineParameter(new BooleanConfigurableParameter("OnReplDownFailoverEnabled", true, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("PamLastLogRpcTimeoutInMsec", 30000, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("PamLastLogUpdaterIntervalInSec", 30, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("PamMonitorCheckPeriodInSec", 120, 0, 1, new int?(10), null));
			base.DefineParameter(new Int32ConfigurableParameter("PamMonitorMoveClusterGroupTimeout", 60, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("PamMonitorRecoveryDurationInSec", 90, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("PamMonitorRoleCheckTimeoutInSec", 10, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("PamToSamDismountRpcTimeoutMediumInSec", 75, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("PamToSamDismountRpcTimeoutShortInSec", 5, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("PerfCounterUpdateIntervalInMSec", 15000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("QueryLogRangeTimeoutInMsec", 30000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("RegistryMonitorPollingIntervalInSec", 240, 0, 1, new int?(30), null));
			base.DefineParameter(new Int32ConfigurableParameter("RemoteClusterCallTimeoutInSec", 15, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("RemoteDataProviderSelfCheckInterval", 15000, 0, 1, new int?(5000), null));
			base.DefineParameter(new Int32ConfigurableParameter("RemoteRegistryTimeoutInMsec", 10000, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("ReplayLagManagerDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("ReplayLagManagerDisableLagSuppressionWindowInSecs", 86400, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("ReplayLagManagerEnableLagSuppressionWindowInSecs", 300, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("ReplayLagManagerNumAvailableCopies", 3, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("ReplayLagManagerPollerIntervalInMsec", 60000, 0, 1, new int?(5000), null));
			base.DefineParameter(new Int32ConfigurableParameter("ReplayLagLowSpacePlaydownThresholdInMB", 10000, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("ReplayServiceDiagnosticsIntervalMsec", 60000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("ReplayQueueAlertThreshold", 200, 0, 1, new int?(1), null));
			string text5 = "ReplicaInstanceManagerNumThreadsPerDbCopy";
			int num6 = 3;
			num2 = new int?(16);
			base.DefineParameter(new Int32ConfigurableParameter(text5, num6, 0, 1, new int?(1), num2));
			base.DefineParameter(new Int32ConfigurableParameter("ReplicaProgressNumberOfLogsThreshold", 1, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("RpcKillServiceTimeoutInMSec", 120000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("SeedCatalogProgressIntervalInSec", 5, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("SeederInstanceStaleDuration", 900000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("SeedingNetworkTimeoutInMsec", 180000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("SeedingNetworkTransferSize", 16777216, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("SkipIncReseedPagePatch", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("SkippedLogsDeleteAfterAgeInSecs", 2592000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("SkippedLogsDeletionIntervalSecs", 86400, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("SlowIoThresholdInMs", 5000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("SpaceMonitorActionSuppressionWindowInSecs", 300, 0, 1, new int?(0), null));
			base.DefineParameter(new BooleanConfigurableParameter("SpaceMonitorDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("SpaceMonitorCopyQueueThreshold", 10000, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("SpaceMonitorReplayQueueThreshold", 200000, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("SpaceMonitorLowSpaceThresholdInMB", 180000, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("SpaceMonitorMinHealthyCount", 3, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("SpaceMonitorPollerIntervalInSec", 300, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("StoreCrashControlCodeAckTimeoutInMSec", 20000, 0, 1, new int?(1000), null));
			base.DefineParameter(new Int32ConfigurableParameter("StoreKillBugcheckTimeoutInMSec", 300000, 0, 1, new int?(5000), null));
			base.DefineParameter(new Int32ConfigurableParameter("StoreRpcConnectivityTimeoutInSec", 30, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("StoreRpcGenericTimeoutInSec", 30, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("StoreWatsonDumpTimeoutInMSec", 3600000, 0, 1, new int?(60000), null));
			base.DefineParameter(new Int32ConfigurableParameter("SuspendLockTimeoutInMsec", 180000, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("TcpChannelIdleLimitInSec", 3600, 0, 1, new int?(5), null));
			base.DefineParameter(new Int32ConfigurableParameter("TestDelayCatalogSeedSec", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("TestDisableWatson", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("TestMemoryLeak", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("TestServiceStartupDelay", 0, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("TestStoreConnectivityTimeoutInSec", 5, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("TestWithFakeNetwork", 0, 1, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("TransientFailoverSuppressionDelayInSec", 180, 1, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("TreatLogCopyPartnerAsDownlevel", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("UnboundedDatalossDisableClusterInput", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("UnboundedDatalossDisableReplicationInput", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("UnboundedDatalossSafeGuardDurationInSec", 1200, 0, 1, new int?(10), null));
			base.DefineParameter(new Int32ConfigurableParameter("WaitForCatalogReadyTimeoutInSec", 120, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("WatchDogTimeoutForWatsonDumpInSec", 1200, 0, 1, new int?(1), null));
			base.DefineParameter(new BooleanConfigurableParameter("WatsonOnBlockModeConsumerOverflow", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("WcfEnableMexEndpoint", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("WcfMaxConcurrentCalls", 10000, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("WcfMaxConcurrentInstances", 10000, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("WcfMaxConcurrentSessions", 10000, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("ClusdbPeriodicCleanupStartDelayInSecs", 300, 0, 1, new int?(1), null));
			base.DefineParameter(new Int32ConfigurableParameter("ClusdbPeriodicCleanupIntervalInSecs", 14400, 0, 1, new int?(1), null));
			base.DefineParameter(new BooleanConfigurableParameter("BitlockerWin8EmptyUsedOnlyDisabled", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("BitlockerWin7EmptyFullVolumeDisabled", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("BitlockerWin8UsedOnlyDisabled", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("BitlockerFeatureDisabled", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStorePerfTrackerFlushInMs", 900000, 0, 1, new int?(50), null));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreApiExecutionPeriodicLogDurationInMs", 900000, 0, 1, new int?(0), null));
			base.DefineParameter(new BooleanConfigurableParameter("DistributedStoreIsLogShadowApiResult", true, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DistributedStoreIsLogApiSuccess", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DistributedStoreIsLogApiExecutionCallstack", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreShadowMaxAllowedWriteQueueLength", 50, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreShadowMaxAllowedReadQueueLength", 200, 0, 1, new int?(0), null));
			base.DefineParameter(new Int32ConfigurableParameter("AutoMounterFirstStartupDelayInMsec", 5000, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("DistributedStoreDisableDualClientMode", false, 0, 1));
			base.DefineParameter(new BooleanConfigurableParameter("DisableDxStoreManager", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreConsistencyCheckPeriodicIntervalInSecs", 900, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreConsistencyVerifyIntervalInSecs", 86400, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreConsistencyStartupDelayInSecs", 300, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("DistributedStoreDisableDxStoreFixUp", false, 0, 1));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreDiffReportVerboseFlags", 14, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreDiffVerboseReportMaxCharsPerLine", 16384, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreDagVersionCheckerDurationInSeconds", 60, 0, 1, null, null));
			base.DefineParameter(new Int32ConfigurableParameter("DistributedStoreStartupMinimumRequiredVersionAcrossDag", 1941996502, 0, 1, null, null));
			base.DefineParameter(new BooleanConfigurableParameter("DistributedStoreIsLogPerformanceForSingleStore", false, 0, 1));
		}

		private const int ParameterCapacity = 200;

		private const int MaxAutoDatabaseMountDialDefault = 100;

		private const int DefaultRetailListMdbStatusRpcTimeoutInSec = 30;

		private const int DefaultDebugListMdbStatusRpcTimeoutInSec = 70;

		public static RegistryParameterDefinitions Instance = new RegistryParameterDefinitions();
	}
}
