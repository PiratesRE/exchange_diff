using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using Microsoft.Exchange.Assistants;
using Microsoft.Exchange.AutoDiscover;
using Microsoft.Exchange.Calendar;
using Microsoft.Exchange.Cluster.Shared;
using Microsoft.Exchange.Flighting;
using Microsoft.Exchange.HolidayCalendars;
using Microsoft.Exchange.Inference.Common;
using Microsoft.Exchange.MessageDepot;
using Microsoft.Exchange.Search;
using Microsoft.Exchange.TextProcessing.Boomerang;
using Microsoft.Exchange.VariantConfiguration;
using Microsoft.Exchange.VariantConfiguration.Settings;
using Microsoft.Exchange.WorkloadManagement;
using Microsoft.Search.Platform.Parallax.Core.Model;
using Microsoft.Search.Platform.Parallax.Core.Schema;
using Microsoft.Search.Platform.Parallax.Core.Schema.Value;

namespace Microsoft.Exchange.AirSync
{
	[GeneratedCode("microsoft.search.platform.parallax.tools.codegenerator.exe", "1.0.0.0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public sealed class _ParallaxSchemaProvider_SchemaProvider_ : SchemaProvider
	{
		public override Schema Schema
		{
			get
			{
				return _ParallaxSchemaProvider_SchemaProvider_.schema;
			}
		}

		static _ParallaxSchemaProvider_SchemaProvider_()
		{
			TypeSchema typeSchema = SchemaProvider.CreateTypeSchema<ISettings>("Base structure for all component settings to differentiate them from infrastructure configuration.", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, null);
			IdentityPropertySchema propertySchema_Name2 = SchemaProvider.CreateIdentityPropertySchema(typeSchema, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			InstanceProviderBuilder instanceProviderBuilder = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ISettings_DataAccessor_ dynamicStorageSelection_ISettings_DataAccessor_ = new _DynamicStorageSelection_ISettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name2, ref dynamicStorageSelection_ISettings_DataAccessor_._Name_MaterializedValue_);
				return dynamicStorageSelection_ISettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema, 3, typeof(_DynamicStorageSelection_ISettings_Implementation_), typeof(_DynamicStorageSelection_ISettings_DataAccessor_), instanceProviderBuilder);
			InstanceProviderBuilder instanceProviderBuilder2 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ISettings_Implementation_ dataOnly_ISettings_Implementation_ = new _DataOnly_ISettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name2, ref dataOnly_ISettings_Implementation_._Name_MaterializedValue_);
				return dataOnly_ISettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema, 0, typeof(_DataOnly_ISettings_Implementation_), typeof(_DataOnly_ISettings_Implementation_), instanceProviderBuilder2);
			TypeSchema typeSchema2 = SchemaProvider.CreateTypeSchema<IMdmNotificationSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name3 = SchemaProvider.CreateIdentityPropertySchema(typeSchema2, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_EnrollmentUrl = SchemaProvider.CreateDataPropertySchema(typeSchema2, "EnrollmentUrl", "MDM enrollment email url.", new ConcretePrimitiveScalarInfo<IMdmNotificationSettings, Uri>((IMdmNotificationSettings vo) => vo.EnrollmentUrl, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_ComplianceStatusUrl = SchemaProvider.CreateDataPropertySchema(typeSchema2, "ComplianceStatusUrl", "MDM compliance status email url.", new ConcretePrimitiveScalarInfo<IMdmNotificationSettings, Uri>((IMdmNotificationSettings vo) => vo.ComplianceStatusUrl, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_ADRegistrationServiceHost = SchemaProvider.CreateDataPropertySchema(typeSchema2, "ADRegistrationServiceHost", "Cloud MDM AD registration service host name.", new ConcretePrimitiveScalarInfo<IMdmNotificationSettings, string>((IMdmNotificationSettings vo) => vo.ADRegistrationServiceHost, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_EnrollmentUrlWithBasicSteps = SchemaProvider.CreateDataPropertySchema(typeSchema2, "EnrollmentUrlWithBasicSteps", "Cloud MDM Enollmemtfor with Basic steps ( try to automatically activate ).", new ConcretePrimitiveScalarInfo<IMdmNotificationSettings, Uri>((IMdmNotificationSettings vo) => vo.EnrollmentUrlWithBasicSteps, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_ActivationUrlWithBasicSteps = SchemaProvider.CreateDataPropertySchema(typeSchema2, "ActivationUrlWithBasicSteps", "Cloud MDM Activation url for Basic steps ( Retry mechanism in case auto activation fails).", new ConcretePrimitiveScalarInfo<IMdmNotificationSettings, string>((IMdmNotificationSettings vo) => vo.ActivationUrlWithBasicSteps, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_DeviceStatusCacheExpirationInternal = SchemaProvider.CreateDataPropertySchema(typeSchema2, "DeviceStatusCacheExpirationInternal", "Device Status cache expiration interval", new ConcretePrimitiveScalarInfo<IMdmNotificationSettings, TimeSpan>((IMdmNotificationSettings vo) => vo.DeviceStatusCacheExpirationInternal, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_NegativeDeviceStatusCacheExpirationInterval = SchemaProvider.CreateDataPropertySchema(typeSchema2, "NegativeDeviceStatusCacheExpirationInterval", "Negative Device Status cache expiration interval", new ConcretePrimitiveScalarInfo<IMdmNotificationSettings, TimeSpan>((IMdmNotificationSettings vo) => vo.NegativeDeviceStatusCacheExpirationInterval, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_PolicyEvaluationEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema2, "PolicyEvaluationEnabled", "Setting indicating if policy evaluation is enabled or not", new ConcretePrimitiveScalarInfo<IMdmNotificationSettings, bool>((IMdmNotificationSettings vo) => vo.PolicyEvaluationEnabled, null, null, null, 0), true, "false", null);
			InstanceProviderBuilder instanceProviderBuilder3 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IMdmNotificationSettings_DataAccessor_ dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_ = new _DynamicStorageSelection_IMdmNotificationSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name3, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<Uri>(propertySchema_EnrollmentUrl, context, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._EnrollmentUrl_MaterializedValue_, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._EnrollmentUrl_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<Uri>(propertySchema_ComplianceStatusUrl, context, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._ComplianceStatusUrl_MaterializedValue_, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._ComplianceStatusUrl_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_ADRegistrationServiceHost, context, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._ADRegistrationServiceHost_MaterializedValue_, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._ADRegistrationServiceHost_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<Uri>(propertySchema_EnrollmentUrlWithBasicSteps, context, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._EnrollmentUrlWithBasicSteps_MaterializedValue_, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._EnrollmentUrlWithBasicSteps_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_ActivationUrlWithBasicSteps, context, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._ActivationUrlWithBasicSteps_MaterializedValue_, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._ActivationUrlWithBasicSteps_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_DeviceStatusCacheExpirationInternal, context, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._DeviceStatusCacheExpirationInternal_MaterializedValue_, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._DeviceStatusCacheExpirationInternal_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_NegativeDeviceStatusCacheExpirationInterval, context, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._NegativeDeviceStatusCacheExpirationInterval_MaterializedValue_, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._NegativeDeviceStatusCacheExpirationInterval_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_PolicyEvaluationEnabled, context, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._PolicyEvaluationEnabled_MaterializedValue_, ref dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_._PolicyEvaluationEnabled_ValueProvider_);
				return dynamicStorageSelection_IMdmNotificationSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema2, 3, typeof(_DynamicStorageSelection_IMdmNotificationSettings_Implementation_), typeof(_DynamicStorageSelection_IMdmNotificationSettings_DataAccessor_), instanceProviderBuilder3);
			InstanceProviderBuilder instanceProviderBuilder4 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IMdmNotificationSettings_Implementation_ dataOnly_IMdmNotificationSettings_Implementation_ = new _DataOnly_IMdmNotificationSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name3, ref dataOnly_IMdmNotificationSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<Uri>(propertySchema_EnrollmentUrl, context, ref dataOnly_IMdmNotificationSettings_Implementation_._EnrollmentUrl_MaterializedValue_);
				initializer.InitializeForDataOnly<Uri>(propertySchema_ComplianceStatusUrl, context, ref dataOnly_IMdmNotificationSettings_Implementation_._ComplianceStatusUrl_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_ADRegistrationServiceHost, context, ref dataOnly_IMdmNotificationSettings_Implementation_._ADRegistrationServiceHost_MaterializedValue_);
				initializer.InitializeForDataOnly<Uri>(propertySchema_EnrollmentUrlWithBasicSteps, context, ref dataOnly_IMdmNotificationSettings_Implementation_._EnrollmentUrlWithBasicSteps_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_ActivationUrlWithBasicSteps, context, ref dataOnly_IMdmNotificationSettings_Implementation_._ActivationUrlWithBasicSteps_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_DeviceStatusCacheExpirationInternal, context, ref dataOnly_IMdmNotificationSettings_Implementation_._DeviceStatusCacheExpirationInternal_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_NegativeDeviceStatusCacheExpirationInterval, context, ref dataOnly_IMdmNotificationSettings_Implementation_._NegativeDeviceStatusCacheExpirationInterval_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_PolicyEvaluationEnabled, context, ref dataOnly_IMdmNotificationSettings_Implementation_._PolicyEvaluationEnabled_MaterializedValue_);
				return dataOnly_IMdmNotificationSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema2, 0, typeof(_DataOnly_IMdmNotificationSettings_Implementation_), typeof(_DataOnly_IMdmNotificationSettings_Implementation_), instanceProviderBuilder4);
			TypeSchema typeSchema3 = SchemaProvider.CreateTypeSchema<IMdmSupportedPlatformsSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name4 = SchemaProvider.CreateIdentityPropertySchema(typeSchema3, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_PlatformsSupported = SchemaProvider.CreateDataPropertySchema(typeSchema3, "PlatformsSupported", "comma separated list of supported platforms.", new ConcretePrimitiveScalarInfo<IMdmSupportedPlatformsSettings, string>((IMdmSupportedPlatformsSettings vo) => vo.PlatformsSupported, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder5 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IMdmSupportedPlatformsSettings_DataAccessor_ dynamicStorageSelection_IMdmSupportedPlatformsSettings_DataAccessor_ = new _DynamicStorageSelection_IMdmSupportedPlatformsSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name4, ref dynamicStorageSelection_IMdmSupportedPlatformsSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_PlatformsSupported, context, ref dynamicStorageSelection_IMdmSupportedPlatformsSettings_DataAccessor_._PlatformsSupported_MaterializedValue_, ref dynamicStorageSelection_IMdmSupportedPlatformsSettings_DataAccessor_._PlatformsSupported_ValueProvider_);
				return dynamicStorageSelection_IMdmSupportedPlatformsSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema3, 3, typeof(_DynamicStorageSelection_IMdmSupportedPlatformsSettings_Implementation_), typeof(_DynamicStorageSelection_IMdmSupportedPlatformsSettings_DataAccessor_), instanceProviderBuilder5);
			InstanceProviderBuilder instanceProviderBuilder6 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IMdmSupportedPlatformsSettings_Implementation_ dataOnly_IMdmSupportedPlatformsSettings_Implementation_ = new _DataOnly_IMdmSupportedPlatformsSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name4, ref dataOnly_IMdmSupportedPlatformsSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_PlatformsSupported, context, ref dataOnly_IMdmSupportedPlatformsSettings_Implementation_._PlatformsSupported_MaterializedValue_);
				return dataOnly_IMdmSupportedPlatformsSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema3, 0, typeof(_DataOnly_IMdmSupportedPlatformsSettings_Implementation_), typeof(_DataOnly_IMdmSupportedPlatformsSettings_Implementation_), instanceProviderBuilder6);
			TypeSchema typeSchema4 = SchemaProvider.CreateTypeSchema<ICalendarRepairLoggerSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name5 = SchemaProvider.CreateIdentityPropertySchema(typeSchema4, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_InsightLogEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema4, "InsightLogEnabled", "Whether InsightLogger is enabled.", new ConcretePrimitiveScalarInfo<ICalendarRepairLoggerSettings, bool>((ICalendarRepairLoggerSettings vo) => vo.InsightLogEnabled, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_InsightLogDirectoryName = SchemaProvider.CreateDataPropertySchema(typeSchema4, "InsightLogDirectoryName", "Logging folder name", new ConcretePrimitiveScalarInfo<ICalendarRepairLoggerSettings, string>((ICalendarRepairLoggerSettings vo) => vo.InsightLogDirectoryName, null, null, null, 0), true, "CRAInsightLog", null);
			DataPropertySchema propertySchema_InsightLogFileAgeInDays = SchemaProvider.CreateDataPropertySchema(typeSchema4, "InsightLogFileAgeInDays", "Log file age in days", new ConcretePrimitiveScalarInfo<ICalendarRepairLoggerSettings, TimeSpan>((ICalendarRepairLoggerSettings vo) => vo.InsightLogFileAgeInDays, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_InsightLogDirectorySizeLimit = SchemaProvider.CreateDataPropertySchema(typeSchema4, "InsightLogDirectorySizeLimit", "Max log directory size", new ConcretePrimitiveScalarInfo<ICalendarRepairLoggerSettings, ulong>((ICalendarRepairLoggerSettings vo) => vo.InsightLogDirectorySizeLimit, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_InsightLogFileSize = SchemaProvider.CreateDataPropertySchema(typeSchema4, "InsightLogFileSize", "LogFile size", new ConcretePrimitiveScalarInfo<ICalendarRepairLoggerSettings, ulong>((ICalendarRepairLoggerSettings vo) => vo.InsightLogFileSize, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_InsightLogCacheSize = SchemaProvider.CreateDataPropertySchema(typeSchema4, "InsightLogCacheSize", "Logger cache size", new ConcretePrimitiveScalarInfo<ICalendarRepairLoggerSettings, ulong>((ICalendarRepairLoggerSettings vo) => vo.InsightLogCacheSize, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_InsightLogFlushIntervalInSeconds = SchemaProvider.CreateDataPropertySchema(typeSchema4, "InsightLogFlushIntervalInSeconds", "Flush interval in seconds", new ConcretePrimitiveScalarInfo<ICalendarRepairLoggerSettings, TimeSpan>((ICalendarRepairLoggerSettings vo) => vo.InsightLogFlushIntervalInSeconds, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder7 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_ dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_ = new _DynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name5, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_InsightLogEnabled, context, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogEnabled_MaterializedValue_, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_InsightLogDirectoryName, context, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogDirectoryName_MaterializedValue_, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogDirectoryName_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_InsightLogFileAgeInDays, context, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogFileAgeInDays_MaterializedValue_, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogFileAgeInDays_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<ulong>(propertySchema_InsightLogDirectorySizeLimit, context, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogDirectorySizeLimit_MaterializedValue_, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogDirectorySizeLimit_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<ulong>(propertySchema_InsightLogFileSize, context, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogFileSize_MaterializedValue_, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogFileSize_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<ulong>(propertySchema_InsightLogCacheSize, context, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogCacheSize_MaterializedValue_, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogCacheSize_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_InsightLogFlushIntervalInSeconds, context, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogFlushIntervalInSeconds_MaterializedValue_, ref dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_._InsightLogFlushIntervalInSeconds_ValueProvider_);
				return dynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema4, 3, typeof(_DynamicStorageSelection_ICalendarRepairLoggerSettings_Implementation_), typeof(_DynamicStorageSelection_ICalendarRepairLoggerSettings_DataAccessor_), instanceProviderBuilder7);
			InstanceProviderBuilder instanceProviderBuilder8 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ICalendarRepairLoggerSettings_Implementation_ dataOnly_ICalendarRepairLoggerSettings_Implementation_ = new _DataOnly_ICalendarRepairLoggerSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name5, ref dataOnly_ICalendarRepairLoggerSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_InsightLogEnabled, context, ref dataOnly_ICalendarRepairLoggerSettings_Implementation_._InsightLogEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_InsightLogDirectoryName, context, ref dataOnly_ICalendarRepairLoggerSettings_Implementation_._InsightLogDirectoryName_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_InsightLogFileAgeInDays, context, ref dataOnly_ICalendarRepairLoggerSettings_Implementation_._InsightLogFileAgeInDays_MaterializedValue_);
				initializer.InitializeForDataOnly<ulong>(propertySchema_InsightLogDirectorySizeLimit, context, ref dataOnly_ICalendarRepairLoggerSettings_Implementation_._InsightLogDirectorySizeLimit_MaterializedValue_);
				initializer.InitializeForDataOnly<ulong>(propertySchema_InsightLogFileSize, context, ref dataOnly_ICalendarRepairLoggerSettings_Implementation_._InsightLogFileSize_MaterializedValue_);
				initializer.InitializeForDataOnly<ulong>(propertySchema_InsightLogCacheSize, context, ref dataOnly_ICalendarRepairLoggerSettings_Implementation_._InsightLogCacheSize_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_InsightLogFlushIntervalInSeconds, context, ref dataOnly_ICalendarRepairLoggerSettings_Implementation_._InsightLogFlushIntervalInSeconds_MaterializedValue_);
				return dataOnly_ICalendarRepairLoggerSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema4, 0, typeof(_DataOnly_ICalendarRepairLoggerSettings_Implementation_), typeof(_DataOnly_ICalendarRepairLoggerSettings_Implementation_), instanceProviderBuilder8);
			TypeSchema typeSchema5 = SchemaProvider.CreateTypeSchema<IMailboxAssistantServiceSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name6 = SchemaProvider.CreateIdentityPropertySchema(typeSchema5, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_EventPollingInterval = SchemaProvider.CreateDataPropertySchema(typeSchema5, "EventPollingInterval", "Specifies how often the events should be polled.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.EventPollingInterval, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_ActiveWatermarksSaveInterval = SchemaProvider.CreateDataPropertySchema(typeSchema5, "ActiveWatermarksSaveInterval", "Specifies how often the watermarks for active mailboxes should be saved.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.ActiveWatermarksSaveInterval, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_IdleWatermarksSaveInterval = SchemaProvider.CreateDataPropertySchema(typeSchema5, "IdleWatermarksSaveInterval", "Specifies how often the watermarks for idle mailboxes should be saved. This value must be greater than ActiveWatermarksSaveInterval.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.IdleWatermarksSaveInterval, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_WatermarkCleanupInterval = SchemaProvider.CreateDataPropertySchema(typeSchema5, "WatermarkCleanupInterval", "Specifies how often the watermarks for disabled/deprecated assistants should be cleaned up.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.WatermarkCleanupInterval, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_MaxThreadsForAllTimeBasedAssistants = SchemaProvider.CreateDataPropertySchema(typeSchema5, "MaxThreadsForAllTimeBasedAssistants", "Specifies the maximum number of threads that all time based assistants can consume out of the thread pool.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, int>((IMailboxAssistantServiceSettings vo) => vo.MaxThreadsForAllTimeBasedAssistants, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxThreadsPerTimeBasedAssistantType = SchemaProvider.CreateDataPropertySchema(typeSchema5, "MaxThreadsPerTimeBasedAssistantType", "Specifies the maximum number of threads that each type of time based assistant can consume out of the thread pool.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, int>((IMailboxAssistantServiceSettings vo) => vo.MaxThreadsPerTimeBasedAssistantType, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_HangDetectionTimeout = SchemaProvider.CreateDataPropertySchema(typeSchema5, "HangDetectionTimeout", "Specifies how long to wait for a thread before assuming it is hanging.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.HangDetectionTimeout, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_HangDetectionPeriod = SchemaProvider.CreateDataPropertySchema(typeSchema5, "HangDetectionPeriod", "Specifies how often to process a thread that is still hanging.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.HangDetectionPeriod, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_MaximumEventQueueSize = SchemaProvider.CreateDataPropertySchema(typeSchema5, "MaximumEventQueueSize", "Specifies the maximum number of events that can be queued up by the Event Poller.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, int>((IMailboxAssistantServiceSettings vo) => vo.MaximumEventQueueSize, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MemoryMonitorEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema5, "MemoryMonitorEnabled", "Indicates if memory monitor is enabled.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, bool>((IMailboxAssistantServiceSettings vo) => vo.MemoryMonitorEnabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_MemoryBarrierNumberOfSamples = SchemaProvider.CreateDataPropertySchema(typeSchema5, "MemoryBarrierNumberOfSamples", "Specifies the number of samples to be used in the memory average calculation.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, int>((IMailboxAssistantServiceSettings vo) => vo.MemoryBarrierNumberOfSamples, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MemoryBarrierSamplingInterval = SchemaProvider.CreateDataPropertySchema(typeSchema5, "MemoryBarrierSamplingInterval", "Specifies how often to sample the memory usage of the service.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.MemoryBarrierSamplingInterval, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_MemoryBarrierSamplingDelay = SchemaProvider.CreateDataPropertySchema(typeSchema5, "MemoryBarrierSamplingDelay", "Specifies how long to wait before the first sampling.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.MemoryBarrierSamplingDelay, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_MemoryBarrierPrivateBytesUsageLimit = SchemaProvider.CreateDataPropertySchema(typeSchema5, "MemoryBarrierPrivateBytesUsageLimit", "Specifies the private bytes usage limit after which the Memory Barrier should trigger.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, long>((IMailboxAssistantServiceSettings vo) => vo.MemoryBarrierPrivateBytesUsageLimit, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_WorkCycleUpdatePeriod = SchemaProvider.CreateDataPropertySchema(typeSchema5, "WorkCycleUpdatePeriod", "Specifies how often to check for Work Cycle configuration changes.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.WorkCycleUpdatePeriod, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_BatchDuration = SchemaProvider.CreateDataPropertySchema(typeSchema5, "BatchDuration", "Specifies for how long TBA should be batching mailboxes.", new ConcretePrimitiveScalarInfo<IMailboxAssistantServiceSettings, TimeSpan>((IMailboxAssistantServiceSettings vo) => vo.BatchDuration, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder9 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_ dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_ = new _DynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name6, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_EventPollingInterval, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._EventPollingInterval_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._EventPollingInterval_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_ActiveWatermarksSaveInterval, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._ActiveWatermarksSaveInterval_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._ActiveWatermarksSaveInterval_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_IdleWatermarksSaveInterval, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._IdleWatermarksSaveInterval_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._IdleWatermarksSaveInterval_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_WatermarkCleanupInterval, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._WatermarkCleanupInterval_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._WatermarkCleanupInterval_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxThreadsForAllTimeBasedAssistants, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MaxThreadsForAllTimeBasedAssistants_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MaxThreadsForAllTimeBasedAssistants_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxThreadsPerTimeBasedAssistantType, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MaxThreadsPerTimeBasedAssistantType_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MaxThreadsPerTimeBasedAssistantType_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_HangDetectionTimeout, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._HangDetectionTimeout_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._HangDetectionTimeout_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_HangDetectionPeriod, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._HangDetectionPeriod_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._HangDetectionPeriod_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaximumEventQueueSize, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MaximumEventQueueSize_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MaximumEventQueueSize_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_MemoryMonitorEnabled, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryMonitorEnabled_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryMonitorEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MemoryBarrierNumberOfSamples, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryBarrierNumberOfSamples_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryBarrierNumberOfSamples_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_MemoryBarrierSamplingInterval, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryBarrierSamplingInterval_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryBarrierSamplingInterval_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_MemoryBarrierSamplingDelay, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryBarrierSamplingDelay_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryBarrierSamplingDelay_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_MemoryBarrierPrivateBytesUsageLimit, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryBarrierPrivateBytesUsageLimit_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._MemoryBarrierPrivateBytesUsageLimit_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_WorkCycleUpdatePeriod, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._WorkCycleUpdatePeriod_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._WorkCycleUpdatePeriod_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_BatchDuration, context, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._BatchDuration_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_._BatchDuration_ValueProvider_);
				return dynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema5, 3, typeof(_DynamicStorageSelection_IMailboxAssistantServiceSettings_Implementation_), typeof(_DynamicStorageSelection_IMailboxAssistantServiceSettings_DataAccessor_), instanceProviderBuilder9);
			InstanceProviderBuilder instanceProviderBuilder10 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IMailboxAssistantServiceSettings_Implementation_ dataOnly_IMailboxAssistantServiceSettings_Implementation_ = new _DataOnly_IMailboxAssistantServiceSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name6, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_EventPollingInterval, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._EventPollingInterval_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_ActiveWatermarksSaveInterval, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._ActiveWatermarksSaveInterval_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_IdleWatermarksSaveInterval, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._IdleWatermarksSaveInterval_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_WatermarkCleanupInterval, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._WatermarkCleanupInterval_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxThreadsForAllTimeBasedAssistants, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._MaxThreadsForAllTimeBasedAssistants_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxThreadsPerTimeBasedAssistantType, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._MaxThreadsPerTimeBasedAssistantType_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_HangDetectionTimeout, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._HangDetectionTimeout_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_HangDetectionPeriod, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._HangDetectionPeriod_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaximumEventQueueSize, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._MaximumEventQueueSize_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_MemoryMonitorEnabled, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._MemoryMonitorEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MemoryBarrierNumberOfSamples, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._MemoryBarrierNumberOfSamples_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_MemoryBarrierSamplingInterval, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._MemoryBarrierSamplingInterval_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_MemoryBarrierSamplingDelay, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._MemoryBarrierSamplingDelay_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_MemoryBarrierPrivateBytesUsageLimit, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._MemoryBarrierPrivateBytesUsageLimit_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_WorkCycleUpdatePeriod, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._WorkCycleUpdatePeriod_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_BatchDuration, context, ref dataOnly_IMailboxAssistantServiceSettings_Implementation_._BatchDuration_MaterializedValue_);
				return dataOnly_IMailboxAssistantServiceSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema5, 0, typeof(_DataOnly_IMailboxAssistantServiceSettings_Implementation_), typeof(_DataOnly_IMailboxAssistantServiceSettings_Implementation_), instanceProviderBuilder10);
			TypeSchema typeSchema6 = SchemaProvider.CreateTypeSchema<IMailboxAssistantSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name7 = SchemaProvider.CreateIdentityPropertySchema(typeSchema6, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Enabled2 = SchemaProvider.CreateDataPropertySchema(typeSchema6, "Enabled", "Whether the mailbox assistant is enabled.", new ConcretePrimitiveScalarInfo<IMailboxAssistantSettings, bool>((IMailboxAssistantSettings vo) => vo.Enabled, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_MailboxNotInterestingLogInterval = SchemaProvider.CreateDataPropertySchema(typeSchema6, "MailboxNotInterestingLogInterval", "How often to log MailboxNotInteresting event.", new ConcretePrimitiveScalarInfo<IMailboxAssistantSettings, TimeSpan>((IMailboxAssistantSettings vo) => vo.MailboxNotInterestingLogInterval, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_SpreadLoad = SchemaProvider.CreateDataPropertySchema(typeSchema6, "SpreadLoad", "Indicates if mailbox processing should be spread out over work interval.", new ConcretePrimitiveScalarInfo<IMailboxAssistantSettings, bool>((IMailboxAssistantSettings vo) => vo.SpreadLoad, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_SlaMonitoringEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema6, "SlaMonitoringEnabled", "Indicates if assistant should be included in SLA monitoring.", new ConcretePrimitiveScalarInfo<IMailboxAssistantSettings, bool>((IMailboxAssistantSettings vo) => vo.SlaMonitoringEnabled, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_CompletionMonitoringEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema6, "CompletionMonitoringEnabled", "Indicates if assistant should be included in 'not running to completion' monitoring.", new ConcretePrimitiveScalarInfo<IMailboxAssistantSettings, bool>((IMailboxAssistantSettings vo) => vo.CompletionMonitoringEnabled, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_ActiveDatabaseProcessingMonitoringEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema6, "ActiveDatabaseProcessingMonitoringEnabled", "Indicates if assistant should be included in 'active database processing' monitoring.", new ConcretePrimitiveScalarInfo<IMailboxAssistantSettings, bool>((IMailboxAssistantSettings vo) => vo.ActiveDatabaseProcessingMonitoringEnabled, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_SlaUrgentThreshold = SchemaProvider.CreateDataPropertySchema(typeSchema6, "SlaUrgentThreshold", "Percent of the mailboxes to be processed to call SLA reached, i.e. if 85 out of 100 mailboxes processed means SLA has been met. This is the threshold for urgent alerts.", new ConcretePrimitiveScalarInfo<IMailboxAssistantSettings, float>((IMailboxAssistantSettings vo) => vo.SlaUrgentThreshold, null, null, null, 0), true, "0.85", null);
			DataPropertySchema propertySchema_SlaNonUrgentThreshold = SchemaProvider.CreateDataPropertySchema(typeSchema6, "SlaNonUrgentThreshold", "Percent of the mailboxes to be processed to call SLA reached, i.e. if 99 out of 100 mailboxes processed means SLA has been met. This is the threshold for non-urgent alerts, therefore more strict.", new ConcretePrimitiveScalarInfo<IMailboxAssistantSettings, float>((IMailboxAssistantSettings vo) => vo.SlaNonUrgentThreshold, null, null, null, 0), true, "0.99", null);
			InstanceProviderBuilder instanceProviderBuilder11 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_ dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_ = new _DynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name7, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled2, context, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._Enabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_MailboxNotInterestingLogInterval, context, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._MailboxNotInterestingLogInterval_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._MailboxNotInterestingLogInterval_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_SpreadLoad, context, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._SpreadLoad_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._SpreadLoad_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_SlaMonitoringEnabled, context, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._SlaMonitoringEnabled_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._SlaMonitoringEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_CompletionMonitoringEnabled, context, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._CompletionMonitoringEnabled_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._CompletionMonitoringEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_ActiveDatabaseProcessingMonitoringEnabled, context, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._ActiveDatabaseProcessingMonitoringEnabled_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._ActiveDatabaseProcessingMonitoringEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<float>(propertySchema_SlaUrgentThreshold, context, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._SlaUrgentThreshold_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._SlaUrgentThreshold_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<float>(propertySchema_SlaNonUrgentThreshold, context, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._SlaNonUrgentThreshold_MaterializedValue_, ref dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_._SlaNonUrgentThreshold_ValueProvider_);
				return dynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema6, 3, typeof(_DynamicStorageSelection_IMailboxAssistantSettings_Implementation_), typeof(_DynamicStorageSelection_IMailboxAssistantSettings_DataAccessor_), instanceProviderBuilder11);
			InstanceProviderBuilder instanceProviderBuilder12 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IMailboxAssistantSettings_Implementation_ dataOnly_IMailboxAssistantSettings_Implementation_ = new _DataOnly_IMailboxAssistantSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name7, ref dataOnly_IMailboxAssistantSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled2, context, ref dataOnly_IMailboxAssistantSettings_Implementation_._Enabled_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_MailboxNotInterestingLogInterval, context, ref dataOnly_IMailboxAssistantSettings_Implementation_._MailboxNotInterestingLogInterval_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_SpreadLoad, context, ref dataOnly_IMailboxAssistantSettings_Implementation_._SpreadLoad_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_SlaMonitoringEnabled, context, ref dataOnly_IMailboxAssistantSettings_Implementation_._SlaMonitoringEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_CompletionMonitoringEnabled, context, ref dataOnly_IMailboxAssistantSettings_Implementation_._CompletionMonitoringEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_ActiveDatabaseProcessingMonitoringEnabled, context, ref dataOnly_IMailboxAssistantSettings_Implementation_._ActiveDatabaseProcessingMonitoringEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<float>(propertySchema_SlaUrgentThreshold, context, ref dataOnly_IMailboxAssistantSettings_Implementation_._SlaUrgentThreshold_MaterializedValue_);
				initializer.InitializeForDataOnly<float>(propertySchema_SlaNonUrgentThreshold, context, ref dataOnly_IMailboxAssistantSettings_Implementation_._SlaNonUrgentThreshold_MaterializedValue_);
				return dataOnly_IMailboxAssistantSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema6, 0, typeof(_DataOnly_IMailboxAssistantSettings_Implementation_), typeof(_DataOnly_IMailboxAssistantSettings_Implementation_), instanceProviderBuilder12);
			TypeSchema typeSchema7 = SchemaProvider.CreateTypeSchema<IOWAUrl>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name8 = SchemaProvider.CreateIdentityPropertySchema(typeSchema7, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_OwaInternalAuthMethods = SchemaProvider.CreateDataPropertySchema(typeSchema7, "OwaInternalAuthMethods", "The AuthenticationMethod returned by AutoDiscover for the internal OWAUrl", new ConcretePrimitiveScalarInfo<IOWAUrl, string>((IOWAUrl vo) => vo.OwaInternalAuthMethods, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_OwaExternalAuthMethods = SchemaProvider.CreateDataPropertySchema(typeSchema7, "OwaExternalAuthMethods", "The AuthenticationMethod returned by AutoDiscover for the external OWAUrl", new ConcretePrimitiveScalarInfo<IOWAUrl, string>((IOWAUrl vo) => vo.OwaExternalAuthMethods, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder13 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IOWAUrl_DataAccessor_ dynamicStorageSelection_IOWAUrl_DataAccessor_ = new _DynamicStorageSelection_IOWAUrl_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name8, ref dynamicStorageSelection_IOWAUrl_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_OwaInternalAuthMethods, context, ref dynamicStorageSelection_IOWAUrl_DataAccessor_._OwaInternalAuthMethods_MaterializedValue_, ref dynamicStorageSelection_IOWAUrl_DataAccessor_._OwaInternalAuthMethods_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_OwaExternalAuthMethods, context, ref dynamicStorageSelection_IOWAUrl_DataAccessor_._OwaExternalAuthMethods_MaterializedValue_, ref dynamicStorageSelection_IOWAUrl_DataAccessor_._OwaExternalAuthMethods_ValueProvider_);
				return dynamicStorageSelection_IOWAUrl_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema7, 3, typeof(_DynamicStorageSelection_IOWAUrl_Implementation_), typeof(_DynamicStorageSelection_IOWAUrl_DataAccessor_), instanceProviderBuilder13);
			InstanceProviderBuilder instanceProviderBuilder14 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IOWAUrl_Implementation_ dataOnly_IOWAUrl_Implementation_ = new _DataOnly_IOWAUrl_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name8, ref dataOnly_IOWAUrl_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_OwaInternalAuthMethods, context, ref dataOnly_IOWAUrl_Implementation_._OwaInternalAuthMethods_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_OwaExternalAuthMethods, context, ref dataOnly_IOWAUrl_Implementation_._OwaExternalAuthMethods_MaterializedValue_);
				return dataOnly_IOWAUrl_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema7, 0, typeof(_DataOnly_IOWAUrl_Implementation_), typeof(_DataOnly_IOWAUrl_Implementation_), instanceProviderBuilder14);
			TypeSchema typeSchema8 = SchemaProvider.CreateTypeSchema<ICalendarIcalConversionSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name9 = SchemaProvider.CreateIdentityPropertySchema(typeSchema8, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_LocalTimeZoneReferenceForRecurrenceNeeded = SchemaProvider.CreateDataPropertySchema(typeSchema8, "LocalTimeZoneReferenceForRecurrenceNeeded", "local time zone reference needed when used with a recurrence rule", new ConcretePrimitiveScalarInfo<ICalendarIcalConversionSettings, bool>((ICalendarIcalConversionSettings vo) => vo.LocalTimeZoneReferenceForRecurrenceNeeded, null, null, null, 0), true, "false", null);
			InstanceProviderBuilder instanceProviderBuilder15 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ICalendarIcalConversionSettings_DataAccessor_ dynamicStorageSelection_ICalendarIcalConversionSettings_DataAccessor_ = new _DynamicStorageSelection_ICalendarIcalConversionSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name9, ref dynamicStorageSelection_ICalendarIcalConversionSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_LocalTimeZoneReferenceForRecurrenceNeeded, context, ref dynamicStorageSelection_ICalendarIcalConversionSettings_DataAccessor_._LocalTimeZoneReferenceForRecurrenceNeeded_MaterializedValue_, ref dynamicStorageSelection_ICalendarIcalConversionSettings_DataAccessor_._LocalTimeZoneReferenceForRecurrenceNeeded_ValueProvider_);
				return dynamicStorageSelection_ICalendarIcalConversionSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema8, 3, typeof(_DynamicStorageSelection_ICalendarIcalConversionSettings_Implementation_), typeof(_DynamicStorageSelection_ICalendarIcalConversionSettings_DataAccessor_), instanceProviderBuilder15);
			InstanceProviderBuilder instanceProviderBuilder16 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ICalendarIcalConversionSettings_Implementation_ dataOnly_ICalendarIcalConversionSettings_Implementation_ = new _DataOnly_ICalendarIcalConversionSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name9, ref dataOnly_ICalendarIcalConversionSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_LocalTimeZoneReferenceForRecurrenceNeeded, context, ref dataOnly_ICalendarIcalConversionSettings_Implementation_._LocalTimeZoneReferenceForRecurrenceNeeded_MaterializedValue_);
				return dataOnly_ICalendarIcalConversionSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema8, 0, typeof(_DataOnly_ICalendarIcalConversionSettings_Implementation_), typeof(_DataOnly_ICalendarIcalConversionSettings_Implementation_), instanceProviderBuilder16);
			TypeSchema typeSchema9 = SchemaProvider.CreateTypeSchema<ICalendarUpgradeSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name10 = SchemaProvider.CreateIdentityPropertySchema(typeSchema9, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_MinCalendarItemsForUpgrade = SchemaProvider.CreateDataPropertySchema(typeSchema9, "MinCalendarItemsForUpgrade", "Minimum number of calendar items required for upgrade by mailbox move.", new ConcretePrimitiveScalarInfo<ICalendarUpgradeSettings, int>((ICalendarUpgradeSettings vo) => vo.MinCalendarItemsForUpgrade, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder17 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ICalendarUpgradeSettings_DataAccessor_ dynamicStorageSelection_ICalendarUpgradeSettings_DataAccessor_ = new _DynamicStorageSelection_ICalendarUpgradeSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name10, ref dynamicStorageSelection_ICalendarUpgradeSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinCalendarItemsForUpgrade, context, ref dynamicStorageSelection_ICalendarUpgradeSettings_DataAccessor_._MinCalendarItemsForUpgrade_MaterializedValue_, ref dynamicStorageSelection_ICalendarUpgradeSettings_DataAccessor_._MinCalendarItemsForUpgrade_ValueProvider_);
				return dynamicStorageSelection_ICalendarUpgradeSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema9, 3, typeof(_DynamicStorageSelection_ICalendarUpgradeSettings_Implementation_), typeof(_DynamicStorageSelection_ICalendarUpgradeSettings_DataAccessor_), instanceProviderBuilder17);
			InstanceProviderBuilder instanceProviderBuilder18 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ICalendarUpgradeSettings_Implementation_ dataOnly_ICalendarUpgradeSettings_Implementation_ = new _DataOnly_ICalendarUpgradeSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name10, ref dataOnly_ICalendarUpgradeSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinCalendarItemsForUpgrade, context, ref dataOnly_ICalendarUpgradeSettings_Implementation_._MinCalendarItemsForUpgrade_MaterializedValue_);
				return dataOnly_ICalendarUpgradeSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema9, 0, typeof(_DataOnly_ICalendarUpgradeSettings_Implementation_), typeof(_DataOnly_ICalendarUpgradeSettings_Implementation_), instanceProviderBuilder18);
			TypeSchema typeSchema10 = SchemaProvider.CreateTypeSchema<IActiveManagerSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name11 = SchemaProvider.CreateIdentityPropertySchema(typeSchema10, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_DxStoreRunMode = SchemaProvider.CreateDataPropertySchema(typeSchema10, "DxStoreRunMode", "mode in which dxstore is configured to run", new ConcretePrimitiveScalarInfo<IActiveManagerSettings, DxStoreMode>((IActiveManagerSettings vo) => vo.DxStoreRunMode, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_DxStoreIsUseHttpForInstanceCommunication = SchemaProvider.CreateDataPropertySchema(typeSchema10, "DxStoreIsUseHttpForInstanceCommunication", "whether to use http for dxstore communication", new ConcretePrimitiveScalarInfo<IActiveManagerSettings, bool>((IActiveManagerSettings vo) => vo.DxStoreIsUseHttpForInstanceCommunication, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_DxStoreIsUseHttpForClientCommunication = SchemaProvider.CreateDataPropertySchema(typeSchema10, "DxStoreIsUseHttpForClientCommunication", "whether to use http for dxstore communication", new ConcretePrimitiveScalarInfo<IActiveManagerSettings, bool>((IActiveManagerSettings vo) => vo.DxStoreIsUseHttpForClientCommunication, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_DxStoreIsEncryptionEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema10, "DxStoreIsEncryptionEnabled", "whether to use encryption for dxstore communication", new ConcretePrimitiveScalarInfo<IActiveManagerSettings, bool>((IActiveManagerSettings vo) => vo.DxStoreIsEncryptionEnabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_DxStoreIsPeriodicFixupEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema10, "DxStoreIsPeriodicFixupEnabled", "whether periodic clusdb to dxstore fix up enabled", new ConcretePrimitiveScalarInfo<IActiveManagerSettings, bool>((IActiveManagerSettings vo) => vo.DxStoreIsPeriodicFixupEnabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_DxStoreIsUseBinarySerializerForClientCommunication = SchemaProvider.CreateDataPropertySchema(typeSchema10, "DxStoreIsUseBinarySerializerForClientCommunication", "whether to use binary serializer for client communication", new ConcretePrimitiveScalarInfo<IActiveManagerSettings, bool>((IActiveManagerSettings vo) => vo.DxStoreIsUseBinarySerializerForClientCommunication, null, null, null, 0), true, "false", null);
			InstanceProviderBuilder instanceProviderBuilder19 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IActiveManagerSettings_DataAccessor_ dynamicStorageSelection_IActiveManagerSettings_DataAccessor_ = new _DynamicStorageSelection_IActiveManagerSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name11, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<DxStoreMode>(propertySchema_DxStoreRunMode, context, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreRunMode_MaterializedValue_, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreRunMode_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_DxStoreIsUseHttpForInstanceCommunication, context, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsUseHttpForInstanceCommunication_MaterializedValue_, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsUseHttpForInstanceCommunication_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_DxStoreIsUseHttpForClientCommunication, context, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsUseHttpForClientCommunication_MaterializedValue_, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsUseHttpForClientCommunication_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_DxStoreIsEncryptionEnabled, context, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsEncryptionEnabled_MaterializedValue_, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsEncryptionEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_DxStoreIsPeriodicFixupEnabled, context, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsPeriodicFixupEnabled_MaterializedValue_, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsPeriodicFixupEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_DxStoreIsUseBinarySerializerForClientCommunication, context, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsUseBinarySerializerForClientCommunication_MaterializedValue_, ref dynamicStorageSelection_IActiveManagerSettings_DataAccessor_._DxStoreIsUseBinarySerializerForClientCommunication_ValueProvider_);
				return dynamicStorageSelection_IActiveManagerSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema10, 3, typeof(_DynamicStorageSelection_IActiveManagerSettings_Implementation_), typeof(_DynamicStorageSelection_IActiveManagerSettings_DataAccessor_), instanceProviderBuilder19);
			InstanceProviderBuilder instanceProviderBuilder20 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IActiveManagerSettings_Implementation_ dataOnly_IActiveManagerSettings_Implementation_ = new _DataOnly_IActiveManagerSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name11, ref dataOnly_IActiveManagerSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<DxStoreMode>(propertySchema_DxStoreRunMode, context, ref dataOnly_IActiveManagerSettings_Implementation_._DxStoreRunMode_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_DxStoreIsUseHttpForInstanceCommunication, context, ref dataOnly_IActiveManagerSettings_Implementation_._DxStoreIsUseHttpForInstanceCommunication_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_DxStoreIsUseHttpForClientCommunication, context, ref dataOnly_IActiveManagerSettings_Implementation_._DxStoreIsUseHttpForClientCommunication_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_DxStoreIsEncryptionEnabled, context, ref dataOnly_IActiveManagerSettings_Implementation_._DxStoreIsEncryptionEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_DxStoreIsPeriodicFixupEnabled, context, ref dataOnly_IActiveManagerSettings_Implementation_._DxStoreIsPeriodicFixupEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_DxStoreIsUseBinarySerializerForClientCommunication, context, ref dataOnly_IActiveManagerSettings_Implementation_._DxStoreIsUseBinarySerializerForClientCommunication_MaterializedValue_);
				return dataOnly_IActiveManagerSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema10, 0, typeof(_DataOnly_IActiveManagerSettings_Implementation_), typeof(_DataOnly_IActiveManagerSettings_Implementation_), instanceProviderBuilder20);
			TypeSchema typeSchema11 = SchemaProvider.CreateTypeSchema<ICacheExpiryTimeInMinutes>("Client Access Rules Cache Expiry Time", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name12 = SchemaProvider.CreateIdentityPropertySchema(typeSchema11, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Value2 = SchemaProvider.CreateDataPropertySchema(typeSchema11, "Value", string.Empty, new ConcretePrimitiveScalarInfo<ICacheExpiryTimeInMinutes, int>((ICacheExpiryTimeInMinutes vo) => vo.Value, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder21 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ICacheExpiryTimeInMinutes_DataAccessor_ dynamicStorageSelection_ICacheExpiryTimeInMinutes_DataAccessor_ = new _DynamicStorageSelection_ICacheExpiryTimeInMinutes_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name12, ref dynamicStorageSelection_ICacheExpiryTimeInMinutes_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_Value2, context, ref dynamicStorageSelection_ICacheExpiryTimeInMinutes_DataAccessor_._Value_MaterializedValue_, ref dynamicStorageSelection_ICacheExpiryTimeInMinutes_DataAccessor_._Value_ValueProvider_);
				return dynamicStorageSelection_ICacheExpiryTimeInMinutes_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema11, 3, typeof(_DynamicStorageSelection_ICacheExpiryTimeInMinutes_Implementation_), typeof(_DynamicStorageSelection_ICacheExpiryTimeInMinutes_DataAccessor_), instanceProviderBuilder21);
			InstanceProviderBuilder instanceProviderBuilder22 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ICacheExpiryTimeInMinutes_Implementation_ dataOnly_ICacheExpiryTimeInMinutes_Implementation_ = new _DataOnly_ICacheExpiryTimeInMinutes_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name12, ref dataOnly_ICacheExpiryTimeInMinutes_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_Value2, context, ref dataOnly_ICacheExpiryTimeInMinutes_Implementation_._Value_MaterializedValue_);
				return dataOnly_ICacheExpiryTimeInMinutes_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema11, 0, typeof(_DataOnly_ICacheExpiryTimeInMinutes_Implementation_), typeof(_DataOnly_ICacheExpiryTimeInMinutes_Implementation_), instanceProviderBuilder22);
			TypeSchema typeSchema12 = SchemaProvider.CreateTypeSchema<ICmdletSettings>(".flight.ini CmdletInfra.settings.ini +-------+ +-------------------------+ +--------------------------------+ | user1 |.......| flight1 |...........| cmdlet1 | +-------+ .. | Enabled&user:user1=true |. | Enabled=true | .. +-------------------------+ .. | AllFlightingParams=p1,p2 | .. . | Params0&flight1:true=p1,p2 | .. .. | | .. . | | +-------+ +-------------------------+ . | | | user2 |.......| flight2 | .. | cmdlet2 | +-------+ | Enabled&user:user1=true |...........| Enabled=true | | Enabled&user:user2=true | | AllFlightingParams=p1,p2,p3,p4 | +-------------------------+ | Params0&flight1:true=p1,p2 | | Params1&flight2:true=p2,p3 | +--------------------------------+ With the flight.ini and settings.ini above, we get the following outcomes: user1 is on both flight1 and flight2, so s/he can use cmdlet1 + p1, p2, and cmdlet2 + p1, p2, p3. user2 is on flight2, so s/he can only use cmdlet1, and cmdlet2 + p2, p3.", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name13 = SchemaProvider.CreateIdentityPropertySchema(typeSchema12, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Enabled3 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Enabled", string.Empty, new ConcretePrimitiveScalarInfo<ICmdletSettings, bool>((ICmdletSettings vo) => vo.Enabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_AllFlightingParams = SchemaProvider.CreateDataPropertySchema(typeSchema12, "AllFlightingParams", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.AllFlightingParams, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params0 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params0", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params0, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params1 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params1", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params1, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params2 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params2", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params2, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params3 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params3", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params3, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params4 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params4", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params4, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params5 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params5", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params5, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params6 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params6", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params6, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params7 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params7", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params7, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params8 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params8", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params8, null, null, null), true, null, null);
			DataPropertySchema propertySchema_Params9 = SchemaProvider.CreateDataPropertySchema(typeSchema12, "Params9", string.Empty, new ConcretePrimitiveListInfo<ICmdletSettings, string>((ICmdletSettings vo) => vo.Params9, null, null, null), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder23 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ICmdletSettings_DataAccessor_ dynamicStorageSelection_ICmdletSettings_DataAccessor_ = new _DynamicStorageSelection_ICmdletSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name13, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled3, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Enabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_AllFlightingParams, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._AllFlightingParams_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._AllFlightingParams_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params0, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params0_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params0_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params1, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params1_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params1_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params2, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params2_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params2_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params3, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params3_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params3_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params4, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params4_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params4_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params5, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params5_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params5_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params6, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params6_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params6_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params7, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params7_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params7_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params8, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params8_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params8_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_Params9, context, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params9_MaterializedValue_, ref dynamicStorageSelection_ICmdletSettings_DataAccessor_._Params9_ValueProvider_);
				return dynamicStorageSelection_ICmdletSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema12, 3, typeof(_DynamicStorageSelection_ICmdletSettings_Implementation_), typeof(_DynamicStorageSelection_ICmdletSettings_DataAccessor_), instanceProviderBuilder23);
			InstanceProviderBuilder instanceProviderBuilder24 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ICmdletSettings_Implementation_ dataOnly_ICmdletSettings_Implementation_ = new _DataOnly_ICmdletSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name13, ref dataOnly_ICmdletSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled3, context, ref dataOnly_ICmdletSettings_Implementation_._Enabled_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_AllFlightingParams, context, ref dataOnly_ICmdletSettings_Implementation_._AllFlightingParams_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params0, context, ref dataOnly_ICmdletSettings_Implementation_._Params0_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params1, context, ref dataOnly_ICmdletSettings_Implementation_._Params1_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params2, context, ref dataOnly_ICmdletSettings_Implementation_._Params2_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params3, context, ref dataOnly_ICmdletSettings_Implementation_._Params3_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params4, context, ref dataOnly_ICmdletSettings_Implementation_._Params4_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params5, context, ref dataOnly_ICmdletSettings_Implementation_._Params5_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params6, context, ref dataOnly_ICmdletSettings_Implementation_._Params6_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params7, context, ref dataOnly_ICmdletSettings_Implementation_._Params7_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params8, context, ref dataOnly_ICmdletSettings_Implementation_._Params8_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Params9, context, ref dataOnly_ICmdletSettings_Implementation_._Params9_MaterializedValue_);
				return dataOnly_ICmdletSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema12, 0, typeof(_DataOnly_ICmdletSettings_Implementation_), typeof(_DataOnly_ICmdletSettings_Implementation_), instanceProviderBuilder24);
			TypeSchema typeSchema13 = SchemaProvider.CreateTypeSchema<IDelegatedSetupRoleGroupSettings>("Delegated Setup Role Group Setting", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name14 = SchemaProvider.CreateIdentityPropertySchema(typeSchema13, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_DelegatedSetupRoleGroupValue = SchemaProvider.CreateDataPropertySchema(typeSchema13, "DelegatedSetupRoleGroupValue", string.Empty, new ConcretePrimitiveScalarInfo<IDelegatedSetupRoleGroupSettings, DelegatedSetupRoleGroupValueEnum>((IDelegatedSetupRoleGroupSettings vo) => vo.DelegatedSetupRoleGroupValue, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder25 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IDelegatedSetupRoleGroupSettings_DataAccessor_ dynamicStorageSelection_IDelegatedSetupRoleGroupSettings_DataAccessor_ = new _DynamicStorageSelection_IDelegatedSetupRoleGroupSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name14, ref dynamicStorageSelection_IDelegatedSetupRoleGroupSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<DelegatedSetupRoleGroupValueEnum>(propertySchema_DelegatedSetupRoleGroupValue, context, ref dynamicStorageSelection_IDelegatedSetupRoleGroupSettings_DataAccessor_._DelegatedSetupRoleGroupValue_MaterializedValue_, ref dynamicStorageSelection_IDelegatedSetupRoleGroupSettings_DataAccessor_._DelegatedSetupRoleGroupValue_ValueProvider_);
				return dynamicStorageSelection_IDelegatedSetupRoleGroupSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema13, 3, typeof(_DynamicStorageSelection_IDelegatedSetupRoleGroupSettings_Implementation_), typeof(_DynamicStorageSelection_IDelegatedSetupRoleGroupSettings_DataAccessor_), instanceProviderBuilder25);
			InstanceProviderBuilder instanceProviderBuilder26 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IDelegatedSetupRoleGroupSettings_Implementation_ dataOnly_IDelegatedSetupRoleGroupSettings_Implementation_ = new _DataOnly_IDelegatedSetupRoleGroupSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name14, ref dataOnly_IDelegatedSetupRoleGroupSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<DelegatedSetupRoleGroupValueEnum>(propertySchema_DelegatedSetupRoleGroupValue, context, ref dataOnly_IDelegatedSetupRoleGroupSettings_Implementation_._DelegatedSetupRoleGroupValue_MaterializedValue_);
				return dataOnly_IDelegatedSetupRoleGroupSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema13, 0, typeof(_DataOnly_IDelegatedSetupRoleGroupSettings_Implementation_), typeof(_DataOnly_IDelegatedSetupRoleGroupSettings_Implementation_), instanceProviderBuilder26);
			TypeSchema typeSchema14 = SchemaProvider.CreateTypeSchema<IEacWebRequest>("Eac WebService controlles the explosion of eac ddi services for partner application request, for example, Oauth request from O365", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name15 = SchemaProvider.CreateIdentityPropertySchema(typeSchema14, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Request = SchemaProvider.CreateDataPropertySchema(typeSchema14, "Request", "The server path of given webservices", new ConcretePrimitiveScalarInfo<IEacWebRequest, string>((IEacWebRequest vo) => vo.Request, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_Enabled4 = SchemaProvider.CreateDataPropertySchema(typeSchema14, "Enabled", "Control visibility", new ConcretePrimitiveScalarInfo<IEacWebRequest, bool>((IEacWebRequest vo) => vo.Enabled, null, null, null, 0), true, "false", null);
			InstanceProviderBuilder instanceProviderBuilder27 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IEacWebRequest_DataAccessor_ dynamicStorageSelection_IEacWebRequest_DataAccessor_ = new _DynamicStorageSelection_IEacWebRequest_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name15, ref dynamicStorageSelection_IEacWebRequest_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_Request, context, ref dynamicStorageSelection_IEacWebRequest_DataAccessor_._Request_MaterializedValue_, ref dynamicStorageSelection_IEacWebRequest_DataAccessor_._Request_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled4, context, ref dynamicStorageSelection_IEacWebRequest_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IEacWebRequest_DataAccessor_._Enabled_ValueProvider_);
				return dynamicStorageSelection_IEacWebRequest_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema14, 3, typeof(_DynamicStorageSelection_IEacWebRequest_Implementation_), typeof(_DynamicStorageSelection_IEacWebRequest_DataAccessor_), instanceProviderBuilder27);
			InstanceProviderBuilder instanceProviderBuilder28 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IEacWebRequest_Implementation_ dataOnly_IEacWebRequest_Implementation_ = new _DataOnly_IEacWebRequest_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name15, ref dataOnly_IEacWebRequest_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Request, context, ref dataOnly_IEacWebRequest_Implementation_._Request_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled4, context, ref dataOnly_IEacWebRequest_Implementation_._Enabled_MaterializedValue_);
				return dataOnly_IEacWebRequest_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema14, 0, typeof(_DataOnly_IEacWebRequest_Implementation_), typeof(_DataOnly_IEacWebRequest_Implementation_), instanceProviderBuilder28);
			TypeSchema typeSchema15 = SchemaProvider.CreateTypeSchema<IFlight>("Flight structure.", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, null);
			IdentityPropertySchema propertySchema_Name16 = SchemaProvider.CreateIdentityPropertySchema(typeSchema15, "Name", "Flight name.", new ConcretePrimitiveScalarInfo<IFlight, string>((IFlight vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Enabled5 = SchemaProvider.CreateDataPropertySchema(typeSchema15, "Enabled", "Indicates if a flight is enabled.", new ConcretePrimitiveScalarInfo<IFlight, bool>((IFlight vo) => vo.Enabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_Rotate = SchemaProvider.CreateDataPropertySchema(typeSchema15, "Rotate", "Specifies what rotations should be used for this flight.", new ConcretePrimitiveScalarInfo<IFlight, string>((IFlight vo) => vo.Rotate, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_Ramp = SchemaProvider.CreateDataPropertySchema(typeSchema15, "Ramp", "Specifies what ramp should be used for this flight.", new ConcretePrimitiveScalarInfo<IFlight, string>((IFlight vo) => vo.Ramp, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_RampSeed = SchemaProvider.CreateDataPropertySchema(typeSchema15, "RampSeed", "Specifies what ramp seed should be used for this flight.", new ConcretePrimitiveScalarInfo<IFlight, string>((IFlight vo) => vo.RampSeed, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder29 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IFlight_DataAccessor_ dynamicStorageSelection_IFlight_DataAccessor_ = new _DynamicStorageSelection_IFlight_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name16, ref dynamicStorageSelection_IFlight_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled5, context, ref dynamicStorageSelection_IFlight_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IFlight_DataAccessor_._Enabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_Rotate, context, ref dynamicStorageSelection_IFlight_DataAccessor_._Rotate_MaterializedValue_, ref dynamicStorageSelection_IFlight_DataAccessor_._Rotate_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_Ramp, context, ref dynamicStorageSelection_IFlight_DataAccessor_._Ramp_MaterializedValue_, ref dynamicStorageSelection_IFlight_DataAccessor_._Ramp_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_RampSeed, context, ref dynamicStorageSelection_IFlight_DataAccessor_._RampSeed_MaterializedValue_, ref dynamicStorageSelection_IFlight_DataAccessor_._RampSeed_ValueProvider_);
				return dynamicStorageSelection_IFlight_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema15, 3, typeof(_DynamicStorageSelection_IFlight_Implementation_), typeof(_DynamicStorageSelection_IFlight_DataAccessor_), instanceProviderBuilder29);
			InstanceProviderBuilder instanceProviderBuilder30 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IFlight_Implementation_ dataOnly_IFlight_Implementation_ = new _DataOnly_IFlight_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name16, ref dataOnly_IFlight_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled5, context, ref dataOnly_IFlight_Implementation_._Enabled_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Rotate, context, ref dataOnly_IFlight_Implementation_._Rotate_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Ramp, context, ref dataOnly_IFlight_Implementation_._Ramp_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_RampSeed, context, ref dataOnly_IFlight_Implementation_._RampSeed_MaterializedValue_);
				return dataOnly_IFlight_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema15, 0, typeof(_DataOnly_IFlight_Implementation_), typeof(_DataOnly_IFlight_Implementation_), instanceProviderBuilder30);
			TypeSchema typeSchema16 = SchemaProvider.CreateTypeSchema<IInlineExploreSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name17 = SchemaProvider.CreateIdentityPropertySchema(typeSchema16, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Content = SchemaProvider.CreateDataPropertySchema(typeSchema16, "Content", string.Empty, new ConcretePrimitiveScalarInfo<IInlineExploreSettings, string>((IInlineExploreSettings vo) => vo.Content, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder31 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IInlineExploreSettings_DataAccessor_ dynamicStorageSelection_IInlineExploreSettings_DataAccessor_ = new _DynamicStorageSelection_IInlineExploreSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name17, ref dynamicStorageSelection_IInlineExploreSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_Content, context, ref dynamicStorageSelection_IInlineExploreSettings_DataAccessor_._Content_MaterializedValue_, ref dynamicStorageSelection_IInlineExploreSettings_DataAccessor_._Content_ValueProvider_);
				return dynamicStorageSelection_IInlineExploreSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema16, 3, typeof(_DynamicStorageSelection_IInlineExploreSettings_Implementation_), typeof(_DynamicStorageSelection_IInlineExploreSettings_DataAccessor_), instanceProviderBuilder31);
			InstanceProviderBuilder instanceProviderBuilder32 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IInlineExploreSettings_Implementation_ dataOnly_IInlineExploreSettings_Implementation_ = new _DataOnly_IInlineExploreSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name17, ref dataOnly_IInlineExploreSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Content, context, ref dataOnly_IInlineExploreSettings_Implementation_._Content_MaterializedValue_);
				return dataOnly_IInlineExploreSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema16, 0, typeof(_DataOnly_IInlineExploreSettings_Implementation_), typeof(_DataOnly_IInlineExploreSettings_Implementation_), instanceProviderBuilder32);
			TypeSchema typeSchema17 = SchemaProvider.CreateTypeSchema<ISettingsValue>("Structure to hold arbitrary settings values as a string", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name18 = SchemaProvider.CreateIdentityPropertySchema(typeSchema17, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Value = SchemaProvider.CreateDataPropertySchema(typeSchema17, "Value", "A string value", new ConcretePrimitiveScalarInfo<ISettingsValue, string>((ISettingsValue vo) => vo.Value, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder33 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ISettingsValue_DataAccessor_ dynamicStorageSelection_ISettingsValue_DataAccessor_ = new _DynamicStorageSelection_ISettingsValue_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name18, ref dynamicStorageSelection_ISettingsValue_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_Value, context, ref dynamicStorageSelection_ISettingsValue_DataAccessor_._Value_MaterializedValue_, ref dynamicStorageSelection_ISettingsValue_DataAccessor_._Value_ValueProvider_);
				return dynamicStorageSelection_ISettingsValue_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema17, 3, typeof(_DynamicStorageSelection_ISettingsValue_Implementation_), typeof(_DynamicStorageSelection_ISettingsValue_DataAccessor_), instanceProviderBuilder33);
			InstanceProviderBuilder instanceProviderBuilder34 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ISettingsValue_Implementation_ dataOnly_ISettingsValue_Implementation_ = new _DataOnly_ISettingsValue_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name18, ref dataOnly_ISettingsValue_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Value, context, ref dataOnly_ISettingsValue_Implementation_._Value_MaterializedValue_);
				return dataOnly_ISettingsValue_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema17, 0, typeof(_DataOnly_ISettingsValue_Implementation_), typeof(_DataOnly_ISettingsValue_Implementation_), instanceProviderBuilder34);
			TypeSchema typeSchema18 = SchemaProvider.CreateTypeSchema<ITeam>("Team definition.", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, null);
			IdentityPropertySchema propertySchema_Name19 = SchemaProvider.CreateIdentityPropertySchema(typeSchema18, "Name", "Team name.", new ConcretePrimitiveScalarInfo<ITeam, string>((ITeam vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_IsMember = SchemaProvider.CreateDataPropertySchema(typeSchema18, "IsMember", "Indicates if a user is a member of a team.", new ConcretePrimitiveScalarInfo<ITeam, bool>((ITeam vo) => vo.IsMember, null, null, null, 0), true, "false", null);
			InstanceProviderBuilder instanceProviderBuilder35 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ITeam_DataAccessor_ dynamicStorageSelection_ITeam_DataAccessor_ = new _DynamicStorageSelection_ITeam_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name19, ref dynamicStorageSelection_ITeam_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_IsMember, context, ref dynamicStorageSelection_ITeam_DataAccessor_._IsMember_MaterializedValue_, ref dynamicStorageSelection_ITeam_DataAccessor_._IsMember_ValueProvider_);
				return dynamicStorageSelection_ITeam_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema18, 3, typeof(_DynamicStorageSelection_ITeam_Implementation_), typeof(_DynamicStorageSelection_ITeam_DataAccessor_), instanceProviderBuilder35);
			InstanceProviderBuilder instanceProviderBuilder36 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ITeam_Implementation_ dataOnly_ITeam_Implementation_ = new _DataOnly_ITeam_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name19, ref dataOnly_ITeam_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_IsMember, context, ref dataOnly_ITeam_Implementation_._IsMember_MaterializedValue_);
				return dataOnly_ITeam_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema18, 0, typeof(_DataOnly_ITeam_Implementation_), typeof(_DataOnly_ITeam_Implementation_), instanceProviderBuilder36);
			TypeSchema typeSchema19 = SchemaProvider.CreateTypeSchema<IUrl>("Url controls the visibility of web pages in EAC", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name20 = SchemaProvider.CreateIdentityPropertySchema(typeSchema19, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Url2 = SchemaProvider.CreateDataPropertySchema(typeSchema19, "Url", "The original virtual URL that exposed to user", new ConcretePrimitiveScalarInfo<IUrl, string>((IUrl vo) => vo.Url, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_Enabled6 = SchemaProvider.CreateDataPropertySchema(typeSchema19, "Enabled", "Control visibility", new ConcretePrimitiveScalarInfo<IUrl, bool>((IUrl vo) => vo.Enabled, null, null, null, 0), true, "false", null);
			InstanceProviderBuilder instanceProviderBuilder37 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IUrl_DataAccessor_ dynamicStorageSelection_IUrl_DataAccessor_ = new _DynamicStorageSelection_IUrl_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name20, ref dynamicStorageSelection_IUrl_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_Url2, context, ref dynamicStorageSelection_IUrl_DataAccessor_._Url_MaterializedValue_, ref dynamicStorageSelection_IUrl_DataAccessor_._Url_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled6, context, ref dynamicStorageSelection_IUrl_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IUrl_DataAccessor_._Enabled_ValueProvider_);
				return dynamicStorageSelection_IUrl_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema19, 3, typeof(_DynamicStorageSelection_IUrl_Implementation_), typeof(_DynamicStorageSelection_IUrl_DataAccessor_), instanceProviderBuilder37);
			InstanceProviderBuilder instanceProviderBuilder38 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IUrl_Implementation_ dataOnly_IUrl_Implementation_ = new _DataOnly_IUrl_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name20, ref dataOnly_IUrl_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Url2, context, ref dataOnly_IUrl_Implementation_._Url_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled6, context, ref dataOnly_IUrl_Implementation_._Enabled_MaterializedValue_);
				return dataOnly_IUrl_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema19, 0, typeof(_DataOnly_IUrl_Implementation_), typeof(_DataOnly_IUrl_Implementation_), instanceProviderBuilder38);
			TypeSchema typeSchema20 = SchemaProvider.CreateTypeSchema<IUrlMapping>("UrlMapping used in EAC indicate that whether a server relative Url will be remapped to another path or not", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name21 = SchemaProvider.CreateIdentityPropertySchema(typeSchema20, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Url = SchemaProvider.CreateDataPropertySchema(typeSchema20, "Url", "The original virtual URL that exposed to user", new ConcretePrimitiveScalarInfo<IUrlMapping, string>((IUrlMapping vo) => vo.Url, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_RemapTo = SchemaProvider.CreateDataPropertySchema(typeSchema20, "RemapTo", "The remapped Url", new ConcretePrimitiveScalarInfo<IUrlMapping, string>((IUrlMapping vo) => vo.RemapTo, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder39 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IUrlMapping_DataAccessor_ dynamicStorageSelection_IUrlMapping_DataAccessor_ = new _DynamicStorageSelection_IUrlMapping_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name21, ref dynamicStorageSelection_IUrlMapping_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_Url, context, ref dynamicStorageSelection_IUrlMapping_DataAccessor_._Url_MaterializedValue_, ref dynamicStorageSelection_IUrlMapping_DataAccessor_._Url_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_RemapTo, context, ref dynamicStorageSelection_IUrlMapping_DataAccessor_._RemapTo_MaterializedValue_, ref dynamicStorageSelection_IUrlMapping_DataAccessor_._RemapTo_ValueProvider_);
				return dynamicStorageSelection_IUrlMapping_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema20, 3, typeof(_DynamicStorageSelection_IUrlMapping_Implementation_), typeof(_DynamicStorageSelection_IUrlMapping_DataAccessor_), instanceProviderBuilder39);
			InstanceProviderBuilder instanceProviderBuilder40 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IUrlMapping_Implementation_ dataOnly_IUrlMapping_Implementation_ = new _DataOnly_IUrlMapping_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name21, ref dataOnly_IUrlMapping_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Url, context, ref dataOnly_IUrlMapping_Implementation_._Url_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_RemapTo, context, ref dataOnly_IUrlMapping_Implementation_._RemapTo_MaterializedValue_);
				return dataOnly_IUrlMapping_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema20, 0, typeof(_DataOnly_IUrlMapping_Implementation_), typeof(_DataOnly_IUrlMapping_Implementation_), instanceProviderBuilder40);
			TypeSchema typeSchema21 = SchemaProvider.CreateTypeSchema<IVersion>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name22 = SchemaProvider.CreateIdentityPropertySchema(typeSchema21, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_VersionNum = SchemaProvider.CreateDataPropertySchema(typeSchema21, "VersionNum", string.Empty, new ConcretePrimitiveScalarInfo<IVersion, string>((IVersion vo) => vo.VersionNum, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder41 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IVersion_DataAccessor_ dynamicStorageSelection_IVersion_DataAccessor_ = new _DynamicStorageSelection_IVersion_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name22, ref dynamicStorageSelection_IVersion_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_VersionNum, context, ref dynamicStorageSelection_IVersion_DataAccessor_._VersionNum_MaterializedValue_, ref dynamicStorageSelection_IVersion_DataAccessor_._VersionNum_ValueProvider_);
				return dynamicStorageSelection_IVersion_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema21, 3, typeof(_DynamicStorageSelection_IVersion_Implementation_), typeof(_DynamicStorageSelection_IVersion_DataAccessor_), instanceProviderBuilder41);
			InstanceProviderBuilder instanceProviderBuilder42 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IVersion_Implementation_ dataOnly_IVersion_Implementation_ = new _DataOnly_IVersion_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name22, ref dataOnly_IVersion_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_VersionNum, context, ref dataOnly_IVersion_Implementation_._VersionNum_MaterializedValue_);
				return dataOnly_IVersion_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema21, 0, typeof(_DataOnly_IVersion_Implementation_), typeof(_DataOnly_IVersion_Implementation_), instanceProviderBuilder42);
			TypeSchema typeSchema22 = SchemaProvider.CreateTypeSchema<IHostSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name23 = SchemaProvider.CreateIdentityPropertySchema(typeSchema22, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Endpoint = SchemaProvider.CreateDataPropertySchema(typeSchema22, "Endpoint", "URL specifying the EndPoint where the holiday calendars together with version information are stored.", new ConcretePrimitiveScalarInfo<IHostSettings, string>((IHostSettings vo) => vo.Endpoint, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_Timeout = SchemaProvider.CreateDataPropertySchema(typeSchema22, "Timeout", "The Timeout applied when fetching information about the available calendars at the given end point.", new ConcretePrimitiveScalarInfo<IHostSettings, int>((IHostSettings vo) => vo.Timeout, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder43 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IHostSettings_DataAccessor_ dynamicStorageSelection_IHostSettings_DataAccessor_ = new _DynamicStorageSelection_IHostSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name23, ref dynamicStorageSelection_IHostSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_Endpoint, context, ref dynamicStorageSelection_IHostSettings_DataAccessor_._Endpoint_MaterializedValue_, ref dynamicStorageSelection_IHostSettings_DataAccessor_._Endpoint_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_Timeout, context, ref dynamicStorageSelection_IHostSettings_DataAccessor_._Timeout_MaterializedValue_, ref dynamicStorageSelection_IHostSettings_DataAccessor_._Timeout_ValueProvider_);
				return dynamicStorageSelection_IHostSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema22, 3, typeof(_DynamicStorageSelection_IHostSettings_Implementation_), typeof(_DynamicStorageSelection_IHostSettings_DataAccessor_), instanceProviderBuilder43);
			InstanceProviderBuilder instanceProviderBuilder44 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IHostSettings_Implementation_ dataOnly_IHostSettings_Implementation_ = new _DataOnly_IHostSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name23, ref dataOnly_IHostSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_Endpoint, context, ref dataOnly_IHostSettings_Implementation_._Endpoint_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_Timeout, context, ref dataOnly_IHostSettings_Implementation_._Timeout_MaterializedValue_);
				return dataOnly_IHostSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema22, 0, typeof(_DataOnly_IHostSettings_Implementation_), typeof(_DataOnly_IHostSettings_Implementation_), instanceProviderBuilder44);
			TypeSchema typeSchema23 = SchemaProvider.CreateTypeSchema<IClutterDataSelectionSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name24 = SchemaProvider.CreateIdentityPropertySchema(typeSchema23, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_MaxFolderCount = SchemaProvider.CreateDataPropertySchema(typeSchema23, "MaxFolderCount", "Max number of folders to query", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.MaxFolderCount, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_BatchSizeForTrainedModel = SchemaProvider.CreateDataPropertySchema(typeSchema23, "BatchSizeForTrainedModel", "Max number of messages to include in training.", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.BatchSizeForTrainedModel, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_BatchSizeForDefaultModel = SchemaProvider.CreateDataPropertySchema(typeSchema23, "BatchSizeForDefaultModel", "Total number of Items to fetch from mailbox when the model is default", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.BatchSizeForDefaultModel, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxInboxFolderProportion = SchemaProvider.CreateDataPropertySchema(typeSchema23, "MaxInboxFolderProportion", "Max proportion of messages to pick from Inbox", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.MaxInboxFolderProportion, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxDeletedFolderProportion = SchemaProvider.CreateDataPropertySchema(typeSchema23, "MaxDeletedFolderProportion", "Max proportion of messages to pick from Deleted Items", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.MaxDeletedFolderProportion, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxOtherFolderProportion = SchemaProvider.CreateDataPropertySchema(typeSchema23, "MaxOtherFolderProportion", "Max proportion of messages to pick from other folders", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.MaxOtherFolderProportion, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MinRespondActionShare = SchemaProvider.CreateDataPropertySchema(typeSchema23, "MinRespondActionShare", "Min action share for respond", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.MinRespondActionShare, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MinIgnoreActionShare = SchemaProvider.CreateDataPropertySchema(typeSchema23, "MinIgnoreActionShare", "Min action share for ignore", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.MinIgnoreActionShare, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxIgnoreActionShare = SchemaProvider.CreateDataPropertySchema(typeSchema23, "MaxIgnoreActionShare", "Max action share for ignore", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.MaxIgnoreActionShare, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_NumberOfMonthsToIncludeInRetrospectiveTraining = SchemaProvider.CreateDataPropertySchema(typeSchema23, "NumberOfMonthsToIncludeInRetrospectiveTraining", "Number of months to include in retrospective training", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.NumberOfMonthsToIncludeInRetrospectiveTraining, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_NumberOfDaysToSkipFromCurrentForTraining = SchemaProvider.CreateDataPropertySchema(typeSchema23, "NumberOfDaysToSkipFromCurrentForTraining", "Number of days to skip from current for picking the training window", new ConcretePrimitiveScalarInfo<IClutterDataSelectionSettings, int>((IClutterDataSelectionSettings vo) => vo.NumberOfDaysToSkipFromCurrentForTraining, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder45 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_ dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_ = new _DynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name24, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxFolderCount, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxFolderCount_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxFolderCount_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_BatchSizeForTrainedModel, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._BatchSizeForTrainedModel_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._BatchSizeForTrainedModel_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_BatchSizeForDefaultModel, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._BatchSizeForDefaultModel_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._BatchSizeForDefaultModel_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxInboxFolderProportion, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxInboxFolderProportion_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxInboxFolderProportion_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxDeletedFolderProportion, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxDeletedFolderProportion_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxDeletedFolderProportion_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxOtherFolderProportion, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxOtherFolderProportion_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxOtherFolderProportion_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinRespondActionShare, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MinRespondActionShare_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MinRespondActionShare_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinIgnoreActionShare, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MinIgnoreActionShare_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MinIgnoreActionShare_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxIgnoreActionShare, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxIgnoreActionShare_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._MaxIgnoreActionShare_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_NumberOfMonthsToIncludeInRetrospectiveTraining, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._NumberOfMonthsToIncludeInRetrospectiveTraining_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._NumberOfMonthsToIncludeInRetrospectiveTraining_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_NumberOfDaysToSkipFromCurrentForTraining, context, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._NumberOfDaysToSkipFromCurrentForTraining_MaterializedValue_, ref dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_._NumberOfDaysToSkipFromCurrentForTraining_ValueProvider_);
				return dynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema23, 3, typeof(_DynamicStorageSelection_IClutterDataSelectionSettings_Implementation_), typeof(_DynamicStorageSelection_IClutterDataSelectionSettings_DataAccessor_), instanceProviderBuilder45);
			InstanceProviderBuilder instanceProviderBuilder46 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IClutterDataSelectionSettings_Implementation_ dataOnly_IClutterDataSelectionSettings_Implementation_ = new _DataOnly_IClutterDataSelectionSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name24, ref dataOnly_IClutterDataSelectionSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxFolderCount, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._MaxFolderCount_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_BatchSizeForTrainedModel, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._BatchSizeForTrainedModel_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_BatchSizeForDefaultModel, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._BatchSizeForDefaultModel_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxInboxFolderProportion, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._MaxInboxFolderProportion_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxDeletedFolderProportion, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._MaxDeletedFolderProportion_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxOtherFolderProportion, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._MaxOtherFolderProportion_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinRespondActionShare, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._MinRespondActionShare_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinIgnoreActionShare, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._MinIgnoreActionShare_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxIgnoreActionShare, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._MaxIgnoreActionShare_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_NumberOfMonthsToIncludeInRetrospectiveTraining, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._NumberOfMonthsToIncludeInRetrospectiveTraining_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_NumberOfDaysToSkipFromCurrentForTraining, context, ref dataOnly_IClutterDataSelectionSettings_Implementation_._NumberOfDaysToSkipFromCurrentForTraining_MaterializedValue_);
				return dataOnly_IClutterDataSelectionSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema23, 0, typeof(_DataOnly_IClutterDataSelectionSettings_Implementation_), typeof(_DataOnly_IClutterDataSelectionSettings_Implementation_), instanceProviderBuilder46);
			TypeSchema typeSchema24 = SchemaProvider.CreateTypeSchema<IClutterModelConfigurationSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name25 = SchemaProvider.CreateIdentityPropertySchema(typeSchema24, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_MaxModelVersion = SchemaProvider.CreateDataPropertySchema(typeSchema24, "MaxModelVersion", "Maximum supported server model version (unless blocked)", new ConcretePrimitiveScalarInfo<IClutterModelConfigurationSettings, int>((IClutterModelConfigurationSettings vo) => vo.MaxModelVersion, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MinModelVersion = SchemaProvider.CreateDataPropertySchema(typeSchema24, "MinModelVersion", "Minimum supported server model version (unless blocked)", new ConcretePrimitiveScalarInfo<IClutterModelConfigurationSettings, int>((IClutterModelConfigurationSettings vo) => vo.MinModelVersion, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_NumberOfVersionCrumbsToRecord = SchemaProvider.CreateDataPropertySchema(typeSchema24, "NumberOfVersionCrumbsToRecord", "Number of server model versions to record as part of the model version bread crumb property", new ConcretePrimitiveScalarInfo<IClutterModelConfigurationSettings, int>((IClutterModelConfigurationSettings vo) => vo.NumberOfVersionCrumbsToRecord, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_AllowTrainingOnMutipleModelVersions = SchemaProvider.CreateDataPropertySchema(typeSchema24, "AllowTrainingOnMutipleModelVersions", "True to allow training on multiple model version. False to support only training on the current model version", new ConcretePrimitiveScalarInfo<IClutterModelConfigurationSettings, bool>((IClutterModelConfigurationSettings vo) => vo.AllowTrainingOnMutipleModelVersions, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_NumberOfModelVersionToTrain = SchemaProvider.CreateDataPropertySchema(typeSchema24, "NumberOfModelVersionToTrain", "Number of server model versions to train. Selected model versions range from current Server model version to minimum supported model version", new ConcretePrimitiveScalarInfo<IClutterModelConfigurationSettings, int>((IClutterModelConfigurationSettings vo) => vo.NumberOfModelVersionToTrain, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_BlockedModelVersions = SchemaProvider.CreateDataPropertySchema(typeSchema24, "BlockedModelVersions", "Enumeration of blocked model versions. These versions will not be used for classification or training even if they fall in the supported range.", new ConcretePrimitiveListInfo<IClutterModelConfigurationSettings, int>((IClutterModelConfigurationSettings vo) => vo.BlockedModelVersions, null, null, null), true, null, null);
			DataPropertySchema propertySchema_ClassificationModelVersions = SchemaProvider.CreateDataPropertySchema(typeSchema24, "ClassificationModelVersions", "Enumeration of model versions allowed to be used for classification. A supported version will not be used by classification unless it is present in this list. This allows us to flight new versions for training only (by expanding the supported range) without letting them to be used for classification.", new ConcretePrimitiveListInfo<IClutterModelConfigurationSettings, int>((IClutterModelConfigurationSettings vo) => vo.ClassificationModelVersions, null, null, null), true, null, null);
			DataPropertySchema propertySchema_DeprecatedModelVersions = SchemaProvider.CreateDataPropertySchema(typeSchema24, "DeprecatedModelVersions", "List of model deprecated model versions. Training should try to upgrade users who are still using these versions so that when they are blocked or removed classification isn't interrupted.", new ConcretePrimitiveListInfo<IClutterModelConfigurationSettings, int>((IClutterModelConfigurationSettings vo) => vo.DeprecatedModelVersions, null, null, null), true, null, null);
			DataPropertySchema propertySchema_ProbabilityBehaviourSwitchPerWeek = SchemaProvider.CreateDataPropertySchema(typeSchema24, "ProbabilityBehaviourSwitchPerWeek", "Probability of a user behaviour switch in a week. This is the parameter which controls the dynamic weight update", new ConcretePrimitiveScalarInfo<IClutterModelConfigurationSettings, double>((IClutterModelConfigurationSettings vo) => vo.ProbabilityBehaviourSwitchPerWeek, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_SymmetricNoise = SchemaProvider.CreateDataPropertySchema(typeSchema24, "SymmetricNoise", "The noise value for SymmetricNoiseMode. It should lie between 0.0 and 0.5.", new ConcretePrimitiveScalarInfo<IClutterModelConfigurationSettings, double>((IClutterModelConfigurationSettings vo) => vo.SymmetricNoise, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder47 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_ dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_ = new _DynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name25, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxModelVersion, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._MaxModelVersion_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._MaxModelVersion_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinModelVersion, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._MinModelVersion_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._MinModelVersion_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_NumberOfVersionCrumbsToRecord, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._NumberOfVersionCrumbsToRecord_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._NumberOfVersionCrumbsToRecord_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_AllowTrainingOnMutipleModelVersions, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._AllowTrainingOnMutipleModelVersions_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._AllowTrainingOnMutipleModelVersions_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_NumberOfModelVersionToTrain, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._NumberOfModelVersionToTrain_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._NumberOfModelVersionToTrain_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<int>>(propertySchema_BlockedModelVersions, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._BlockedModelVersions_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._BlockedModelVersions_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<int>>(propertySchema_ClassificationModelVersions, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._ClassificationModelVersions_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._ClassificationModelVersions_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<int>>(propertySchema_DeprecatedModelVersions, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._DeprecatedModelVersions_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._DeprecatedModelVersions_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<double>(propertySchema_ProbabilityBehaviourSwitchPerWeek, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._ProbabilityBehaviourSwitchPerWeek_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._ProbabilityBehaviourSwitchPerWeek_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<double>(propertySchema_SymmetricNoise, context, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._SymmetricNoise_MaterializedValue_, ref dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_._SymmetricNoise_ValueProvider_);
				return dynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema24, 3, typeof(_DynamicStorageSelection_IClutterModelConfigurationSettings_Implementation_), typeof(_DynamicStorageSelection_IClutterModelConfigurationSettings_DataAccessor_), instanceProviderBuilder47);
			InstanceProviderBuilder instanceProviderBuilder48 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IClutterModelConfigurationSettings_Implementation_ dataOnly_IClutterModelConfigurationSettings_Implementation_ = new _DataOnly_IClutterModelConfigurationSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name25, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxModelVersion, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._MaxModelVersion_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinModelVersion, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._MinModelVersion_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_NumberOfVersionCrumbsToRecord, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._NumberOfVersionCrumbsToRecord_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_AllowTrainingOnMutipleModelVersions, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._AllowTrainingOnMutipleModelVersions_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_NumberOfModelVersionToTrain, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._NumberOfModelVersionToTrain_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_BlockedModelVersions, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._BlockedModelVersions_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_ClassificationModelVersions, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._ClassificationModelVersions_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_DeprecatedModelVersions, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._DeprecatedModelVersions_MaterializedValue_);
				initializer.InitializeForDataOnly<double>(propertySchema_ProbabilityBehaviourSwitchPerWeek, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._ProbabilityBehaviourSwitchPerWeek_MaterializedValue_);
				initializer.InitializeForDataOnly<double>(propertySchema_SymmetricNoise, context, ref dataOnly_IClutterModelConfigurationSettings_Implementation_._SymmetricNoise_MaterializedValue_);
				return dataOnly_IClutterModelConfigurationSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema24, 0, typeof(_DataOnly_IClutterModelConfigurationSettings_Implementation_), typeof(_DataOnly_IClutterModelConfigurationSettings_Implementation_), instanceProviderBuilder48);
			TypeSchema typeSchema25 = SchemaProvider.CreateTypeSchema<IInferenceTrainingConfigurationSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name26 = SchemaProvider.CreateIdentityPropertySchema(typeSchema25, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_IsLoggingEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema25, "IsLoggingEnabled", "Whether logging is enabled", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, bool>((IInferenceTrainingConfigurationSettings vo) => vo.IsLoggingEnabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_LogPath = SchemaProvider.CreateDataPropertySchema(typeSchema25, "LogPath", "Subdirectory under Exchange\\Logging that should be used for logs", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, string>((IInferenceTrainingConfigurationSettings vo) => vo.LogPath, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_MaxLogAgeInDays = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MaxLogAgeInDays", "Maximum age of logs specified in days", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MaxLogAgeInDays, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxLogDirectorySizeInMB = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MaxLogDirectorySizeInMB", "Maximum size of log directory specified in megabytes", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, ulong>((IInferenceTrainingConfigurationSettings vo) => vo.MaxLogDirectorySizeInMB, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxLogFileSizeInMB = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MaxLogFileSizeInMB", "Maximum size of log files specified in megabytes", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, ulong>((IInferenceTrainingConfigurationSettings vo) => vo.MaxLogFileSizeInMB, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MinNumberOfItemsForRetrospectiveTraining = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinNumberOfItemsForRetrospectiveTraining", "Minimum number of items required for retrospective training", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinNumberOfItemsForRetrospectiveTraining, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxNumberOfCyclesForRetrospectiveTraining = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MaxNumberOfCyclesForRetrospectiveTraining", "Maximum number of cycles for retrospective training", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MaxNumberOfCyclesForRetrospectiveTraining, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxActionHistorySize = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MaxActionHistorySize", "Maximum number of items to keep in the action history", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MaxActionHistorySize, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_TargetPrecisionForThresholdAnalysis = SchemaProvider.CreateDataPropertySchema(typeSchema25, "TargetPrecisionForThresholdAnalysis", "Target precision for threshold analysis", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.TargetPrecisionForThresholdAnalysis, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_TargetRecallForThresholdAnalysis = SchemaProvider.CreateDataPropertySchema(typeSchema25, "TargetRecallForThresholdAnalysis", "Target recall for threshold analysis", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.TargetRecallForThresholdAnalysis, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_TargetFalsePositiveRateForThresholdAnalysis = SchemaProvider.CreateDataPropertySchema(typeSchema25, "TargetFalsePositiveRateForThresholdAnalysis", "Target false positive rate for threshold analysis", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.TargetFalsePositiveRateForThresholdAnalysis, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_ConfidenceThresholdForThresholdAnalysis = SchemaProvider.CreateDataPropertySchema(typeSchema25, "ConfidenceThresholdForThresholdAnalysis", "Confidence threshold for threshold analysis", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.ConfidenceThresholdForThresholdAnalysis, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_CoefficientForUserValueComputation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "CoefficientForUserValueComputation", "Coefficient to use in the user value computation for each threshold", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.CoefficientForUserValueComputation, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_NumberOfHistoryDaysForThresholdComputation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "NumberOfHistoryDaysForThresholdComputation", "Number of days from the recent history to use for threshold computation", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.NumberOfHistoryDaysForThresholdComputation, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_ActionShareExponentForScaleFactorComputation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "ActionShareExponentForScaleFactorComputation", "Exponent to use for scale factor computation", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.ActionShareExponentForScaleFactorComputation, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MinPrecisionForInvitation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinPrecisionForInvitation", "Target precision for invitation (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinPrecisionForInvitation, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_MinRecallForInvitation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinRecallForInvitation", "Target recall for invitation (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinRecallForInvitation, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_MaxFalsePositiveRateForInvitation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MaxFalsePositiveRateForInvitation", "Target false positive rate for invitation (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MaxFalsePositiveRateForInvitation, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_ConfidenceThresholdForInvitation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "ConfidenceThresholdForInvitation", "Confidence thresholds for invitation targets (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.ConfidenceThresholdForInvitation, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MinClutterPerDayForInvitation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinClutterPerDayForInvitation", "Target clutter for invitation (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinClutterPerDayForInvitation, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_MinNonClutterPerDayForInvitation = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinNonClutterPerDayForInvitation", "Target non clutter for invitation (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinNonClutterPerDayForInvitation, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_NumberOfHistoryDaysForInvitationPerDayAverages = SchemaProvider.CreateDataPropertySchema(typeSchema25, "NumberOfHistoryDaysForInvitationPerDayAverages", "Number of days from the recent history to use for computing average clutter / non clutter for invitation targets", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.NumberOfHistoryDaysForInvitationPerDayAverages, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MinPrecisionForAutoEnablement = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinPrecisionForAutoEnablement", "Target precision for auto enablement (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinPrecisionForAutoEnablement, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_MinRecallForAutoEnablement = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinRecallForAutoEnablement", "Target recall for auto enablement (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinRecallForAutoEnablement, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_MaxFalsePositiveRateForAutoEnablement = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MaxFalsePositiveRateForAutoEnablement", "Target false positive rate for auto enablement (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MaxFalsePositiveRateForAutoEnablement, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_ConfidenceThresholdForAutoEnablement = SchemaProvider.CreateDataPropertySchema(typeSchema25, "ConfidenceThresholdForAutoEnablement", "Confidence thresholds for auto enablement targets (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.ConfidenceThresholdForAutoEnablement, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MinClutterPerDayForAutoEnablement = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinClutterPerDayForAutoEnablement", "Target clutter for auto enablement (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinClutterPerDayForAutoEnablement, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_MinNonClutterPerDayForAutoEnablement = SchemaProvider.CreateDataPropertySchema(typeSchema25, "MinNonClutterPerDayForAutoEnablement", "Target non for auto enablement (as a percentage)", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.MinNonClutterPerDayForAutoEnablement, null, null, null, 0), true, "-1", null);
			DataPropertySchema propertySchema_NumberOfHistoryDaysForAutoEnablementPerDayAverages = SchemaProvider.CreateDataPropertySchema(typeSchema25, "NumberOfHistoryDaysForAutoEnablementPerDayAverages", "Number of days from the recent history to use for computing average clutter / non clutter for auto enablement targets", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.NumberOfHistoryDaysForAutoEnablementPerDayAverages, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_IsModelHistoryEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema25, "IsModelHistoryEnabled", "Configuration for whether saving of model history copies is enabled or not", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, bool>((IInferenceTrainingConfigurationSettings vo) => vo.IsModelHistoryEnabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_NumberOfModelHistoryCopiesToKeep = SchemaProvider.CreateDataPropertySchema(typeSchema25, "NumberOfModelHistoryCopiesToKeep", "Configuration for number of model history copies that should be kept for each model", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.NumberOfModelHistoryCopiesToKeep, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_IsMultiStepTrainingEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema25, "IsMultiStepTrainingEnabled", "Flag to indicate if training should perform multiple steps (if needed) till watermark becomes current", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, bool>((IInferenceTrainingConfigurationSettings vo) => vo.IsMultiStepTrainingEnabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_VacationDetectionMinActivityCountThreshold = SchemaProvider.CreateDataPropertySchema(typeSchema25, "VacationDetectionMinActivityCountThreshold", "Activity count threshold. One day's count above this indicates non-vacation day.", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.VacationDetectionMinActivityCountThreshold, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_VacationDetectionActivityCountNumStandardDeviations = SchemaProvider.CreateDataPropertySchema(typeSchema25, "VacationDetectionActivityCountNumStandardDeviations", "Number of standard deviations from mean of activity count to determine vacation", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, double>((IInferenceTrainingConfigurationSettings vo) => vo.VacationDetectionActivityCountNumStandardDeviations, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_VacationDetectionMinimumConsecutiveDays = SchemaProvider.CreateDataPropertySchema(typeSchema25, "VacationDetectionMinimumConsecutiveDays", "Minimum number of consecutive days of vacation for skipping training", new ConcretePrimitiveScalarInfo<IInferenceTrainingConfigurationSettings, int>((IInferenceTrainingConfigurationSettings vo) => vo.VacationDetectionMinimumConsecutiveDays, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder49 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_ dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_ = new _DynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name26, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_IsLoggingEnabled, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._IsLoggingEnabled_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._IsLoggingEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_LogPath, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._LogPath_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._LogPath_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxLogAgeInDays, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxLogAgeInDays_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxLogAgeInDays_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<ulong>(propertySchema_MaxLogDirectorySizeInMB, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxLogDirectorySizeInMB_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxLogDirectorySizeInMB_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<ulong>(propertySchema_MaxLogFileSizeInMB, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxLogFileSizeInMB_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxLogFileSizeInMB_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinNumberOfItemsForRetrospectiveTraining, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinNumberOfItemsForRetrospectiveTraining_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinNumberOfItemsForRetrospectiveTraining_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxNumberOfCyclesForRetrospectiveTraining, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxNumberOfCyclesForRetrospectiveTraining_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxNumberOfCyclesForRetrospectiveTraining_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxActionHistorySize, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxActionHistorySize_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxActionHistorySize_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_TargetPrecisionForThresholdAnalysis, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._TargetPrecisionForThresholdAnalysis_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._TargetPrecisionForThresholdAnalysis_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_TargetRecallForThresholdAnalysis, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._TargetRecallForThresholdAnalysis_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._TargetRecallForThresholdAnalysis_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_TargetFalsePositiveRateForThresholdAnalysis, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._TargetFalsePositiveRateForThresholdAnalysis_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._TargetFalsePositiveRateForThresholdAnalysis_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_ConfidenceThresholdForThresholdAnalysis, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._ConfidenceThresholdForThresholdAnalysis_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._ConfidenceThresholdForThresholdAnalysis_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_CoefficientForUserValueComputation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._CoefficientForUserValueComputation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._CoefficientForUserValueComputation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_NumberOfHistoryDaysForThresholdComputation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._NumberOfHistoryDaysForThresholdComputation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._NumberOfHistoryDaysForThresholdComputation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_ActionShareExponentForScaleFactorComputation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._ActionShareExponentForScaleFactorComputation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._ActionShareExponentForScaleFactorComputation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinPrecisionForInvitation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinPrecisionForInvitation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinPrecisionForInvitation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinRecallForInvitation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinRecallForInvitation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinRecallForInvitation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxFalsePositiveRateForInvitation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxFalsePositiveRateForInvitation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxFalsePositiveRateForInvitation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_ConfidenceThresholdForInvitation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._ConfidenceThresholdForInvitation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._ConfidenceThresholdForInvitation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinClutterPerDayForInvitation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinClutterPerDayForInvitation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinClutterPerDayForInvitation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinNonClutterPerDayForInvitation, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinNonClutterPerDayForInvitation_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinNonClutterPerDayForInvitation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_NumberOfHistoryDaysForInvitationPerDayAverages, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._NumberOfHistoryDaysForInvitationPerDayAverages_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._NumberOfHistoryDaysForInvitationPerDayAverages_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinPrecisionForAutoEnablement, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinPrecisionForAutoEnablement_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinPrecisionForAutoEnablement_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinRecallForAutoEnablement, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinRecallForAutoEnablement_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinRecallForAutoEnablement_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxFalsePositiveRateForAutoEnablement, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxFalsePositiveRateForAutoEnablement_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MaxFalsePositiveRateForAutoEnablement_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_ConfidenceThresholdForAutoEnablement, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._ConfidenceThresholdForAutoEnablement_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._ConfidenceThresholdForAutoEnablement_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinClutterPerDayForAutoEnablement, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinClutterPerDayForAutoEnablement_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinClutterPerDayForAutoEnablement_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MinNonClutterPerDayForAutoEnablement, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinNonClutterPerDayForAutoEnablement_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._MinNonClutterPerDayForAutoEnablement_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_NumberOfHistoryDaysForAutoEnablementPerDayAverages, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._NumberOfHistoryDaysForAutoEnablementPerDayAverages_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._NumberOfHistoryDaysForAutoEnablementPerDayAverages_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_IsModelHistoryEnabled, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._IsModelHistoryEnabled_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._IsModelHistoryEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_NumberOfModelHistoryCopiesToKeep, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._NumberOfModelHistoryCopiesToKeep_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._NumberOfModelHistoryCopiesToKeep_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_IsMultiStepTrainingEnabled, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._IsMultiStepTrainingEnabled_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._IsMultiStepTrainingEnabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_VacationDetectionMinActivityCountThreshold, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._VacationDetectionMinActivityCountThreshold_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._VacationDetectionMinActivityCountThreshold_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<double>(propertySchema_VacationDetectionActivityCountNumStandardDeviations, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._VacationDetectionActivityCountNumStandardDeviations_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._VacationDetectionActivityCountNumStandardDeviations_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_VacationDetectionMinimumConsecutiveDays, context, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._VacationDetectionMinimumConsecutiveDays_MaterializedValue_, ref dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_._VacationDetectionMinimumConsecutiveDays_ValueProvider_);
				return dynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema25, 3, typeof(_DynamicStorageSelection_IInferenceTrainingConfigurationSettings_Implementation_), typeof(_DynamicStorageSelection_IInferenceTrainingConfigurationSettings_DataAccessor_), instanceProviderBuilder49);
			InstanceProviderBuilder instanceProviderBuilder50 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IInferenceTrainingConfigurationSettings_Implementation_ dataOnly_IInferenceTrainingConfigurationSettings_Implementation_ = new _DataOnly_IInferenceTrainingConfigurationSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name26, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_IsLoggingEnabled, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._IsLoggingEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_LogPath, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._LogPath_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxLogAgeInDays, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MaxLogAgeInDays_MaterializedValue_);
				initializer.InitializeForDataOnly<ulong>(propertySchema_MaxLogDirectorySizeInMB, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MaxLogDirectorySizeInMB_MaterializedValue_);
				initializer.InitializeForDataOnly<ulong>(propertySchema_MaxLogFileSizeInMB, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MaxLogFileSizeInMB_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinNumberOfItemsForRetrospectiveTraining, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinNumberOfItemsForRetrospectiveTraining_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxNumberOfCyclesForRetrospectiveTraining, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MaxNumberOfCyclesForRetrospectiveTraining_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxActionHistorySize, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MaxActionHistorySize_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_TargetPrecisionForThresholdAnalysis, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._TargetPrecisionForThresholdAnalysis_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_TargetRecallForThresholdAnalysis, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._TargetRecallForThresholdAnalysis_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_TargetFalsePositiveRateForThresholdAnalysis, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._TargetFalsePositiveRateForThresholdAnalysis_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_ConfidenceThresholdForThresholdAnalysis, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._ConfidenceThresholdForThresholdAnalysis_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_CoefficientForUserValueComputation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._CoefficientForUserValueComputation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_NumberOfHistoryDaysForThresholdComputation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._NumberOfHistoryDaysForThresholdComputation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_ActionShareExponentForScaleFactorComputation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._ActionShareExponentForScaleFactorComputation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinPrecisionForInvitation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinPrecisionForInvitation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinRecallForInvitation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinRecallForInvitation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxFalsePositiveRateForInvitation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MaxFalsePositiveRateForInvitation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_ConfidenceThresholdForInvitation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._ConfidenceThresholdForInvitation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinClutterPerDayForInvitation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinClutterPerDayForInvitation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinNonClutterPerDayForInvitation, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinNonClutterPerDayForInvitation_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_NumberOfHistoryDaysForInvitationPerDayAverages, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._NumberOfHistoryDaysForInvitationPerDayAverages_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinPrecisionForAutoEnablement, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinPrecisionForAutoEnablement_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinRecallForAutoEnablement, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinRecallForAutoEnablement_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxFalsePositiveRateForAutoEnablement, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MaxFalsePositiveRateForAutoEnablement_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_ConfidenceThresholdForAutoEnablement, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._ConfidenceThresholdForAutoEnablement_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinClutterPerDayForAutoEnablement, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinClutterPerDayForAutoEnablement_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MinNonClutterPerDayForAutoEnablement, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._MinNonClutterPerDayForAutoEnablement_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_NumberOfHistoryDaysForAutoEnablementPerDayAverages, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._NumberOfHistoryDaysForAutoEnablementPerDayAverages_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_IsModelHistoryEnabled, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._IsModelHistoryEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_NumberOfModelHistoryCopiesToKeep, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._NumberOfModelHistoryCopiesToKeep_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_IsMultiStepTrainingEnabled, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._IsMultiStepTrainingEnabled_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_VacationDetectionMinActivityCountThreshold, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._VacationDetectionMinActivityCountThreshold_MaterializedValue_);
				initializer.InitializeForDataOnly<double>(propertySchema_VacationDetectionActivityCountNumStandardDeviations, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._VacationDetectionActivityCountNumStandardDeviations_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_VacationDetectionMinimumConsecutiveDays, context, ref dataOnly_IInferenceTrainingConfigurationSettings_Implementation_._VacationDetectionMinimumConsecutiveDays_MaterializedValue_);
				return dataOnly_IInferenceTrainingConfigurationSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema25, 0, typeof(_DataOnly_IInferenceTrainingConfigurationSettings_Implementation_), typeof(_DataOnly_IInferenceTrainingConfigurationSettings_Implementation_), instanceProviderBuilder50);
			TypeSchema typeSchema26 = SchemaProvider.CreateTypeSchema<IMessageDepotSettings>("<summary> Message Depot settings. </summary>", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name27 = SchemaProvider.CreateIdentityPropertySchema(typeSchema26, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Enabled7 = SchemaProvider.CreateDataPropertySchema(typeSchema26, "Enabled", "Is Message depot enabled.", new ConcretePrimitiveScalarInfo<IMessageDepotSettings, bool>((IMessageDepotSettings vo) => vo.Enabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_EnabledOnDaysOfWeek = SchemaProvider.CreateDataPropertySchema(typeSchema26, "EnabledOnDaysOfWeek", "Whether the message depot should be enabled on specific day of the week.", new ConcretePrimitiveListInfo<IMessageDepotSettings, Microsoft.Exchange.MessageDepot.DayOfWeek>((IMessageDepotSettings vo) => vo.EnabledOnDaysOfWeek, null, null, null), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder51 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IMessageDepotSettings_DataAccessor_ dynamicStorageSelection_IMessageDepotSettings_DataAccessor_ = new _DynamicStorageSelection_IMessageDepotSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name27, ref dynamicStorageSelection_IMessageDepotSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled7, context, ref dynamicStorageSelection_IMessageDepotSettings_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IMessageDepotSettings_DataAccessor_._Enabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<Microsoft.Exchange.MessageDepot.DayOfWeek>>(propertySchema_EnabledOnDaysOfWeek, context, ref dynamicStorageSelection_IMessageDepotSettings_DataAccessor_._EnabledOnDaysOfWeek_MaterializedValue_, ref dynamicStorageSelection_IMessageDepotSettings_DataAccessor_._EnabledOnDaysOfWeek_ValueProvider_);
				return dynamicStorageSelection_IMessageDepotSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema26, 3, typeof(_DynamicStorageSelection_IMessageDepotSettings_Implementation_), typeof(_DynamicStorageSelection_IMessageDepotSettings_DataAccessor_), instanceProviderBuilder51);
			InstanceProviderBuilder instanceProviderBuilder52 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IMessageDepotSettings_Implementation_ dataOnly_IMessageDepotSettings_Implementation_ = new _DataOnly_IMessageDepotSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name27, ref dataOnly_IMessageDepotSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled7, context, ref dataOnly_IMessageDepotSettings_Implementation_._Enabled_MaterializedValue_);
				initializer.InitializeForDataOnly<Microsoft.Exchange.MessageDepot.DayOfWeek>(propertySchema_EnabledOnDaysOfWeek, context, ref dataOnly_IMessageDepotSettings_Implementation_._EnabledOnDaysOfWeek_MaterializedValue_);
				return dataOnly_IMessageDepotSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema26, 0, typeof(_DataOnly_IMessageDepotSettings_Implementation_), typeof(_DataOnly_IMessageDepotSettings_Implementation_), instanceProviderBuilder52);
			TypeSchema typeSchema27 = SchemaProvider.CreateTypeSchema<ICompletions>("InstantSearch Completions settings", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name28 = SchemaProvider.CreateIdentityPropertySchema(typeSchema27, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_MaxCompletionTraversalCount = SchemaProvider.CreateDataPropertySchema(typeSchema27, "MaxCompletionTraversalCount", "The total count of items the Completions API will collect before terminating traversal of the dictionary for a given request.", new ConcretePrimitiveScalarInfo<ICompletions, int>((ICompletions vo) => vo.MaxCompletionTraversalCount, null, null, null, 0), true, "1000", null);
			DataPropertySchema propertySchema_TopNExclusionCharacters = SchemaProvider.CreateDataPropertySchema(typeSchema27, "TopNExclusionCharacters", "The set of characters that, if found in a suggestion, will cause the suggestion to be excluded from the result set.", new ConcretePrimitiveScalarInfo<ICompletions, string>((ICompletions vo) => vo.TopNExclusionCharacters, null, null, null, 0), true, ".", null);
			DataPropertySchema propertySchema_FinalWordSuggestionsEnabled = SchemaProvider.CreateDataPropertySchema(typeSchema27, "FinalWordSuggestionsEnabled", "Whether or not suggestions should be given based on just the final word in the query string.", new ConcretePrimitiveScalarInfo<ICompletions, bool>((ICompletions vo) => vo.FinalWordSuggestionsEnabled, null, null, null, 0), true, "true", null);
			InstanceProviderBuilder instanceProviderBuilder53 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ICompletions_DataAccessor_ dynamicStorageSelection_ICompletions_DataAccessor_ = new _DynamicStorageSelection_ICompletions_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name28, ref dynamicStorageSelection_ICompletions_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxCompletionTraversalCount, context, ref dynamicStorageSelection_ICompletions_DataAccessor_._MaxCompletionTraversalCount_MaterializedValue_, ref dynamicStorageSelection_ICompletions_DataAccessor_._MaxCompletionTraversalCount_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_TopNExclusionCharacters, context, ref dynamicStorageSelection_ICompletions_DataAccessor_._TopNExclusionCharacters_MaterializedValue_, ref dynamicStorageSelection_ICompletions_DataAccessor_._TopNExclusionCharacters_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_FinalWordSuggestionsEnabled, context, ref dynamicStorageSelection_ICompletions_DataAccessor_._FinalWordSuggestionsEnabled_MaterializedValue_, ref dynamicStorageSelection_ICompletions_DataAccessor_._FinalWordSuggestionsEnabled_ValueProvider_);
				return dynamicStorageSelection_ICompletions_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema27, 3, typeof(_DynamicStorageSelection_ICompletions_Implementation_), typeof(_DynamicStorageSelection_ICompletions_DataAccessor_), instanceProviderBuilder53);
			InstanceProviderBuilder instanceProviderBuilder54 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ICompletions_Implementation_ dataOnly_ICompletions_Implementation_ = new _DataOnly_ICompletions_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name28, ref dataOnly_ICompletions_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxCompletionTraversalCount, context, ref dataOnly_ICompletions_Implementation_._MaxCompletionTraversalCount_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_TopNExclusionCharacters, context, ref dataOnly_ICompletions_Implementation_._TopNExclusionCharacters_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_FinalWordSuggestionsEnabled, context, ref dataOnly_ICompletions_Implementation_._FinalWordSuggestionsEnabled_MaterializedValue_);
				return dataOnly_ICompletions_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema27, 0, typeof(_DataOnly_ICompletions_Implementation_), typeof(_DataOnly_ICompletions_Implementation_), instanceProviderBuilder54);
			TypeSchema typeSchema28 = SchemaProvider.CreateTypeSchema<IDocumentFeederSettings>("Document Feeder settings", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name29 = SchemaProvider.CreateIdentityPropertySchema(typeSchema28, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_BatchTimeout = SchemaProvider.CreateDataPropertySchema(typeSchema28, "BatchTimeout", "Document Batch timeout", new ConcretePrimitiveScalarInfo<IDocumentFeederSettings, TimeSpan>((IDocumentFeederSettings vo) => vo.BatchTimeout, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_LostCallbackTimeout = SchemaProvider.CreateDataPropertySchema(typeSchema28, "LostCallbackTimeout", "The amount of time in addition to the Document Batch timeout before failure", new ConcretePrimitiveScalarInfo<IDocumentFeederSettings, TimeSpan>((IDocumentFeederSettings vo) => vo.LostCallbackTimeout, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder55 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IDocumentFeederSettings_DataAccessor_ dynamicStorageSelection_IDocumentFeederSettings_DataAccessor_ = new _DynamicStorageSelection_IDocumentFeederSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name29, ref dynamicStorageSelection_IDocumentFeederSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_BatchTimeout, context, ref dynamicStorageSelection_IDocumentFeederSettings_DataAccessor_._BatchTimeout_MaterializedValue_, ref dynamicStorageSelection_IDocumentFeederSettings_DataAccessor_._BatchTimeout_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_LostCallbackTimeout, context, ref dynamicStorageSelection_IDocumentFeederSettings_DataAccessor_._LostCallbackTimeout_MaterializedValue_, ref dynamicStorageSelection_IDocumentFeederSettings_DataAccessor_._LostCallbackTimeout_ValueProvider_);
				return dynamicStorageSelection_IDocumentFeederSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema28, 3, typeof(_DynamicStorageSelection_IDocumentFeederSettings_Implementation_), typeof(_DynamicStorageSelection_IDocumentFeederSettings_DataAccessor_), instanceProviderBuilder55);
			InstanceProviderBuilder instanceProviderBuilder56 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IDocumentFeederSettings_Implementation_ dataOnly_IDocumentFeederSettings_Implementation_ = new _DataOnly_IDocumentFeederSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name29, ref dataOnly_IDocumentFeederSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_BatchTimeout, context, ref dataOnly_IDocumentFeederSettings_Implementation_._BatchTimeout_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_LostCallbackTimeout, context, ref dataOnly_IDocumentFeederSettings_Implementation_._LostCallbackTimeout_MaterializedValue_);
				return dataOnly_IDocumentFeederSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema28, 0, typeof(_DataOnly_IDocumentFeederSettings_Implementation_), typeof(_DataOnly_IDocumentFeederSettings_Implementation_), instanceProviderBuilder56);
			TypeSchema typeSchema29 = SchemaProvider.CreateTypeSchema<IFeederSettings>("Feeder settings", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name30 = SchemaProvider.CreateIdentityPropertySchema(typeSchema29, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_QueueSize = SchemaProvider.CreateDataPropertySchema(typeSchema29, "QueueSize", "Feeder QueueManager batch size", new ConcretePrimitiveScalarInfo<IFeederSettings, int>((IFeederSettings vo) => vo.QueueSize, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder57 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IFeederSettings_DataAccessor_ dynamicStorageSelection_IFeederSettings_DataAccessor_ = new _DynamicStorageSelection_IFeederSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name30, ref dynamicStorageSelection_IFeederSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_QueueSize, context, ref dynamicStorageSelection_IFeederSettings_DataAccessor_._QueueSize_MaterializedValue_, ref dynamicStorageSelection_IFeederSettings_DataAccessor_._QueueSize_ValueProvider_);
				return dynamicStorageSelection_IFeederSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema29, 3, typeof(_DynamicStorageSelection_IFeederSettings_Implementation_), typeof(_DynamicStorageSelection_IFeederSettings_DataAccessor_), instanceProviderBuilder57);
			InstanceProviderBuilder instanceProviderBuilder58 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IFeederSettings_Implementation_ dataOnly_IFeederSettings_Implementation_ = new _DataOnly_IFeederSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name30, ref dataOnly_IFeederSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_QueueSize, context, ref dataOnly_IFeederSettings_Implementation_._QueueSize_MaterializedValue_);
				return dataOnly_IFeederSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema29, 0, typeof(_DataOnly_IFeederSettings_Implementation_), typeof(_DataOnly_IFeederSettings_Implementation_), instanceProviderBuilder58);
			TypeSchema typeSchema30 = SchemaProvider.CreateTypeSchema<IIndexStatusSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name31 = SchemaProvider.CreateIdentityPropertySchema(typeSchema30, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_InvalidateInterval = SchemaProvider.CreateDataPropertySchema(typeSchema30, "InvalidateInterval", "IndexStatus invalidate interval", new ConcretePrimitiveScalarInfo<IIndexStatusSettings, TimeSpan>((IIndexStatusSettings vo) => vo.InvalidateInterval, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder59 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IIndexStatusSettings_DataAccessor_ dynamicStorageSelection_IIndexStatusSettings_DataAccessor_ = new _DynamicStorageSelection_IIndexStatusSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name31, ref dynamicStorageSelection_IIndexStatusSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_InvalidateInterval, context, ref dynamicStorageSelection_IIndexStatusSettings_DataAccessor_._InvalidateInterval_MaterializedValue_, ref dynamicStorageSelection_IIndexStatusSettings_DataAccessor_._InvalidateInterval_ValueProvider_);
				return dynamicStorageSelection_IIndexStatusSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema30, 3, typeof(_DynamicStorageSelection_IIndexStatusSettings_Implementation_), typeof(_DynamicStorageSelection_IIndexStatusSettings_DataAccessor_), instanceProviderBuilder59);
			InstanceProviderBuilder instanceProviderBuilder60 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IIndexStatusSettings_Implementation_ dataOnly_IIndexStatusSettings_Implementation_ = new _DataOnly_IIndexStatusSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name31, ref dataOnly_IIndexStatusSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_InvalidateInterval, context, ref dataOnly_IIndexStatusSettings_Implementation_._InvalidateInterval_MaterializedValue_);
				return dataOnly_IIndexStatusSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema30, 0, typeof(_DataOnly_IIndexStatusSettings_Implementation_), typeof(_DataOnly_IIndexStatusSettings_Implementation_), instanceProviderBuilder60);
			TypeSchema typeSchema31 = SchemaProvider.CreateTypeSchema<IInstantSearch>("InstantSearch settings", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name32 = SchemaProvider.CreateIdentityPropertySchema(typeSchema31, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_FastQueryPath = SchemaProvider.CreateDataPropertySchema(typeSchema31, "FastQueryPath", "Use FAST? (0=Use store always; 1=use fast always; other=Decide if fast path can be used based on schema.)", new ConcretePrimitiveScalarInfo<IInstantSearch, int>((IInstantSearch vo) => vo.FastQueryPath, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder61 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IInstantSearch_DataAccessor_ dynamicStorageSelection_IInstantSearch_DataAccessor_ = new _DynamicStorageSelection_IInstantSearch_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name32, ref dynamicStorageSelection_IInstantSearch_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_FastQueryPath, context, ref dynamicStorageSelection_IInstantSearch_DataAccessor_._FastQueryPath_MaterializedValue_, ref dynamicStorageSelection_IInstantSearch_DataAccessor_._FastQueryPath_ValueProvider_);
				return dynamicStorageSelection_IInstantSearch_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema31, 3, typeof(_DynamicStorageSelection_IInstantSearch_Implementation_), typeof(_DynamicStorageSelection_IInstantSearch_DataAccessor_), instanceProviderBuilder61);
			InstanceProviderBuilder instanceProviderBuilder62 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IInstantSearch_Implementation_ dataOnly_IInstantSearch_Implementation_ = new _DataOnly_IInstantSearch_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name32, ref dataOnly_IInstantSearch_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_FastQueryPath, context, ref dataOnly_IInstantSearch_Implementation_._FastQueryPath_MaterializedValue_);
				return dataOnly_IInstantSearch_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema31, 0, typeof(_DataOnly_IInstantSearch_Implementation_), typeof(_DataOnly_IInstantSearch_Implementation_), instanceProviderBuilder62);
			TypeSchema typeSchema32 = SchemaProvider.CreateTypeSchema<ILanguageDetection>("Language Detection settings", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name33 = SchemaProvider.CreateIdentityPropertySchema(typeSchema32, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_EnableLanguageDetectionLogging = SchemaProvider.CreateDataPropertySchema(typeSchema32, "EnableLanguageDetectionLogging", "The button to enable language detection logging.", new ConcretePrimitiveScalarInfo<ILanguageDetection, bool>((ILanguageDetection vo) => vo.EnableLanguageDetectionLogging, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_SamplingFrequency = SchemaProvider.CreateDataPropertySchema(typeSchema32, "SamplingFrequency", "The counter to decide among how many messages we want to do one logging.", new ConcretePrimitiveScalarInfo<ILanguageDetection, int>((ILanguageDetection vo) => vo.SamplingFrequency, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_EnableLanguageSelection = SchemaProvider.CreateDataPropertySchema(typeSchema32, "EnableLanguageSelection", "The button to enable language selection.", new ConcretePrimitiveScalarInfo<ILanguageDetection, bool>((ILanguageDetection vo) => vo.EnableLanguageSelection, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_RegionDefaultLanguage = SchemaProvider.CreateDataPropertySchema(typeSchema32, "RegionDefaultLanguage", "The region default language.", new ConcretePrimitiveScalarInfo<ILanguageDetection, string>((ILanguageDetection vo) => vo.RegionDefaultLanguage, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder63 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ILanguageDetection_DataAccessor_ dynamicStorageSelection_ILanguageDetection_DataAccessor_ = new _DynamicStorageSelection_ILanguageDetection_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name33, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_EnableLanguageDetectionLogging, context, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._EnableLanguageDetectionLogging_MaterializedValue_, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._EnableLanguageDetectionLogging_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_SamplingFrequency, context, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._SamplingFrequency_MaterializedValue_, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._SamplingFrequency_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_EnableLanguageSelection, context, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._EnableLanguageSelection_MaterializedValue_, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._EnableLanguageSelection_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_RegionDefaultLanguage, context, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._RegionDefaultLanguage_MaterializedValue_, ref dynamicStorageSelection_ILanguageDetection_DataAccessor_._RegionDefaultLanguage_ValueProvider_);
				return dynamicStorageSelection_ILanguageDetection_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema32, 3, typeof(_DynamicStorageSelection_ILanguageDetection_Implementation_), typeof(_DynamicStorageSelection_ILanguageDetection_DataAccessor_), instanceProviderBuilder63);
			InstanceProviderBuilder instanceProviderBuilder64 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ILanguageDetection_Implementation_ dataOnly_ILanguageDetection_Implementation_ = new _DataOnly_ILanguageDetection_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name33, ref dataOnly_ILanguageDetection_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_EnableLanguageDetectionLogging, context, ref dataOnly_ILanguageDetection_Implementation_._EnableLanguageDetectionLogging_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_SamplingFrequency, context, ref dataOnly_ILanguageDetection_Implementation_._SamplingFrequency_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_EnableLanguageSelection, context, ref dataOnly_ILanguageDetection_Implementation_._EnableLanguageSelection_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_RegionDefaultLanguage, context, ref dataOnly_ILanguageDetection_Implementation_._RegionDefaultLanguage_MaterializedValue_);
				return dataOnly_ILanguageDetection_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema32, 0, typeof(_DataOnly_ILanguageDetection_Implementation_), typeof(_DataOnly_ILanguageDetection_Implementation_), instanceProviderBuilder64);
			TypeSchema typeSchema33 = SchemaProvider.CreateTypeSchema<IMemoryModelSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name34 = SchemaProvider.CreateIdentityPropertySchema(typeSchema33, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_MemoryUsageAdjustmentMultiplier = SchemaProvider.CreateDataPropertySchema(typeSchema33, "MemoryUsageAdjustmentMultiplier", "Adjustment to the memory model.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, float>((IMemoryModelSettings vo) => vo.MemoryUsageAdjustmentMultiplier, null, null, null, 0), true, "1", null);
			DataPropertySchema propertySchema_SandboxMaxPoolSize = SchemaProvider.CreateDataPropertySchema(typeSchema33, "SandboxMaxPoolSize", "The SandboxMaxPoolSize value.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, int>((IMemoryModelSettings vo) => vo.SandboxMaxPoolSize, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_LowAvailableSystemWorkingSetMemoryRatio = SchemaProvider.CreateDataPropertySchema(typeSchema33, "LowAvailableSystemWorkingSetMemoryRatio", "The ratio to determine if available memory is low.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, int>((IMemoryModelSettings vo) => vo.LowAvailableSystemWorkingSetMemoryRatio, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_SearchMemoryModelBaseCost = SchemaProvider.CreateDataPropertySchema(typeSchema33, "SearchMemoryModelBaseCost", "The base cost constant in search memory model.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.SearchMemoryModelBaseCost, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_BaselineCostPerActiveItem = SchemaProvider.CreateDataPropertySchema(typeSchema33, "BaselineCostPerActiveItem", "The base cost per active item.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.BaselineCostPerActiveItem, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_BaselineCostPerPassiveItem = SchemaProvider.CreateDataPropertySchema(typeSchema33, "BaselineCostPerPassiveItem", "The base cost per passive item.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.BaselineCostPerPassiveItem, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_InstantSearchCostPerActiveItem = SchemaProvider.CreateDataPropertySchema(typeSchema33, "InstantSearchCostPerActiveItem", "The base cost for instant search per passive item.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.InstantSearchCostPerActiveItem, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_RefinersCostPerActiveItem = SchemaProvider.CreateDataPropertySchema(typeSchema33, "RefinersCostPerActiveItem", "The base cost for refiners cost per active item.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.RefinersCostPerActiveItem, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_DisableGracefulDegradationForInstantSearch = SchemaProvider.CreateDataPropertySchema(typeSchema33, "DisableGracefulDegradationForInstantSearch", "The button to disable graceful degradation for instant search.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, bool>((IMemoryModelSettings vo) => vo.DisableGracefulDegradationForInstantSearch, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_DisableGracefulDegradationForAutoSuspend = SchemaProvider.CreateDataPropertySchema(typeSchema33, "DisableGracefulDegradationForAutoSuspend", "The button to disable graceful degradation for auto suspending passive catalogs.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, bool>((IMemoryModelSettings vo) => vo.DisableGracefulDegradationForAutoSuspend, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_TimerForGracefulDegradation = SchemaProvider.CreateDataPropertySchema(typeSchema33, "TimerForGracefulDegradation", "The timer determines how often we skip graceful degradation.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, int>((IMemoryModelSettings vo) => vo.TimerForGracefulDegradation, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MemoryMeasureDrift = SchemaProvider.CreateDataPropertySchema(typeSchema33, "MemoryMeasureDrift", "The setting describes the drift between the measured value and the real value.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.MemoryMeasureDrift, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_MaxRestoreAmount = SchemaProvider.CreateDataPropertySchema(typeSchema33, "MaxRestoreAmount", "The setting describes the max amount of memory to restore.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.MaxRestoreAmount, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_ShouldConsiderSearchMemoryUsageBudget = SchemaProvider.CreateDataPropertySchema(typeSchema33, "ShouldConsiderSearchMemoryUsageBudget", "The setting describes that we should consider if search memory usage is over or under the budget.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, bool>((IMemoryModelSettings vo) => vo.ShouldConsiderSearchMemoryUsageBudget, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_SearchMemoryUsageBudget = SchemaProvider.CreateDataPropertySchema(typeSchema33, "SearchMemoryUsageBudget", "The setting describes the search memory usage budget.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.SearchMemoryUsageBudget, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_SearchMemoryUsageBudgetFloatingAmount = SchemaProvider.CreateDataPropertySchema(typeSchema33, "SearchMemoryUsageBudgetFloatingAmount", "The setting describes the search memory usage budget floating amount.", new ConcretePrimitiveScalarInfo<IMemoryModelSettings, long>((IMemoryModelSettings vo) => vo.SearchMemoryUsageBudgetFloatingAmount, null, null, null, 0), true, "0", null);
			InstanceProviderBuilder instanceProviderBuilder65 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IMemoryModelSettings_DataAccessor_ dynamicStorageSelection_IMemoryModelSettings_DataAccessor_ = new _DynamicStorageSelection_IMemoryModelSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name34, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<float>(propertySchema_MemoryUsageAdjustmentMultiplier, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._MemoryUsageAdjustmentMultiplier_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._MemoryUsageAdjustmentMultiplier_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_SandboxMaxPoolSize, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._SandboxMaxPoolSize_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._SandboxMaxPoolSize_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_LowAvailableSystemWorkingSetMemoryRatio, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._LowAvailableSystemWorkingSetMemoryRatio_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._LowAvailableSystemWorkingSetMemoryRatio_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_SearchMemoryModelBaseCost, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._SearchMemoryModelBaseCost_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._SearchMemoryModelBaseCost_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_BaselineCostPerActiveItem, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._BaselineCostPerActiveItem_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._BaselineCostPerActiveItem_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_BaselineCostPerPassiveItem, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._BaselineCostPerPassiveItem_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._BaselineCostPerPassiveItem_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_InstantSearchCostPerActiveItem, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._InstantSearchCostPerActiveItem_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._InstantSearchCostPerActiveItem_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_RefinersCostPerActiveItem, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._RefinersCostPerActiveItem_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._RefinersCostPerActiveItem_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_DisableGracefulDegradationForInstantSearch, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._DisableGracefulDegradationForInstantSearch_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._DisableGracefulDegradationForInstantSearch_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_DisableGracefulDegradationForAutoSuspend, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._DisableGracefulDegradationForAutoSuspend_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._DisableGracefulDegradationForAutoSuspend_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_TimerForGracefulDegradation, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._TimerForGracefulDegradation_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._TimerForGracefulDegradation_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_MemoryMeasureDrift, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._MemoryMeasureDrift_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._MemoryMeasureDrift_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_MaxRestoreAmount, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._MaxRestoreAmount_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._MaxRestoreAmount_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_ShouldConsiderSearchMemoryUsageBudget, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._ShouldConsiderSearchMemoryUsageBudget_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._ShouldConsiderSearchMemoryUsageBudget_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_SearchMemoryUsageBudget, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._SearchMemoryUsageBudget_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._SearchMemoryUsageBudget_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<long>(propertySchema_SearchMemoryUsageBudgetFloatingAmount, context, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._SearchMemoryUsageBudgetFloatingAmount_MaterializedValue_, ref dynamicStorageSelection_IMemoryModelSettings_DataAccessor_._SearchMemoryUsageBudgetFloatingAmount_ValueProvider_);
				return dynamicStorageSelection_IMemoryModelSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema33, 3, typeof(_DynamicStorageSelection_IMemoryModelSettings_Implementation_), typeof(_DynamicStorageSelection_IMemoryModelSettings_DataAccessor_), instanceProviderBuilder65);
			InstanceProviderBuilder instanceProviderBuilder66 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IMemoryModelSettings_Implementation_ dataOnly_IMemoryModelSettings_Implementation_ = new _DataOnly_IMemoryModelSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name34, ref dataOnly_IMemoryModelSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<float>(propertySchema_MemoryUsageAdjustmentMultiplier, context, ref dataOnly_IMemoryModelSettings_Implementation_._MemoryUsageAdjustmentMultiplier_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_SandboxMaxPoolSize, context, ref dataOnly_IMemoryModelSettings_Implementation_._SandboxMaxPoolSize_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_LowAvailableSystemWorkingSetMemoryRatio, context, ref dataOnly_IMemoryModelSettings_Implementation_._LowAvailableSystemWorkingSetMemoryRatio_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_SearchMemoryModelBaseCost, context, ref dataOnly_IMemoryModelSettings_Implementation_._SearchMemoryModelBaseCost_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_BaselineCostPerActiveItem, context, ref dataOnly_IMemoryModelSettings_Implementation_._BaselineCostPerActiveItem_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_BaselineCostPerPassiveItem, context, ref dataOnly_IMemoryModelSettings_Implementation_._BaselineCostPerPassiveItem_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_InstantSearchCostPerActiveItem, context, ref dataOnly_IMemoryModelSettings_Implementation_._InstantSearchCostPerActiveItem_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_RefinersCostPerActiveItem, context, ref dataOnly_IMemoryModelSettings_Implementation_._RefinersCostPerActiveItem_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_DisableGracefulDegradationForInstantSearch, context, ref dataOnly_IMemoryModelSettings_Implementation_._DisableGracefulDegradationForInstantSearch_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_DisableGracefulDegradationForAutoSuspend, context, ref dataOnly_IMemoryModelSettings_Implementation_._DisableGracefulDegradationForAutoSuspend_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_TimerForGracefulDegradation, context, ref dataOnly_IMemoryModelSettings_Implementation_._TimerForGracefulDegradation_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_MemoryMeasureDrift, context, ref dataOnly_IMemoryModelSettings_Implementation_._MemoryMeasureDrift_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_MaxRestoreAmount, context, ref dataOnly_IMemoryModelSettings_Implementation_._MaxRestoreAmount_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_ShouldConsiderSearchMemoryUsageBudget, context, ref dataOnly_IMemoryModelSettings_Implementation_._ShouldConsiderSearchMemoryUsageBudget_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_SearchMemoryUsageBudget, context, ref dataOnly_IMemoryModelSettings_Implementation_._SearchMemoryUsageBudget_MaterializedValue_);
				initializer.InitializeForDataOnly<long>(propertySchema_SearchMemoryUsageBudgetFloatingAmount, context, ref dataOnly_IMemoryModelSettings_Implementation_._SearchMemoryUsageBudgetFloatingAmount_MaterializedValue_);
				return dataOnly_IMemoryModelSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema33, 0, typeof(_DataOnly_IMemoryModelSettings_Implementation_), typeof(_DataOnly_IMemoryModelSettings_Implementation_), instanceProviderBuilder66);
			TypeSchema typeSchema34 = SchemaProvider.CreateTypeSchema<ITransportFlowSettings>("Transport flow settings", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name35 = SchemaProvider.CreateIdentityPropertySchema(typeSchema34, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_SkipTokenInfoGeneration = SchemaProvider.CreateDataPropertySchema(typeSchema34, "SkipTokenInfoGeneration", "Skip TokenInfo generation", new ConcretePrimitiveScalarInfo<ITransportFlowSettings, bool>((ITransportFlowSettings vo) => vo.SkipTokenInfoGeneration, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_SkipMdmGeneration = SchemaProvider.CreateDataPropertySchema(typeSchema34, "SkipMdmGeneration", "Skip Mdm generation", new ConcretePrimitiveScalarInfo<ITransportFlowSettings, bool>((ITransportFlowSettings vo) => vo.SkipMdmGeneration, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_UseMdmFlow = SchemaProvider.CreateDataPropertySchema(typeSchema34, "UseMdmFlow", "Use the Mdm Flow", new ConcretePrimitiveScalarInfo<ITransportFlowSettings, bool>((ITransportFlowSettings vo) => vo.UseMdmFlow, null, null, null, 0), true, "false", null);
			InstanceProviderBuilder instanceProviderBuilder67 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ITransportFlowSettings_DataAccessor_ dynamicStorageSelection_ITransportFlowSettings_DataAccessor_ = new _DynamicStorageSelection_ITransportFlowSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name35, ref dynamicStorageSelection_ITransportFlowSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_SkipTokenInfoGeneration, context, ref dynamicStorageSelection_ITransportFlowSettings_DataAccessor_._SkipTokenInfoGeneration_MaterializedValue_, ref dynamicStorageSelection_ITransportFlowSettings_DataAccessor_._SkipTokenInfoGeneration_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_SkipMdmGeneration, context, ref dynamicStorageSelection_ITransportFlowSettings_DataAccessor_._SkipMdmGeneration_MaterializedValue_, ref dynamicStorageSelection_ITransportFlowSettings_DataAccessor_._SkipMdmGeneration_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_UseMdmFlow, context, ref dynamicStorageSelection_ITransportFlowSettings_DataAccessor_._UseMdmFlow_MaterializedValue_, ref dynamicStorageSelection_ITransportFlowSettings_DataAccessor_._UseMdmFlow_ValueProvider_);
				return dynamicStorageSelection_ITransportFlowSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema34, 3, typeof(_DynamicStorageSelection_ITransportFlowSettings_Implementation_), typeof(_DynamicStorageSelection_ITransportFlowSettings_DataAccessor_), instanceProviderBuilder67);
			InstanceProviderBuilder instanceProviderBuilder68 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ITransportFlowSettings_Implementation_ dataOnly_ITransportFlowSettings_Implementation_ = new _DataOnly_ITransportFlowSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name35, ref dataOnly_ITransportFlowSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_SkipTokenInfoGeneration, context, ref dataOnly_ITransportFlowSettings_Implementation_._SkipTokenInfoGeneration_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_SkipMdmGeneration, context, ref dataOnly_ITransportFlowSettings_Implementation_._SkipMdmGeneration_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_UseMdmFlow, context, ref dataOnly_ITransportFlowSettings_Implementation_._UseMdmFlow_MaterializedValue_);
				return dataOnly_ITransportFlowSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema34, 0, typeof(_DataOnly_ITransportFlowSettings_Implementation_), typeof(_DataOnly_ITransportFlowSettings_Implementation_), instanceProviderBuilder68);
			TypeSchema typeSchema35 = SchemaProvider.CreateTypeSchema<IBoomerangSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name36 = SchemaProvider.CreateIdentityPropertySchema(typeSchema35, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Enabled8 = SchemaProvider.CreateDataPropertySchema(typeSchema35, "Enabled", "Whether the Boomerang feature is enabled.", new ConcretePrimitiveScalarInfo<IBoomerangSettings, bool>((IBoomerangSettings vo) => vo.Enabled, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_MasterKeyRegistryPath = SchemaProvider.CreateDataPropertySchema(typeSchema35, "MasterKeyRegistryPath", "MasterKey Registry Path used for the Boomerang algorithm", new ConcretePrimitiveScalarInfo<IBoomerangSettings, string>((IBoomerangSettings vo) => vo.MasterKeyRegistryPath, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_MasterKeyRegistryKeyName = SchemaProvider.CreateDataPropertySchema(typeSchema35, "MasterKeyRegistryKeyName", "MasterKey Registry Key Name used for the Boomerang algorithm", new ConcretePrimitiveScalarInfo<IBoomerangSettings, string>((IBoomerangSettings vo) => vo.MasterKeyRegistryKeyName, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_NumberOfValidIntervalsInDays = SchemaProvider.CreateDataPropertySchema(typeSchema35, "NumberOfValidIntervalsInDays", "Valid Intervals (number of days) used for the Boomerang algorithm", new ConcretePrimitiveScalarInfo<IBoomerangSettings, uint>((IBoomerangSettings vo) => vo.NumberOfValidIntervalsInDays, null, null, null, 0), true, "3", null);
			InstanceProviderBuilder instanceProviderBuilder69 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IBoomerangSettings_DataAccessor_ dynamicStorageSelection_IBoomerangSettings_DataAccessor_ = new _DynamicStorageSelection_IBoomerangSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name36, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled8, context, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._Enabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_MasterKeyRegistryPath, context, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._MasterKeyRegistryPath_MaterializedValue_, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._MasterKeyRegistryPath_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<string>(propertySchema_MasterKeyRegistryKeyName, context, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._MasterKeyRegistryKeyName_MaterializedValue_, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._MasterKeyRegistryKeyName_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<uint>(propertySchema_NumberOfValidIntervalsInDays, context, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._NumberOfValidIntervalsInDays_MaterializedValue_, ref dynamicStorageSelection_IBoomerangSettings_DataAccessor_._NumberOfValidIntervalsInDays_ValueProvider_);
				return dynamicStorageSelection_IBoomerangSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema35, 3, typeof(_DynamicStorageSelection_IBoomerangSettings_Implementation_), typeof(_DynamicStorageSelection_IBoomerangSettings_DataAccessor_), instanceProviderBuilder69);
			InstanceProviderBuilder instanceProviderBuilder70 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IBoomerangSettings_Implementation_ dataOnly_IBoomerangSettings_Implementation_ = new _DataOnly_IBoomerangSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name36, ref dataOnly_IBoomerangSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled8, context, ref dataOnly_IBoomerangSettings_Implementation_._Enabled_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_MasterKeyRegistryPath, context, ref dataOnly_IBoomerangSettings_Implementation_._MasterKeyRegistryPath_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_MasterKeyRegistryKeyName, context, ref dataOnly_IBoomerangSettings_Implementation_._MasterKeyRegistryKeyName_MaterializedValue_);
				initializer.InitializeForDataOnly<uint>(propertySchema_NumberOfValidIntervalsInDays, context, ref dataOnly_IBoomerangSettings_Implementation_._NumberOfValidIntervalsInDays_MaterializedValue_);
				return dataOnly_IBoomerangSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema35, 0, typeof(_DataOnly_IBoomerangSettings_Implementation_), typeof(_DataOnly_IBoomerangSettings_Implementation_), instanceProviderBuilder70);
			TypeSchema typeSchema36 = SchemaProvider.CreateTypeSchema<IFeature>("Feature. This pre-canned structure makes authoring of feature configurations with on/off toggle easy.", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name37 = SchemaProvider.CreateIdentityPropertySchema(typeSchema36, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Enabled9 = SchemaProvider.CreateDataPropertySchema(typeSchema36, "Enabled", "Indicates if a feature is enabled.", new ConcretePrimitiveScalarInfo<IFeature, bool>((IFeature vo) => vo.Enabled, null, null, null, 0), true, "false", null);
			InstanceProviderBuilder instanceProviderBuilder71 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IFeature_DataAccessor_ dynamicStorageSelection_IFeature_DataAccessor_ = new _DynamicStorageSelection_IFeature_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name37, ref dynamicStorageSelection_IFeature_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled9, context, ref dynamicStorageSelection_IFeature_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IFeature_DataAccessor_._Enabled_ValueProvider_);
				return dynamicStorageSelection_IFeature_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema36, 3, typeof(_DynamicStorageSelection_IFeature_Implementation_), typeof(_DynamicStorageSelection_IFeature_DataAccessor_), instanceProviderBuilder71);
			InstanceProviderBuilder instanceProviderBuilder72 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IFeature_Implementation_ dataOnly_IFeature_Implementation_ = new _DataOnly_IFeature_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name37, ref dataOnly_IFeature_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled9, context, ref dataOnly_IFeature_Implementation_._Enabled_MaterializedValue_);
				return dataOnly_IFeature_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema36, 0, typeof(_DataOnly_IFeature_Implementation_), typeof(_DataOnly_IFeature_Implementation_), instanceProviderBuilder72);
			TypeSchema typeSchema37 = SchemaProvider.CreateTypeSchema<IOrganizationNameSettings>("Organization Name Setting", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name38 = SchemaProvider.CreateIdentityPropertySchema(typeSchema37, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_OrgNames = SchemaProvider.CreateDataPropertySchema(typeSchema37, "OrgNames", string.Empty, new ConcretePrimitiveListInfo<IOrganizationNameSettings, string>((IOrganizationNameSettings vo) => vo.OrgNames, null, null, null), true, null, null);
			DataPropertySchema propertySchema_DogfoodOrgNames = SchemaProvider.CreateDataPropertySchema(typeSchema37, "DogfoodOrgNames", string.Empty, new ConcretePrimitiveListInfo<IOrganizationNameSettings, string>((IOrganizationNameSettings vo) => vo.DogfoodOrgNames, null, null, null), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder73 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IOrganizationNameSettings_DataAccessor_ dynamicStorageSelection_IOrganizationNameSettings_DataAccessor_ = new _DynamicStorageSelection_IOrganizationNameSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name38, ref dynamicStorageSelection_IOrganizationNameSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_OrgNames, context, ref dynamicStorageSelection_IOrganizationNameSettings_DataAccessor_._OrgNames_MaterializedValue_, ref dynamicStorageSelection_IOrganizationNameSettings_DataAccessor_._OrgNames_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<IList<string>>(propertySchema_DogfoodOrgNames, context, ref dynamicStorageSelection_IOrganizationNameSettings_DataAccessor_._DogfoodOrgNames_MaterializedValue_, ref dynamicStorageSelection_IOrganizationNameSettings_DataAccessor_._DogfoodOrgNames_ValueProvider_);
				return dynamicStorageSelection_IOrganizationNameSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema37, 3, typeof(_DynamicStorageSelection_IOrganizationNameSettings_Implementation_), typeof(_DynamicStorageSelection_IOrganizationNameSettings_DataAccessor_), instanceProviderBuilder73);
			InstanceProviderBuilder instanceProviderBuilder74 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IOrganizationNameSettings_Implementation_ dataOnly_IOrganizationNameSettings_Implementation_ = new _DataOnly_IOrganizationNameSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name38, ref dataOnly_IOrganizationNameSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_OrgNames, context, ref dataOnly_IOrganizationNameSettings_Implementation_._OrgNames_MaterializedValue_);
				initializer.InitializeForDataOnly<string>(propertySchema_DogfoodOrgNames, context, ref dataOnly_IOrganizationNameSettings_Implementation_._DogfoodOrgNames_MaterializedValue_);
				return dataOnly_IOrganizationNameSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema37, 0, typeof(_DataOnly_IOrganizationNameSettings_Implementation_), typeof(_DataOnly_IOrganizationNameSettings_Implementation_), instanceProviderBuilder74);
			TypeSchema typeSchema38 = SchemaProvider.CreateTypeSchema<IOverrideSyncSettings>("Override sync settings.", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(IFeature));
			IdentityPropertySchema propertySchema_Name39 = SchemaProvider.CreateIdentityPropertySchema(typeSchema38, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Enabled10 = SchemaProvider.CreateDataPropertySchema(typeSchema38, "Enabled", "Indicates if a feature is enabled.", new ConcretePrimitiveScalarInfo<IFeature, bool>((IFeature vo) => vo.Enabled, null, null, null, 0), true, "false", null);
			DataPropertySchema propertySchema_RefreshInterval = SchemaProvider.CreateDataPropertySchema(typeSchema38, "RefreshInterval", string.Empty, new ConcretePrimitiveScalarInfo<IOverrideSyncSettings, TimeSpan>((IOverrideSyncSettings vo) => vo.RefreshInterval, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder75 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IOverrideSyncSettings_DataAccessor_ dynamicStorageSelection_IOverrideSyncSettings_DataAccessor_ = new _DynamicStorageSelection_IOverrideSyncSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name39, ref dynamicStorageSelection_IOverrideSyncSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled10, context, ref dynamicStorageSelection_IOverrideSyncSettings_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IOverrideSyncSettings_DataAccessor_._Enabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_RefreshInterval, context, ref dynamicStorageSelection_IOverrideSyncSettings_DataAccessor_._RefreshInterval_MaterializedValue_, ref dynamicStorageSelection_IOverrideSyncSettings_DataAccessor_._RefreshInterval_ValueProvider_);
				return dynamicStorageSelection_IOverrideSyncSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema38, 3, typeof(_DynamicStorageSelection_IOverrideSyncSettings_Implementation_), typeof(_DynamicStorageSelection_IOverrideSyncSettings_DataAccessor_), instanceProviderBuilder75);
			InstanceProviderBuilder instanceProviderBuilder76 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IOverrideSyncSettings_Implementation_ dataOnly_IOverrideSyncSettings_Implementation_ = new _DataOnly_IOverrideSyncSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name39, ref dataOnly_IOverrideSyncSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled10, context, ref dataOnly_IOverrideSyncSettings_Implementation_._Enabled_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_RefreshInterval, context, ref dataOnly_IOverrideSyncSettings_Implementation_._RefreshInterval_MaterializedValue_);
				return dataOnly_IOverrideSyncSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema38, 0, typeof(_DataOnly_IOverrideSyncSettings_Implementation_), typeof(_DataOnly_IOverrideSyncSettings_Implementation_), instanceProviderBuilder76);
			TypeSchema typeSchema39 = SchemaProvider.CreateTypeSchema<IBlackoutSettings>(string.Empty, _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name40 = SchemaProvider.CreateIdentityPropertySchema(typeSchema39, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_StartTime = SchemaProvider.CreateDataPropertySchema(typeSchema39, "StartTime", "Start of daily blackout period for background load.", new ConcretePrimitiveScalarInfo<IBlackoutSettings, TimeSpan>((IBlackoutSettings vo) => vo.StartTime, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_EndTime = SchemaProvider.CreateDataPropertySchema(typeSchema39, "EndTime", "End of daily blackout period for background load.", new ConcretePrimitiveScalarInfo<IBlackoutSettings, TimeSpan>((IBlackoutSettings vo) => vo.EndTime, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder77 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IBlackoutSettings_DataAccessor_ dynamicStorageSelection_IBlackoutSettings_DataAccessor_ = new _DynamicStorageSelection_IBlackoutSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name40, ref dynamicStorageSelection_IBlackoutSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_StartTime, context, ref dynamicStorageSelection_IBlackoutSettings_DataAccessor_._StartTime_MaterializedValue_, ref dynamicStorageSelection_IBlackoutSettings_DataAccessor_._StartTime_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_EndTime, context, ref dynamicStorageSelection_IBlackoutSettings_DataAccessor_._EndTime_MaterializedValue_, ref dynamicStorageSelection_IBlackoutSettings_DataAccessor_._EndTime_ValueProvider_);
				return dynamicStorageSelection_IBlackoutSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema39, 3, typeof(_DynamicStorageSelection_IBlackoutSettings_Implementation_), typeof(_DynamicStorageSelection_IBlackoutSettings_DataAccessor_), instanceProviderBuilder77);
			InstanceProviderBuilder instanceProviderBuilder78 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IBlackoutSettings_Implementation_ dataOnly_IBlackoutSettings_Implementation_ = new _DataOnly_IBlackoutSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name40, ref dataOnly_IBlackoutSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_StartTime, context, ref dataOnly_IBlackoutSettings_Implementation_._StartTime_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_EndTime, context, ref dataOnly_IBlackoutSettings_Implementation_._EndTime_MaterializedValue_);
				return dataOnly_IBlackoutSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema39, 0, typeof(_DataOnly_IBlackoutSettings_Implementation_), typeof(_DataOnly_IBlackoutSettings_Implementation_), instanceProviderBuilder78);
			TypeSchema typeSchema40 = SchemaProvider.CreateTypeSchema<IDiskLatencyMonitorSettings>("<summary> Disk latency resource monitor settings. </summary>", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name41 = SchemaProvider.CreateIdentityPropertySchema(typeSchema40, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_FixedTimeAverageWindowBucket = SchemaProvider.CreateDataPropertySchema(typeSchema40, "FixedTimeAverageWindowBucket", "<summary> Length of the window bucket for disk latency average. </summary>", new ConcretePrimitiveScalarInfo<IDiskLatencyMonitorSettings, TimeSpan>((IDiskLatencyMonitorSettings vo) => vo.FixedTimeAverageWindowBucket, null, null, null, 0), true, null, null);
			DataPropertySchema propertySchema_FixedTimeAverageNumberOfBuckets = SchemaProvider.CreateDataPropertySchema(typeSchema40, "FixedTimeAverageNumberOfBuckets", "<summary> Maximum number of buckets to consider for average. </summary>", new ConcretePrimitiveScalarInfo<IDiskLatencyMonitorSettings, int>((IDiskLatencyMonitorSettings vo) => vo.FixedTimeAverageNumberOfBuckets, null, null, null, 0), true, "0", null);
			DataPropertySchema propertySchema_ResourceHealthPollerInterval = SchemaProvider.CreateDataPropertySchema(typeSchema40, "ResourceHealthPollerInterval", "<summary> The interval at which the resource health monitor should poll. </summary>", new ConcretePrimitiveScalarInfo<IDiskLatencyMonitorSettings, TimeSpan>((IDiskLatencyMonitorSettings vo) => vo.ResourceHealthPollerInterval, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder79 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_ dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_ = new _DynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name41, ref dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_FixedTimeAverageWindowBucket, context, ref dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_._FixedTimeAverageWindowBucket_MaterializedValue_, ref dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_._FixedTimeAverageWindowBucket_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_FixedTimeAverageNumberOfBuckets, context, ref dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_._FixedTimeAverageNumberOfBuckets_MaterializedValue_, ref dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_._FixedTimeAverageNumberOfBuckets_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_ResourceHealthPollerInterval, context, ref dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_._ResourceHealthPollerInterval_MaterializedValue_, ref dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_._ResourceHealthPollerInterval_ValueProvider_);
				return dynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema40, 3, typeof(_DynamicStorageSelection_IDiskLatencyMonitorSettings_Implementation_), typeof(_DynamicStorageSelection_IDiskLatencyMonitorSettings_DataAccessor_), instanceProviderBuilder79);
			InstanceProviderBuilder instanceProviderBuilder80 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IDiskLatencyMonitorSettings_Implementation_ dataOnly_IDiskLatencyMonitorSettings_Implementation_ = new _DataOnly_IDiskLatencyMonitorSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name41, ref dataOnly_IDiskLatencyMonitorSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_FixedTimeAverageWindowBucket, context, ref dataOnly_IDiskLatencyMonitorSettings_Implementation_._FixedTimeAverageWindowBucket_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_FixedTimeAverageNumberOfBuckets, context, ref dataOnly_IDiskLatencyMonitorSettings_Implementation_._FixedTimeAverageNumberOfBuckets_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_ResourceHealthPollerInterval, context, ref dataOnly_IDiskLatencyMonitorSettings_Implementation_._ResourceHealthPollerInterval_MaterializedValue_);
				return dataOnly_IDiskLatencyMonitorSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema40, 0, typeof(_DataOnly_IDiskLatencyMonitorSettings_Implementation_), typeof(_DataOnly_IDiskLatencyMonitorSettings_Implementation_), instanceProviderBuilder80);
			TypeSchema typeSchema41 = SchemaProvider.CreateTypeSchema<IResourceSettings>("<summary> Resource settings. </summary>", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name42 = SchemaProvider.CreateIdentityPropertySchema(typeSchema41, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Enabled11 = SchemaProvider.CreateDataPropertySchema(typeSchema41, "Enabled", "<summary> Resource monitoring is enabled. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, bool>((IResourceSettings vo) => vo.Enabled, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_MaxConcurrency2 = SchemaProvider.CreateDataPropertySchema(typeSchema41, "MaxConcurrency", "<summary> Maximum threads allocated for this resource. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.MaxConcurrency, null, null, null, 0), true, "1024", null);
			DataPropertySchema propertySchema_DiscretionaryUnderloaded = SchemaProvider.CreateDataPropertySchema(typeSchema41, "DiscretionaryUnderloaded", "<summary> Underloaded threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.DiscretionaryUnderloaded, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_DiscretionaryOverloaded = SchemaProvider.CreateDataPropertySchema(typeSchema41, "DiscretionaryOverloaded", "<summary> Overloaded threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.DiscretionaryOverloaded, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_DiscretionaryCritical = SchemaProvider.CreateDataPropertySchema(typeSchema41, "DiscretionaryCritical", "<summary> Critical threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.DiscretionaryCritical, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_InternalMaintenanceUnderloaded = SchemaProvider.CreateDataPropertySchema(typeSchema41, "InternalMaintenanceUnderloaded", "<summary> Underloaded threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.InternalMaintenanceUnderloaded, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_InternalMaintenanceOverloaded = SchemaProvider.CreateDataPropertySchema(typeSchema41, "InternalMaintenanceOverloaded", "<summary> Overloaded threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.InternalMaintenanceOverloaded, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_InternalMaintenanceCritical = SchemaProvider.CreateDataPropertySchema(typeSchema41, "InternalMaintenanceCritical", "<summary> Critical threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.InternalMaintenanceCritical, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_CustomerExpectationUnderloaded = SchemaProvider.CreateDataPropertySchema(typeSchema41, "CustomerExpectationUnderloaded", "<summary> Underloaded threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.CustomerExpectationUnderloaded, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_CustomerExpectationOverloaded = SchemaProvider.CreateDataPropertySchema(typeSchema41, "CustomerExpectationOverloaded", "<summary> Overloaded threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.CustomerExpectationOverloaded, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_CustomerExpectationCritical = SchemaProvider.CreateDataPropertySchema(typeSchema41, "CustomerExpectationCritical", "<summary> Critical threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.CustomerExpectationCritical, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_UrgentUnderloaded = SchemaProvider.CreateDataPropertySchema(typeSchema41, "UrgentUnderloaded", "<summary> Underloaded threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.UrgentUnderloaded, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_UrgentOverloaded = SchemaProvider.CreateDataPropertySchema(typeSchema41, "UrgentOverloaded", "<summary> Overloaded threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.UrgentOverloaded, null, null, null, 0), false, null, null);
			DataPropertySchema propertySchema_UrgentCritical = SchemaProvider.CreateDataPropertySchema(typeSchema41, "UrgentCritical", "<summary> Critical threshold. </summary>", new ConcretePrimitiveScalarInfo<IResourceSettings, int>((IResourceSettings vo) => vo.UrgentCritical, null, null, null, 0), false, null, null);
			InstanceProviderBuilder instanceProviderBuilder81 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IResourceSettings_DataAccessor_ dynamicStorageSelection_IResourceSettings_DataAccessor_ = new _DynamicStorageSelection_IResourceSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name42, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled11, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._Enabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxConcurrency2, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._MaxConcurrency_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._MaxConcurrency_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_DiscretionaryUnderloaded, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._DiscretionaryUnderloaded_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._DiscretionaryUnderloaded_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_DiscretionaryOverloaded, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._DiscretionaryOverloaded_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._DiscretionaryOverloaded_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_DiscretionaryCritical, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._DiscretionaryCritical_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._DiscretionaryCritical_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_InternalMaintenanceUnderloaded, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._InternalMaintenanceUnderloaded_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._InternalMaintenanceUnderloaded_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_InternalMaintenanceOverloaded, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._InternalMaintenanceOverloaded_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._InternalMaintenanceOverloaded_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_InternalMaintenanceCritical, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._InternalMaintenanceCritical_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._InternalMaintenanceCritical_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_CustomerExpectationUnderloaded, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._CustomerExpectationUnderloaded_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._CustomerExpectationUnderloaded_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_CustomerExpectationOverloaded, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._CustomerExpectationOverloaded_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._CustomerExpectationOverloaded_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_CustomerExpectationCritical, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._CustomerExpectationCritical_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._CustomerExpectationCritical_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_UrgentUnderloaded, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._UrgentUnderloaded_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._UrgentUnderloaded_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_UrgentOverloaded, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._UrgentOverloaded_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._UrgentOverloaded_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_UrgentCritical, context, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._UrgentCritical_MaterializedValue_, ref dynamicStorageSelection_IResourceSettings_DataAccessor_._UrgentCritical_ValueProvider_);
				return dynamicStorageSelection_IResourceSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema41, 3, typeof(_DynamicStorageSelection_IResourceSettings_Implementation_), typeof(_DynamicStorageSelection_IResourceSettings_DataAccessor_), instanceProviderBuilder81);
			InstanceProviderBuilder instanceProviderBuilder82 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IResourceSettings_Implementation_ dataOnly_IResourceSettings_Implementation_ = new _DataOnly_IResourceSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name42, ref dataOnly_IResourceSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled11, context, ref dataOnly_IResourceSettings_Implementation_._Enabled_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxConcurrency2, context, ref dataOnly_IResourceSettings_Implementation_._MaxConcurrency_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_DiscretionaryUnderloaded, context, ref dataOnly_IResourceSettings_Implementation_._DiscretionaryUnderloaded_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_DiscretionaryOverloaded, context, ref dataOnly_IResourceSettings_Implementation_._DiscretionaryOverloaded_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_DiscretionaryCritical, context, ref dataOnly_IResourceSettings_Implementation_._DiscretionaryCritical_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_InternalMaintenanceUnderloaded, context, ref dataOnly_IResourceSettings_Implementation_._InternalMaintenanceUnderloaded_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_InternalMaintenanceOverloaded, context, ref dataOnly_IResourceSettings_Implementation_._InternalMaintenanceOverloaded_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_InternalMaintenanceCritical, context, ref dataOnly_IResourceSettings_Implementation_._InternalMaintenanceCritical_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_CustomerExpectationUnderloaded, context, ref dataOnly_IResourceSettings_Implementation_._CustomerExpectationUnderloaded_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_CustomerExpectationOverloaded, context, ref dataOnly_IResourceSettings_Implementation_._CustomerExpectationOverloaded_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_CustomerExpectationCritical, context, ref dataOnly_IResourceSettings_Implementation_._CustomerExpectationCritical_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_UrgentUnderloaded, context, ref dataOnly_IResourceSettings_Implementation_._UrgentUnderloaded_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_UrgentOverloaded, context, ref dataOnly_IResourceSettings_Implementation_._UrgentOverloaded_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_UrgentCritical, context, ref dataOnly_IResourceSettings_Implementation_._UrgentCritical_MaterializedValue_);
				return dataOnly_IResourceSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema41, 0, typeof(_DataOnly_IResourceSettings_Implementation_), typeof(_DataOnly_IResourceSettings_Implementation_), instanceProviderBuilder82);
			TypeSchema typeSchema42 = SchemaProvider.CreateTypeSchema<ISystemWorkloadManagerSettings>("<summary> System workload manager settings. </summary>", _ParallaxSchemaProvider_SchemaProvider_.schema, 1, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name43 = SchemaProvider.CreateIdentityPropertySchema(typeSchema42, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_MaxConcurrency3 = SchemaProvider.CreateDataPropertySchema(typeSchema42, "MaxConcurrency", "<summary> Maximum threads consumed by system workload manager. </summary>", new ConcretePrimitiveScalarInfo<ISystemWorkloadManagerSettings, int>((ISystemWorkloadManagerSettings vo) => vo.MaxConcurrency, null, null, null, 0), true, "50", null);
			DataPropertySchema propertySchema_RefreshCycle = SchemaProvider.CreateDataPropertySchema(typeSchema42, "RefreshCycle", "<summary> Admission control refresh interval and execution engine timer interval. </summary>", new ConcretePrimitiveScalarInfo<ISystemWorkloadManagerSettings, TimeSpan>((ISystemWorkloadManagerSettings vo) => vo.RefreshCycle, null, null, null, 0), true, null, null);
			InstanceProviderBuilder instanceProviderBuilder83 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_ dynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_ = new _DynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name43, ref dynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxConcurrency3, context, ref dynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_._MaxConcurrency_MaterializedValue_, ref dynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_._MaxConcurrency_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<TimeSpan>(propertySchema_RefreshCycle, context, ref dynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_._RefreshCycle_MaterializedValue_, ref dynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_._RefreshCycle_ValueProvider_);
				return dynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema42, 3, typeof(_DynamicStorageSelection_ISystemWorkloadManagerSettings_Implementation_), typeof(_DynamicStorageSelection_ISystemWorkloadManagerSettings_DataAccessor_), instanceProviderBuilder83);
			InstanceProviderBuilder instanceProviderBuilder84 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_ISystemWorkloadManagerSettings_Implementation_ dataOnly_ISystemWorkloadManagerSettings_Implementation_ = new _DataOnly_ISystemWorkloadManagerSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name43, ref dataOnly_ISystemWorkloadManagerSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxConcurrency3, context, ref dataOnly_ISystemWorkloadManagerSettings_Implementation_._MaxConcurrency_MaterializedValue_);
				initializer.InitializeForDataOnly<TimeSpan>(propertySchema_RefreshCycle, context, ref dataOnly_ISystemWorkloadManagerSettings_Implementation_._RefreshCycle_MaterializedValue_);
				return dataOnly_ISystemWorkloadManagerSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema42, 0, typeof(_DataOnly_ISystemWorkloadManagerSettings_Implementation_), typeof(_DataOnly_ISystemWorkloadManagerSettings_Implementation_), instanceProviderBuilder84);
			TypeSchema typeSchema43 = SchemaProvider.CreateTypeSchema<IWorkloadSettings>("<summary> Workload policy. </summary>", _ParallaxSchemaProvider_SchemaProvider_.schema, 0, typeof(ISettings));
			IdentityPropertySchema propertySchema_Name = SchemaProvider.CreateIdentityPropertySchema(typeSchema43, "Name", "Feature name.", new ConcretePrimitiveScalarInfo<ISettings, string>((ISettings vo) => vo.Name, null, null, null, 0));
			DataPropertySchema propertySchema_Classification = SchemaProvider.CreateDataPropertySchema(typeSchema43, "Classification", "<summary> Workload classification. </summary>", new ConcretePrimitiveScalarInfo<IWorkloadSettings, WorkloadClassification>((IWorkloadSettings vo) => vo.Classification, null, null, null, 0), true, "Discretionary", null);
			DataPropertySchema propertySchema_MaxConcurrency = SchemaProvider.CreateDataPropertySchema(typeSchema43, "MaxConcurrency", "<summary> Maximum threads allocated for this workload. </summary>", new ConcretePrimitiveScalarInfo<IWorkloadSettings, int>((IWorkloadSettings vo) => vo.MaxConcurrency, null, null, null, 0), true, "1024", null);
			DataPropertySchema propertySchema_Enabled = SchemaProvider.CreateDataPropertySchema(typeSchema43, "Enabled", "<summary> Indicates if workload is enabled. </summary>", new ConcretePrimitiveScalarInfo<IWorkloadSettings, bool>((IWorkloadSettings vo) => vo.Enabled, null, null, null, 0), true, "true", null);
			DataPropertySchema propertySchema_EnabledDuringBlackout = SchemaProvider.CreateDataPropertySchema(typeSchema43, "EnabledDuringBlackout", "<summary> Indicates if workload should continue running during blackout. </summary>", new ConcretePrimitiveScalarInfo<IWorkloadSettings, bool>((IWorkloadSettings vo) => vo.EnabledDuringBlackout, null, null, null, 0), true, "true", null);
			InstanceProviderBuilder instanceProviderBuilder85 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DynamicStorageSelection_IWorkloadSettings_DataAccessor_ dynamicStorageSelection_IWorkloadSettings_DataAccessor_ = new _DynamicStorageSelection_IWorkloadSettings_DataAccessor_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._Name_MaterializedValue_);
				initializer.InitializeForDynamicStorageSelection<WorkloadClassification>(propertySchema_Classification, context, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._Classification_MaterializedValue_, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._Classification_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<int>(propertySchema_MaxConcurrency, context, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._MaxConcurrency_MaterializedValue_, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._MaxConcurrency_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_Enabled, context, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._Enabled_MaterializedValue_, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._Enabled_ValueProvider_);
				initializer.InitializeForDynamicStorageSelection<bool>(propertySchema_EnabledDuringBlackout, context, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._EnabledDuringBlackout_MaterializedValue_, ref dynamicStorageSelection_IWorkloadSettings_DataAccessor_._EnabledDuringBlackout_ValueProvider_);
				return dynamicStorageSelection_IWorkloadSettings_DataAccessor_;
			};
			SchemaProvider.CreateTypeImplementation("DynamicStorageSelection", "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces", typeSchema43, 3, typeof(_DynamicStorageSelection_IWorkloadSettings_Implementation_), typeof(_DynamicStorageSelection_IWorkloadSettings_DataAccessor_), instanceProviderBuilder85);
			InstanceProviderBuilder instanceProviderBuilder86 = delegate(ICollection<VariantFilter> context, IObjectDataInitializer initializer)
			{
				_DataOnly_IWorkloadSettings_Implementation_ dataOnly_IWorkloadSettings_Implementation_ = new _DataOnly_IWorkloadSettings_Implementation_();
				initializer.InitializeIdentityValue<string>(propertySchema_Name, ref dataOnly_IWorkloadSettings_Implementation_._Name_MaterializedValue_);
				initializer.InitializeForDataOnly<WorkloadClassification>(propertySchema_Classification, context, ref dataOnly_IWorkloadSettings_Implementation_._Classification_MaterializedValue_);
				initializer.InitializeForDataOnly<int>(propertySchema_MaxConcurrency, context, ref dataOnly_IWorkloadSettings_Implementation_._MaxConcurrency_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_Enabled, context, ref dataOnly_IWorkloadSettings_Implementation_._Enabled_MaterializedValue_);
				initializer.InitializeForDataOnly<bool>(propertySchema_EnabledDuringBlackout, context, ref dataOnly_IWorkloadSettings_Implementation_._EnabledDuringBlackout_MaterializedValue_);
				return dataOnly_IWorkloadSettings_Implementation_;
			};
			SchemaProvider.CreateTypeImplementation("DataOnly", "Implementation with a fully materialized and context-unaware state initialized at data source loading time", typeSchema43, 0, typeof(_DataOnly_IWorkloadSettings_Implementation_), typeof(_DataOnly_IWorkloadSettings_Implementation_), instanceProviderBuilder86);
		}

		private static readonly Schema schema = SchemaProvider.CreateSchema(Guid.Parse("811bdf56bf444b9fac19c5a53ca918da"), "ParallaxSchemaProvider", "ParallaxSchemaProvider");
	}
}
