using System;
using System.Data;
using Microsoft.Exchange.Configuration.Tasks;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Management.ControlPanel;
using Microsoft.Exchange.MessagingPolicies.Rules;

namespace Microsoft.Exchange.Management.DDIService
{
	public static class AntimalwareCodeBehind
	{
		public static void PostGetForSDOActionPolicy(DataRow inputrow, DataTable dataTable, DataObjectStore store)
		{
			if (dataTable.Rows.Count == 0)
			{
				return;
			}
			DataRow dataRow = dataTable.Rows[0];
			string value;
			switch ((MalwareFilteringAction)dataRow["Action"])
			{
			case MalwareFilteringAction.DeleteMessage:
				value = Strings.AntimalwareSDODetectionResponseBlock;
				break;
			case MalwareFilteringAction.DeleteAttachmentAndUseDefaultAlertText:
				value = Strings.AntimalwareSDODetectionResponseDefault;
				break;
			case MalwareFilteringAction.DeleteAttachmentAndUseCustomAlertText:
				value = Strings.AntimalwareSDODetectionResponseCustom;
				break;
			default:
				value = string.Empty;
				break;
			}
			dataRow["SDOMalwareResponse"] = value;
			dataRow["SDOSenderNotificationsNone"] = (dataRow["EnableInternalSenderNotifications"].IsFalse() && dataRow["EnableExternalSenderNotifications"].IsFalse());
			dataRow["SDOAdminNotificationsNone"] = (dataRow["EnableInternalSenderAdminNotifications"].IsFalse() && dataRow["EnableExternalSenderAdminNotifications"].IsFalse());
		}

		public static void PostGetForSDOActionRule(DataRow inputrow, DataTable dataTable, DataObjectStore store)
		{
			if (dataTable.Rows.Count == 0)
			{
				return;
			}
			DataRow dataRow = dataTable.Rows[0];
			if (!DDIHelper.IsEmptyValue(dataRow["Description"]))
			{
				RuleDescription ruleDescription = (RuleDescription)dataRow["Description"];
				dataRow["RuleDescriptionIf"] = ruleDescription.RuleDescriptionIf;
				dataRow["RuleDescriptionTakeActions"] = ruleDescription.RuleDescriptionTakeActions;
				dataRow["RuleDescriptionExceptIf"] = ruleDescription.RuleDescriptionExceptIf;
				dataRow["ConditionDescriptions"] = ruleDescription.ConditionDescriptions.ToArray();
				dataRow["ActionDescriptions"] = ruleDescription.ActionDescriptions.ToArray();
				dataRow["ExceptionDescriptions"] = ruleDescription.ExceptionDescriptions.ToArray();
			}
		}

		public static void PostGetListWorkflow(DataRow inputrow, DataTable dataTable, DataObjectStore store)
		{
			DataRow dataRow = dataTable.NewRow();
			dataRow["Identity"] = new Identity(Guid.Empty.ToString(), "Default");
			dataRow["RuleName"] = "Default";
			dataRow["State"] = "Enabled";
			dataRow["Priority"] = int.MaxValue;
			dataTable.Rows.Add(dataRow);
		}

		public static bool IsDefaultPolicyIdentity(object identity)
		{
			return identity is Identity && string.Compare(((Identity)identity).RawIdentity, Guid.Empty.ToString(), true) == 0;
		}

		public static PeopleIdentity[] ConvertToPeopleIdentity(object identity)
		{
			if (identity is RecipientIdParameter[])
			{
				return Identity.ConvertToPeopleIdentity((RecipientIdParameter[])identity);
			}
			return null;
		}
	}
}
