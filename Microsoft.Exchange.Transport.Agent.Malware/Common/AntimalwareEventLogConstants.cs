using System;
using System.Diagnostics;
using Microsoft.Exchange.Diagnostics;

namespace Microsoft.Exchange.Transport.Agent.Malware.Common
{
	public static class AntimalwareEventLogConstants
	{
		public const string EventSource = "MSExchange Antimalware";

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_AntimalwareAgentStarting = new ExEventLog.EventTuple(263954U, 2, EventLogEntryType.Information, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_AntimalwareAgentInitializationFailed = new ExEventLog.EventTuple(3221489437U, 2, EventLogEntryType.Error, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_AntimalwareAgentExiting = new ExEventLog.EventTuple(263964U, 2, EventLogEntryType.Information, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_FilteringServiceAvailable = new ExEventLog.EventTuple(263974U, 2, EventLogEntryType.Information, ExEventLog.EventLevel.High, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogPeriodic")]
		public static readonly ExEventLog.EventTuple Tuple_FilteringServiceNotAvailable = new ExEventLog.EventTuple(3221489447U, 2, EventLogEntryType.Error, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogPeriodic);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_MessageBypassed = new ExEventLog.EventTuple(265945U, 3, EventLogEntryType.Information, ExEventLog.EventLevel.Expert, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_MalwareDetected = new ExEventLog.EventTuple(265954U, 3, EventLogEntryType.Information, ExEventLog.EventLevel.High, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_MessageDeferred = new ExEventLog.EventTuple(265955U, 3, EventLogEntryType.Information, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_MessageWithScanError = new ExEventLog.EventTuple(265956U, 3, EventLogEntryType.Information, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_ScanTimedOut = new ExEventLog.EventTuple(265957U, 3, EventLogEntryType.Warning, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_BiasNotSatisfied = new ExEventLog.EventTuple(265958U, 3, EventLogEntryType.Warning, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_ScannerError = new ExEventLog.EventTuple(265959U, 3, EventLogEntryType.Warning, ExEventLog.EventLevel.Medium, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_MessageNotSubmittedError = new ExEventLog.EventTuple(3221493416U, 4, EventLogEntryType.Error, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_MalwareScanningError = new ExEventLog.EventTuple(3221493417U, 4, EventLogEntryType.Error, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogPeriodic")]
		public static readonly ExEventLog.EventTuple Tuple_PolicyDiscoveryFailed = new ExEventLog.EventTuple(3221493419U, 5, EventLogEntryType.Error, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogPeriodic);

		[EventLogPeriod(Period = "LogPeriodic")]
		public static readonly ExEventLog.EventTuple Tuple_TenantConfigurationError = new ExEventLog.EventTuple(267948U, 5, EventLogEntryType.Warning, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogPeriodic);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_SMTPInvalidAddress = new ExEventLog.EventTuple(267954U, 4, EventLogEntryType.Warning, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_SoftdeleteStoreWriteError = new ExEventLog.EventTuple(3221490417U, 4, EventLogEntryType.Error, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		[EventLogPeriod(Period = "LogAlways")]
		public static readonly ExEventLog.EventTuple Tuple_SoftdeleteStoreWritingSuccessfulAfterFailedAttempt = new ExEventLog.EventTuple(264946U, 3, EventLogEntryType.Information, ExEventLog.EventLevel.Lowest, ExEventLog.EventPeriod.LogAlways);

		private enum Category : short
		{
			General = 1,
			Init,
			ScanResults,
			ScanError,
			PolicyError
		}

		internal enum Message : uint
		{
			AntimalwareAgentStarting = 263954U,
			AntimalwareAgentInitializationFailed = 3221489437U,
			AntimalwareAgentExiting = 263964U,
			FilteringServiceAvailable = 263974U,
			FilteringServiceNotAvailable = 3221489447U,
			MessageBypassed = 265945U,
			MalwareDetected = 265954U,
			MessageDeferred,
			MessageWithScanError,
			ScanTimedOut,
			BiasNotSatisfied,
			ScannerError,
			MessageNotSubmittedError = 3221493416U,
			MalwareScanningError,
			PolicyDiscoveryFailed = 3221493419U,
			TenantConfigurationError = 267948U,
			SMTPInvalidAddress = 267954U,
			SoftdeleteStoreWriteError = 3221490417U,
			SoftdeleteStoreWritingSuccessfulAfterFailedAttempt = 264946U
		}
	}
}
