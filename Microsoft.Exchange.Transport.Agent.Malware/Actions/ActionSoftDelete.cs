using System;
using System.IO;
using System.Text;
using Microsoft.Exchange.Data.Mime;
using Microsoft.Exchange.Data.Transport;
using Microsoft.Exchange.Data.Transport.Email;
using Microsoft.Exchange.Data.Transport.Routing;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Exchange.Extensibility.Internal;
using Microsoft.Exchange.Transport.Agent.Malware.Common;
using Microsoft.Exchange.Transport.Agent.Malware.SoftDelete;
using Microsoft.Exchange.Transport.RightsManagement;

namespace Microsoft.Exchange.Transport.Agent.Malware.Actions
{
	internal class ActionSoftDelete : Action
	{
		public override void Execute(ScanContext context, SubmittedMessageEventSource source, QueuedMessageEventArgs args)
		{
			int num = 0;
			bool flag = false;
			if (context.AgentGlobal.SoftDeleteEnabled)
			{
				Header header = args.MailItem.Message.RootPart.Headers.FindFirst("X-MS-Exchange-Organization-Deferred-Tracking");
				if (header != null)
				{
					StampDefer stampDefer;
					if (StampDefer.TryParse(header.Value, (double)context.AgentGlobal.ServerSettings.DeferWaitTime, out stampDefer))
					{
						num = stampDefer.DeferredCount;
					}
					else
					{
						ExTraceGlobals.ActionsTracer.TraceDebug<string>((long)this.GetHashCode(), "Exception when trying to parse Deferred header value when writing a message to the undeliverable folder. {0}", header.Value);
					}
					try
					{
						args.MailItem.Message.RootPart.Headers.RemoveChild(header);
					}
					catch (InvalidOperationException)
					{
						ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Exception when trying to remove Deferred header from ActionSoftDelete");
					}
				}
				if (ActionSoftDelete.IsTransportDecryptedMessage(args.MailItem))
				{
					if (!this.TryEncryptRmsMessage(args.MailItem))
					{
						flag = true;
					}
				}
				else if (E4eHelper.IsPipelineDecrypted(args.MailItem) && !this.TryEncryptE4eMessage(args.MailItem))
				{
					flag = true;
				}
				if (!flag)
				{
					StoreMessage storeMessage = this.ComposeMessage(args.MailItem);
					context.AgentGlobal.SoftDeleteQueue.Add(storeMessage.MessageId, storeMessage.CreateReplayMimeStream());
				}
			}
			MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_MessageWithScanError, null, new object[]
			{
				args.MailItem.Message.MessageId,
				args.MailItem.Message.Date,
				args.MailItem.FromAddress,
				args.MailItem.MimeStreamLength,
				num
			});
			if (!context.AgentGlobal.SoftDeleteEnabled || flag)
			{
				ActionDeferForever actionDeferForever = new ActionDeferForever();
				actionDeferForever.Execute(context, source, args);
				return;
			}
			context.ScanActionExecuted = ScanAction.SoftDelete;
			base.TrackMalwareAgentInfo(context, source);
			source.Delete();
		}

		internal static bool IsTransportDecryptedMessage(MailItem mailItem)
		{
			object obj;
			return mailItem.Properties.TryGetValue("Microsoft.Exchange.RightsManagement.TransportDecrypted", out obj) && !string.IsNullOrEmpty((string)obj);
		}

		private bool TryEncryptRmsMessage(MailItem mailItem)
		{
			object obj = null;
			if (!mailItem.Properties.TryGetValue("Microsoft.Exchange.RightsManagement.TransportDecryptionPL", out obj) || string.IsNullOrEmpty((string)obj))
			{
				ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Unable to extract publishing license.");
				return false;
			}
			object obj2 = null;
			if (!mailItem.Properties.TryGetValue("Microsoft.Exchange.RightsManagement.TransportDecryptionUL", out obj2) || string.IsNullOrEmpty((string)obj2))
			{
				ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Unable to extract use license.");
				return false;
			}
			object obj3 = null;
			if (!mailItem.Properties.TryGetValue("Microsoft.Exchange.RightsManagement.TransportDecryptionLicenseUri", out obj3) || string.IsNullOrEmpty((string)obj3))
			{
				ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Unable to extract license uri.");
				return false;
			}
			Uri licenseUri = null;
			if (!Uri.TryCreate((string)obj3, UriKind.Absolute, out licenseUri))
			{
				ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Unable to create uri from license string.");
				return false;
			}
			IReadOnlyMailItem readOnlyMailItem = (IReadOnlyMailItem)((ITransportMailItemWrapperFacade)mailItem).TransportMailItem;
			using (RmsEncryptor rmsEncryptor = new RmsEncryptor(readOnlyMailItem.OrganizationId, readOnlyMailItem, obj.ToString(), obj2.ToString(), licenseUri, null))
			{
				IAsyncResult result = rmsEncryptor.BeginEncrypt(null, null);
				AsyncOperationResult<EmailMessage> asyncOperationResult = rmsEncryptor.EndEncrypt(result);
				if (asyncOperationResult.IsSucceeded)
				{
					using (EmailMessage data = asyncOperationResult.Data)
					{
						using (Stream mimeWriteStream = mailItem.GetMimeWriteStream())
						{
							data.MimeDocument.RootPart.WriteTo(mimeWriteStream);
							return true;
						}
					}
				}
				ExTraceGlobals.ActionsTracer.TraceDebug<string, Exception>((long)this.GetHashCode(), "Re-encryption failed for MsgId {0} because of {1}.", mailItem.Message.MessageId, asyncOperationResult.Exception);
			}
			return false;
		}

		private bool TryEncryptE4eMessage(MailItem mailItem)
		{
			IReadOnlyMailItem mailItem2 = (IReadOnlyMailItem)((ITransportMailItemWrapperFacade)mailItem).TransportMailItem;
			bool flag;
			Exception ex;
			EmailMessage originalMessage = E4eEncryptionHelper.GetOriginalMessage(mailItem2, ExTraceGlobals.ActionsTracer, (long)this.GetHashCode(), out flag, out ex);
			if (flag)
			{
				E4eHelper.OverrideMime(mailItem, originalMessage);
				return true;
			}
			return false;
		}

		private StoreMessage ComposeMessage(MailItem mailItem)
		{
			StoreMessage storeMessage = StoreMessage.Create();
			storeMessage.MimeStream = mailItem.GetMimeReadStream();
			storeMessage.FromAddress = mailItem.FromAddress.ToString();
			storeMessage.MessageId = mailItem.Message.MessageId;
			if (!string.IsNullOrEmpty(storeMessage.FromAddress))
			{
				StringBuilder stringBuilder = new StringBuilder();
				stringBuilder.Append(string.Format("X-Sender: {0}", storeMessage.FromAddress));
				if (!string.IsNullOrEmpty(mailItem.EnvelopeId))
				{
					stringBuilder.Append(string.Format(" ENVID={0}", mailItem.EnvelopeId));
				}
				if (mailItem.DsnFormatRequested != DsnFormatRequested.NotSpecified)
				{
					if (mailItem.DsnFormatRequested == DsnFormatRequested.Headers)
					{
						stringBuilder.Append(" RET=HDRS");
					}
					else
					{
						stringBuilder.Append(" RET=FULL");
					}
				}
				stringBuilder.Append("\r\n");
				storeMessage.XSender = stringBuilder.ToString();
				foreach (EnvelopeRecipient envelopeRecipient in mailItem.Recipients)
				{
					StringBuilder stringBuilder2 = new StringBuilder();
					if (envelopeRecipient.RequestedReports != DsnTypeRequested.NotSpecified)
					{
						stringBuilder2.Append(" NOTIFY=");
						if (DsnTypeRequested.Delay == (envelopeRecipient.RequestedReports & DsnTypeRequested.Delay))
						{
							stringBuilder2.Append(DsnTypeRequested.Delay.ToString().ToUpper());
							stringBuilder2.Append(",");
						}
						if (DsnTypeRequested.Failure == (envelopeRecipient.RequestedReports & DsnTypeRequested.Failure))
						{
							stringBuilder2.Append(DsnTypeRequested.Failure.ToString().ToUpper());
							stringBuilder2.Append(",");
						}
						if (DsnTypeRequested.Never == (envelopeRecipient.RequestedReports & DsnTypeRequested.Never))
						{
							stringBuilder2.Append(DsnTypeRequested.Never.ToString().ToUpper());
							stringBuilder2.Append(",");
						}
						if (DsnTypeRequested.Success == (envelopeRecipient.RequestedReports & DsnTypeRequested.Success))
						{
							stringBuilder2.Append(DsnTypeRequested.Success.ToString().ToUpper());
						}
					}
					if (stringBuilder2.ToString().EndsWith(","))
					{
						stringBuilder2 = new StringBuilder(stringBuilder2.ToString().Remove(stringBuilder2.ToString().Length - 1));
					}
					if (!string.IsNullOrEmpty(envelopeRecipient.OriginalRecipient))
					{
						stringBuilder2.AppendFormat(" ORCPT={0}", envelopeRecipient.OriginalRecipient);
					}
					int num = envelopeRecipient.Address.ToString().IndexOf("RECIPIENTS_CN=", StringComparison.OrdinalIgnoreCase);
					string text;
					if (num >= 0)
					{
						text = envelopeRecipient.Address.ToString().Substring(num + 14);
					}
					else
					{
						text = envelopeRecipient.Address.ToString();
					}
					storeMessage.XRecipients = storeMessage.XRecipients + string.Format("X-Receiver: {0}", text) + stringBuilder2.ToString() + "\r\n";
					storeMessage.Recipients = storeMessage.Recipients + text + ";";
				}
			}
			return storeMessage;
		}
	}
}
