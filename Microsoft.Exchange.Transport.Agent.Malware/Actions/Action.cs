using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using Microsoft.Exchange.Data;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Data.Globalization;
using Microsoft.Exchange.Data.Mime;
using Microsoft.Exchange.Data.Transport;
using Microsoft.Exchange.Data.Transport.Email;
using Microsoft.Exchange.Data.Transport.Routing;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Exchange.Transport.Agent.AntiSpam.Common;
using Microsoft.Exchange.Transport.Agent.Malware.Common;
using Microsoft.Filtering;
using Microsoft.Filtering.Results;

namespace Microsoft.Exchange.Transport.Agent.Malware.Actions
{
	internal abstract class Action
	{
		public abstract void Execute(ScanContext context, SubmittedMessageEventSource source, QueuedMessageEventArgs args);

		public void TrackMalwareAgentInfo(ScanContext context, SubmittedMessageEventSource source)
		{
			source.TrackAgentInfo("AMA", "SUM", MalwareResultLogger.GetVerdictInfo(context));
			IEnumerable<MalwareResultEngineInfo> enumerable = context.EngineResults ?? MalwareResultLogger.Parse(context.Results);
			foreach (MalwareResultEngineInfo malwareResultEngineInfo in enumerable)
			{
				source.TrackAgentInfo("AMA", "EV", malwareResultEngineInfo.GetDetectionInfo());
			}
			if (context.FingerPrintDetails != null)
			{
				source.TrackAgentInfo("AMA", "FP", context.FingerPrintDetails.GetVerdictInfo());
			}
		}

		internal static EmailMessage GenerateMalwareNotificationReport(CultureInfo cultureToUse, string fromAddress, string fromDisplayName, string toAddress, string toDisplayName, MailItem mailItem, string subject, string body, FilteringResults results)
		{
			if (mailItem == null || mailItem.Message == null)
			{
				throw new ArgumentNullException("The mail item or message is null.");
			}
			if (results == null)
			{
				throw new ArgumentNullException("The detection results are null.");
			}
			if (string.IsNullOrEmpty(toAddress) || toAddress == RoutingAddress.NullReversePath.ToString())
			{
				ExTraceGlobals.AgentTracer.TraceDebug(0L, "Unable to generate a malware notification. Recipient address is invalid.");
				return null;
			}
			EmailMessage emailMessage = null;
			try
			{
				emailMessage = EmailMessage.Create(BodyFormat.Text, false, Charset.UTF8.Name);
			}
			catch (InvalidCharsetException)
			{
				ExTraceGlobals.AgentTracer.TraceDebug(0L, "Unable to use the UTF8 charset for notification message, using default instead.");
				emailMessage = EmailMessage.Create(BodyFormat.Text, false);
			}
			emailMessage.From = new EmailRecipient(fromDisplayName, fromAddress);
			emailMessage.To.Add(new EmailRecipient(toDisplayName, toAddress));
			emailMessage.Subject = subject;
			StampNotification stampNotification = StampNotification.Create();
			emailMessage.MimeDocument.RootPart.Headers.AppendChild(new TextHeader(stampNotification.Name, "1.0"));
			using (Stream contentWriteStream = emailMessage.Body.GetContentWriteStream())
			{
				using (StreamWriter streamWriter = new StreamWriter(contentWriteStream))
				{
					string arg = string.Empty;
					string arg2 = string.Empty;
					string arg3 = string.Empty;
					streamWriter.WriteLine(body);
					streamWriter.WriteLine();
					streamWriter.WriteLine(MalwareStrings.AdditionalInformationHeader);
					streamWriter.WriteLine();
					if (mailItem.Message.Subject != null)
					{
						arg = mailItem.Message.Subject;
					}
					if (mailItem.Message.Sender != null && mailItem.Message.Sender.SmtpAddress != null)
					{
						arg2 = mailItem.Message.Sender.SmtpAddress;
					}
					if (mailItem.Message.MessageId != null)
					{
						arg3 = mailItem.Message.MessageId;
					}
					streamWriter.WriteLine("{0}{1}", MalwareStrings.SubjectHeader, arg);
					streamWriter.WriteLine("{0}{1}", MalwareStrings.SenderHeader, arg2);
					streamWriter.WriteLine();
					DateTime dateTimeReceived = mailItem.DateTimeReceived;
					streamWriter.WriteLine("{0}{1}", MalwareStrings.TimeReceivedHeader, mailItem.DateTimeReceived);
					streamWriter.WriteLine("{0}{1}", MalwareStrings.MessageIdHeader, arg3);
					streamWriter.WriteLine(MalwareStrings.FileListHeader);
					IDictionary<StreamIdentity, IEnumerable<ResultsExtensions.ScannerDetectionPair>> dictionary = ResultsExtensions.GroupDetectionsByStream(results, 3);
					foreach (StreamIdentity streamIdentity in dictionary.Keys)
					{
						IEnumerable<ResultsExtensions.ScannerDetectionPair> source = dictionary[streamIdentity];
						if (source.Count<ResultsExtensions.ScannerDetectionPair>() != 0)
						{
							ResultsExtensions.ScannerDetectionPair scannerDetectionPair = source.FirstOrDefault((ResultsExtensions.ScannerDetectionPair p) => p.Scanner.Vendor.Contains("Microsoft")) ?? source.First<ResultsExtensions.ScannerDetectionPair>();
							string name = scannerDetectionPair.Detection.Name;
							streamWriter.WriteLine(streamIdentity.Name + "\t " + name);
						}
					}
				}
			}
			return emailMessage;
		}

		internal void SendSenderNotifications(ScanContext context, QueuedMessageEventArgs args, ScanAction actionBeingExecuted)
		{
			try
			{
				MalwareFilterPolicy malwareConfig = context.MalwareConfig;
				if (!StampNotification.IsStamped(args.MailItem.Message.RootPart.Headers) && (malwareConfig.EnableInternalSenderNotifications || malwareConfig.EnableExternalSenderNotifications || malwareConfig.EnableInternalSenderAdminNotifications || malwareConfig.EnableExternalSenderAdminNotifications))
				{
					bool flag = !context.SmtpServer.AddressBook.IsInternal(args.MailItem.FromAddress);
					CultureInfo cultureInfo = flag ? context.AgentGlobal.TransportConfiguration.ExternalDsnDefaultLanguage : context.AgentGlobal.TransportConfiguration.InternalDsnDefaultLanguage;
					string notificationBodyText = string.Empty;
					string subject = string.Empty;
					string text = string.Empty;
					string fromName = string.Empty;
					string empty = string.Empty;
					bool flag2 = false;
					if (malwareConfig.CustomNotifications)
					{
						if (malwareConfig.CustomFromAddress.IsValidAddress)
						{
							text = (string)malwareConfig.CustomFromAddress;
							notificationBodyText = (flag ? malwareConfig.CustomExternalBody : malwareConfig.CustomInternalBody);
							subject = (flag ? malwareConfig.CustomExternalSubject : malwareConfig.CustomInternalSubject);
							fromName = malwareConfig.CustomFromName;
							flag2 = true;
						}
						else
						{
							MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_SMTPInvalidAddress, null, new object[]
							{
								args.MailItem.Message.MessageId,
								args.MailItem.Message.Date,
								args.MailItem.FromAddress,
								args.MailItem.MimeStreamLength,
								text.ToString()
							});
						}
					}
					else if (Action.TryGetRecipientDomainName(args.MailItem, out empty))
					{
						SmtpAddress smtpAddress = new SmtpAddress("postmaster", empty);
						if (smtpAddress.IsValidAddress)
						{
							cultureInfo = context.AgentGlobal.DetermineCultureBasedOnMessage(context.AgentGlobal.TransportConfiguration, args.MailItem, flag);
							text = smtpAddress.ToString();
							if (actionBeingExecuted == ScanAction.Blocked)
							{
								notificationBodyText = MalwareStrings.DefaultDeleteSenderNotificationText.ToString(cultureInfo);
								subject = MalwareStrings.DefaultDeleteSenderNotificationSubject.ToString(cultureInfo);
							}
							else
							{
								notificationBodyText = MalwareStrings.DefaultReplaceSenderNotificationText.ToString(cultureInfo);
								subject = MalwareStrings.DefaultReplaceSenderNotificationSubject.ToString(cultureInfo);
							}
							fromName = MalwareStrings.DefaultSenderNotificationFromName.ToString(cultureInfo);
							flag2 = true;
						}
						else
						{
							MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_SMTPInvalidAddress, null, new object[]
							{
								args.MailItem.Message.MessageId,
								args.MailItem.Message.Date,
								args.MailItem.FromAddress,
								args.MailItem.MimeStreamLength,
								smtpAddress.ToString()
							});
						}
					}
					else
					{
						ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Unable to determine the domain name of the recipient, no sender notification will be sent.");
					}
					if (flag2)
					{
						Action.CreateNotifications(context, args, malwareConfig, flag, notificationBodyText, subject, text, fromName, cultureInfo);
					}
				}
			}
			catch (Exception ex)
			{
				if (ex is OutOfMemoryException || ex is ThreadAbortException || ex is AccessViolationException || ex is SEHException)
				{
					throw;
				}
				ExTraceGlobals.ActionsTracer.TraceDebug<string>((long)this.GetHashCode(), "Unable to configure and send a notification. {0}", ex.Message);
			}
		}

		private static void CreateNotifications(ScanContext context, QueuedMessageEventArgs args, MalwareFilterPolicy config, bool external, string notificationBodyText, string subject, string fromAddress, string fromName, CultureInfo notificationCulture)
		{
			if (external)
			{
				if (config.EnableExternalSenderNotifications)
				{
					EmailMessage emailMessage = Action.GenerateMalwareNotificationReport(notificationCulture, fromAddress, fromName, args.MailItem.Message.Sender.SmtpAddress, args.MailItem.Message.Sender.DisplayName, args.MailItem, subject, notificationBodyText, context.Results);
					if (emailMessage != null)
					{
						context.SmtpServer.SubmitMessage(emailMessage);
					}
				}
				if (config.EnableExternalSenderAdminNotifications)
				{
					EmailMessage emailMessage2 = Action.GenerateMalwareNotificationReport(notificationCulture, fromAddress, fromName, config.ExternalSenderAdminAddress.ToString(), config.AdminDisplayName, args.MailItem, subject, notificationBodyText, context.Results);
					if (emailMessage2 != null)
					{
						context.SmtpServer.SubmitMessage(emailMessage2);
						return;
					}
				}
			}
			else
			{
				if (config.EnableInternalSenderNotifications)
				{
					EmailMessage emailMessage3 = Action.GenerateMalwareNotificationReport(notificationCulture, fromAddress, fromName, args.MailItem.Message.Sender.SmtpAddress, args.MailItem.Message.Sender.DisplayName, args.MailItem, subject, notificationBodyText, context.Results);
					if (emailMessage3 != null)
					{
						context.SmtpServer.SubmitMessage(emailMessage3);
					}
				}
				if (config.EnableInternalSenderAdminNotifications)
				{
					EmailMessage emailMessage4 = Action.GenerateMalwareNotificationReport(notificationCulture, fromAddress, fromName, config.InternalSenderAdminAddress.ToString(), config.AdminDisplayName, args.MailItem, subject, notificationBodyText, context.Results);
					if (emailMessage4 != null)
					{
						context.SmtpServer.SubmitMessage(emailMessage4);
					}
				}
			}
		}

		private static bool TryGetRecipientDomainName(MailItem mailItem, out string domainName)
		{
			domainName = string.Empty;
			Microsoft.Exchange.Data.Transport.AcceptedDomain acceptedDomain = null;
			if (CommonUtils.TryGetRecipientAcceptedDomain(mailItem, out acceptedDomain))
			{
				domainName = acceptedDomain.NameSpecification;
				return true;
			}
			return false;
		}
	}
}
