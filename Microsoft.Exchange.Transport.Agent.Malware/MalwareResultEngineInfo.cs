using System;
using System.Collections.Generic;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	internal class MalwareResultEngineInfo
	{
		public MalwareResultEngineInfo(string name, string signatureVersion)
		{
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentNullException("The engine name must be specified.", "name");
			}
			this.Name = name;
			this.DetectionsFound = false;
			this.SignatureVersion = ((signatureVersion != null) ? signatureVersion : string.Empty);
			this.Detection = string.Empty;
			this.FileName = string.Empty;
		}

		public MalwareResultEngineInfo(string name, string signatureVersion, string detection, string fileName)
		{
			if (string.IsNullOrEmpty(name))
			{
				throw new ArgumentNullException("The engine name must be specified.", "name");
			}
			this.Name = name;
			this.DetectionsFound = true;
			this.SignatureVersion = ((signatureVersion != null) ? signatureVersion : string.Empty);
			this.Detection = ((detection != null) ? detection : string.Empty);
			this.FileName = ((fileName != null) ? fileName : string.Empty);
		}

		public string Name { get; private set; }

		public bool DetectionsFound { get; private set; }

		public string SignatureVersion { get; private set; }

		public string Detection { get; private set; }

		public string FileName { get; private set; }

		public int TotalLength
		{
			get
			{
				int num = 0;
				num += this.Name.Length;
				num += this.SignatureVersion.Length;
				num += this.Detection.Length;
				return num + this.FileName.Length;
			}
		}

		public List<KeyValuePair<string, string>> GetDetectionInfo()
		{
			List<KeyValuePair<string, string>> list = new List<KeyValuePair<string, string>>();
			string text = MalwareResultEngineInfo.ConvertEngineNameToCode(this.Name);
			string text2 = this.DetectionsFound ? "1" : "0";
			int num = MalwareResultEngineInfo.KeyNames.EngineKeyLength + text.Length + text2.Length + this.SignatureVersion.Length + this.Detection.Length + this.FileName.Length;
			string text3 = this.SignatureVersion;
			string text4 = this.Detection;
			string text5 = this.FileName;
			if (num > 200)
			{
				int num2 = num - 200;
				if (num2 > 0)
				{
					text4 = MalwareResultEngineInfo.Truncate(text4, ref num2);
				}
				if (num2 > 0)
				{
					text3 = MalwareResultEngineInfo.Truncate(text3, ref num2);
				}
				if (num2 > 0)
				{
					text5 = MalwareResultEngineInfo.Truncate(text5, ref num2);
				}
				if (num2 > 0)
				{
					throw new ArgumentException("Unable to trim string to the necessary length to log.");
				}
			}
			list.Add(new KeyValuePair<string, string>("engine", text));
			list.Add(new KeyValuePair<string, string>("v", text2));
			list.Add(new KeyValuePair<string, string>("sig", text3));
			list.Add(new KeyValuePair<string, string>("name", text4));
			list.Add(new KeyValuePair<string, string>("file", text5));
			return list;
		}

		private static string ConvertEngineNameToCode(string engineName)
		{
			if (engineName.StartsWith("Microsoft"))
			{
				return "M";
			}
			if (engineName.StartsWith("Kaspersky"))
			{
				return "K";
			}
			if (engineName.StartsWith("Authentium"))
			{
				return "A";
			}
			return "U";
		}

		private static string Truncate(string source, ref int amountToTrim)
		{
			if (!string.IsNullOrEmpty(source))
			{
				int length = source.Length;
				if (length <= amountToTrim)
				{
					source = string.Empty;
					amountToTrim -= length;
				}
				else
				{
					source = source.Substring(0, length - amountToTrim);
					amountToTrim = 0;
				}
			}
			return source;
		}

		private const int MaxFormattedLength = 200;

		private class KeyNames
		{
			public static int EngineKeyLength
			{
				get
				{
					return "engine".Length + "v".Length + "sig".Length + "name".Length + "file".Length;
				}
			}

			public const string Verdict = "v";

			public const string Engine = "engine";

			public const string Signature = "sig";

			public const string Name = "name";

			public const string FileName = "file";
		}
	}
}
