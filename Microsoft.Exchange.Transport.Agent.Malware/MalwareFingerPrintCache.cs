using System;
using System.Configuration;
using System.Reflection;
using System.Threading;
using Microsoft.Exchange.Collections.TimeoutCache;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	internal class MalwareFingerPrintCache
	{
		private MalwareFingerPrintCache()
		{
			AppDomain currentDomain = AppDomain.CurrentDomain;
			ResolveEventHandler value = new ResolveEventHandler(MalwareFingerPrintCache.CurrentDomainAssemblyResolve);
			try
			{
				currentDomain.AssemblyResolve += value;
				this.config = MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration.GetInstance();
				this.cache = new TimeoutCache<MalwareFingerPrint, MalwareFingerPrintDetails>(this.config.NumberOfCacheBuckets, this.config.MaxCacheBucketSize, false);
			}
			finally
			{
				currentDomain.AssemblyResolve -= value;
			}
		}

		public long Count
		{
			get
			{
				return (long)this.cache.Count;
			}
		}

		public static MalwareFingerPrintCache GetInstance()
		{
			if (MalwareFingerPrintCache.singleton == null)
			{
				lock (MalwareFingerPrintCache.singletonLock)
				{
					if (MalwareFingerPrintCache.singleton == null)
					{
						MalwareFingerPrintCache malwareFingerPrintCache = new MalwareFingerPrintCache();
						Thread.MemoryBarrier();
						MalwareFingerPrintCache.singleton = malwareFingerPrintCache;
					}
				}
			}
			return MalwareFingerPrintCache.singleton;
		}

		public void Add(MalwareFingerPrint fingerPrint, MalwareFingerPrintDetails fingerPrintDetails)
		{
			if (fingerPrint == null)
			{
				return;
			}
			try
			{
				this.cache.AddSliding(fingerPrint, fingerPrintDetails, this.config.SlidingCacheTimeout, null);
			}
			catch (DuplicateKeyException)
			{
			}
		}

		public MalwareFingerPrintDetails Get(MalwareFingerPrint fingerPrint)
		{
			if (fingerPrint == null)
			{
				return null;
			}
			MalwareFingerPrintDetails result = null;
			this.cache.TryGetValue(fingerPrint, out result);
			return result;
		}

		private static Assembly CurrentDomainAssemblyResolve(object sender, ResolveEventArgs args)
		{
			Assembly executingAssembly = Assembly.GetExecutingAssembly();
			if (!(args.Name == executingAssembly.GetName().Name))
			{
				return null;
			}
			return executingAssembly;
		}

		private const string Name = "MalwareFingerPrinting";

		private static MalwareFingerPrintCache singleton;

		private static object singletonLock = new object();

		private TimeoutCache<MalwareFingerPrint, MalwareFingerPrintDetails> cache;

		private MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration config;

		private class MalwareFingerPrintCacheConfiguration : ConfigurationSection
		{
			[IntegerValidator(ExcludeRange = false, MinValue = 1, MaxValue = 20)]
			[ConfigurationProperty("numberOfCacheBuckets", IsRequired = false, DefaultValue = 1)]
			public int NumberOfCacheBuckets
			{
				get
				{
					return (int)base["numberOfCacheBuckets"];
				}
				internal set
				{
					base["numberOfCacheBuckets"] = value;
				}
			}

			[ConfigurationProperty("maxCacheBucketSize", IsRequired = false, DefaultValue = 1000)]
			[IntegerValidator(ExcludeRange = false, MinValue = 100)]
			public int MaxCacheBucketSize
			{
				get
				{
					return (int)base["maxCacheBucketSize"];
				}
				internal set
				{
					base["maxCacheBucketSize"] = value;
				}
			}

			[ConfigurationProperty("slidingCacheTimeout", IsRequired = false, DefaultValue = "00:15:00")]
			public TimeSpan SlidingCacheTimeout
			{
				get
				{
					return (TimeSpan)base["slidingCacheTimeout"];
				}
				internal set
				{
					base["slidingCacheTimeout"] = value;
				}
			}

			public static MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration GetInstance()
			{
				if (MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration.instance == null)
				{
					MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration.instance = (MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration)ConfigurationManager.GetSection("MalwareFingerPrintCache");
					if (MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration.instance == null)
					{
						string exeConfigFilename = Uri.UnescapeDataString(new UriBuilder(Assembly.GetExecutingAssembly().CodeBase).Path) + ".config";
						ExeConfigurationFileMap fileMap = new ExeConfigurationFileMap
						{
							ExeConfigFilename = exeConfigFilename
						};
						Configuration configuration = ConfigurationManager.OpenMappedExeConfiguration(fileMap, ConfigurationUserLevel.None);
						MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration.instance = (MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration)configuration.GetSection("MalwareFingerPrintCache");
					}
					if (MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration.instance == null)
					{
						MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration.instance = new MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration();
					}
				}
				return MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration.instance;
			}

			private const string NumberOfCacheBucketsKey = "numberOfCacheBuckets";

			private const string MaxCacheBucketSizeKey = "maxCacheBucketSize";

			private const string SlidingCacheTimeoutKey = "slidingCacheTimeout";

			private const string SectionName = "MalwareFingerPrintCache";

			private static MalwareFingerPrintCache.MalwareFingerPrintCacheConfiguration instance;
		}
	}
}
