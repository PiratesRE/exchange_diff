using System;
using System.Collections;
using System.Collections.Generic;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	[Serializable]
	internal class MalwareFingerPrint : IEquatable<MalwareFingerPrint>
	{
		public MalwareFingerPrint(byte[] fingerPrint)
		{
			if (fingerPrint == null || fingerPrint.Length == 0)
			{
				throw new ArgumentException("Invalid Fingerprint value");
			}
			this.fingerPrint = fingerPrint;
		}

		public bool Equals(MalwareFingerPrint otherObj)
		{
			return otherObj != null && this.IsEquals(this.fingerPrint, otherObj.fingerPrint);
		}

		public override bool Equals(object otherObj)
		{
			if (otherObj == null)
			{
				return false;
			}
			MalwareFingerPrint malwareFingerPrint = otherObj as MalwareFingerPrint;
			return malwareFingerPrint != null && this.IsEquals(this.fingerPrint, malwareFingerPrint.fingerPrint);
		}

		public override int GetHashCode()
		{
			return ((IStructuralEquatable)this.fingerPrint).GetHashCode(EqualityComparer<object>.Default);
		}

		private bool IsEquals(byte[] first, byte[] second)
		{
			if (first == null || second == null || first.Length != second.Length)
			{
				return false;
			}
			for (int i = 0; i < first.Length; i++)
			{
				if (first[i] != second[i])
				{
					return false;
				}
			}
			return true;
		}

		private byte[] fingerPrint;
	}
}
