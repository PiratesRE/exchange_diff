using System;
using System.Text;
using Microsoft.Exchange.Transport.Agent.Malware.Actions;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	internal class StampDefer : IEquatable<StampDefer>
	{
		public StampDefer(int deferredCount, int maxDeferredCount, double originalDeferWaitTimeMinutes, TimeSpan waitTime, Type finalAction, bool isCrashRecoverable, bool isTimeoutRecoverable)
		{
			if (maxDeferredCount != -1 && maxDeferredCount <= 0)
			{
				throw new ArgumentOutOfRangeException("The maximum deferred count has to be greater than 0.", "maxDeferredCount");
			}
			if (deferredCount <= 0)
			{
				throw new ArgumentOutOfRangeException("The deferred count has to be greater than 0.", "deferredCount");
			}
			if (!finalAction.IsSubclassOf(typeof(Microsoft.Exchange.Transport.Agent.Malware.Actions.Action)))
			{
				throw new ArgumentException("The final action type must be derived from Action", "finalAction");
			}
			this.DeferredCount = deferredCount;
			this.MaxDeferredCount = maxDeferredCount;
			this.WaitTime = waitTime;
			this.OriginalDeferWaitTime = TimeSpan.FromMinutes(originalDeferWaitTimeMinutes);
			this.FinalActionType = finalAction;
			this.IsCrashRecoverable = isCrashRecoverable;
			this.IsTimeoutRecoverable = isTimeoutRecoverable;
		}

		public int DeferredCount { get; private set; }

		public int MaxDeferredCount { get; set; }

		public TimeSpan WaitTime { get; private set; }

		public TimeSpan OriginalDeferWaitTime { get; private set; }

		public Type FinalActionType { get; private set; }

		public bool IsCrashRecoverable { get; private set; }

		public bool IsTimeoutRecoverable { get; private set; }

		public static bool TryParse(string text, double originalDeferWaitTimeMinutes, out StampDefer stamp)
		{
			stamp = null;
			if (string.IsNullOrEmpty(text))
			{
				return false;
			}
			string[] array = text.Split(new char[]
			{
				';'
			});
			if (array.Length < 4)
			{
				return false;
			}
			int num = 0;
			if (!int.TryParse(array[0], out num))
			{
				return false;
			}
			int num2 = 0;
			if (!int.TryParse(array[1], out num2))
			{
				return false;
			}
			TimeSpan waitTime = new TimeSpan(0L);
			if (!TimeSpan.TryParse(array[2], out waitTime))
			{
				return false;
			}
			Type typeFromHandle = typeof(ActionDefer);
			if (!StampDefer.TryParseActionType(array[3], out typeFromHandle))
			{
				return false;
			}
			bool isCrashRecoverable = false;
			if (array.Length >= 5 && !bool.TryParse(array[4], out isCrashRecoverable))
			{
				return false;
			}
			bool isTimeoutRecoverable = false;
			if (array.Length >= 6 && !bool.TryParse(array[5], out isTimeoutRecoverable))
			{
				return false;
			}
			if (num2 != -1 && num2 <= 0)
			{
				return false;
			}
			if (num <= 0)
			{
				return false;
			}
			stamp = new StampDefer(num, num2, originalDeferWaitTimeMinutes, waitTime, typeFromHandle, isCrashRecoverable, isTimeoutRecoverable);
			return true;
		}

		public static TimeSpan GetRandomizedWaitTime(double waitTimeMinutes)
		{
			double val = waitTimeMinutes * 60.0 + StampDefer.random.NextDouble() * 180.0;
			return TimeSpan.FromSeconds(Math.Min(val, Constants.SecondsPerDay));
		}

		public override string ToString()
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append(this.DeferredCount);
			stringBuilder.Append(';');
			stringBuilder.Append(this.MaxDeferredCount);
			stringBuilder.Append(';');
			stringBuilder.Append(this.WaitTime);
			stringBuilder.Append(';');
			stringBuilder.Append(StampDefer.ConvertTypeToString(this.FinalActionType));
			if (this.IsCrashRecoverable || this.IsTimeoutRecoverable)
			{
				stringBuilder.Append(';');
				stringBuilder.Append(this.IsCrashRecoverable);
				stringBuilder.Append(';');
				stringBuilder.Append(this.IsTimeoutRecoverable);
			}
			return stringBuilder.ToString();
		}

		public void NextDefer(int maxDeferAttempts, bool isCrashRecoverable, bool isTimeoutRecoverable)
		{
			this.IsCrashRecoverable = isCrashRecoverable;
			this.IsTimeoutRecoverable = isTimeoutRecoverable;
			if (maxDeferAttempts > 2147483646 || maxDeferAttempts < 0)
			{
				throw new ArgumentOutOfRangeException("The maximum defer attempts is outside of the acceptable range.");
			}
			int num = this.DeferredCount + 1;
			if (num > 2147483646 || num < 0)
			{
				throw new ArgumentOutOfRangeException("The defer count is outside of the acceptable range.");
			}
			if (num <= maxDeferAttempts)
			{
				this.DeferredCount++;
				this.WaitTime = StampDefer.GetRandomizedWaitTime((double)this.DeferredCount * this.OriginalDeferWaitTime.TotalMinutes);
				return;
			}
			if (this.MaxDeferredCount == -1)
			{
				this.DeferredCount++;
				int num2 = this.DeferredCount - maxDeferAttempts;
				if (num2 <= 0)
				{
					num2 = 1;
				}
				this.WaitTime = StampDefer.GetRandomizedWaitTime((double)num2 * Constants.MinutesinHour);
				return;
			}
			throw new ArgumentOutOfRangeException("Unable to be deferred any more.");
		}

		public bool Equals(StampDefer rhs)
		{
			return this.DeferredCount == rhs.DeferredCount && this.MaxDeferredCount == rhs.MaxDeferredCount && this.OriginalDeferWaitTime == rhs.OriginalDeferWaitTime && this.WaitTime == rhs.WaitTime && this.FinalActionType == rhs.FinalActionType && this.IsCrashRecoverable == rhs.IsCrashRecoverable && this.IsTimeoutRecoverable == rhs.IsTimeoutRecoverable;
		}

		private static string ConvertTypeToString(Type type)
		{
			string name = type.Name;
			if (!name.Equals("ActionDefer") && !name.Equals("ActionAllow") && !name.Equals("ActionDelete") && !name.Equals("ActionReplace") && !name.Equals("ActionDeferForever") && !name.Equals("ActionSoftDelete") && !name.Equals("ActionReject"))
			{
				throw new ArgumentException("The type is not one of the allowed types.");
			}
			return name;
		}

		private static bool TryParseActionType(string typeText, out Type type)
		{
			type = null;
			if (string.IsNullOrEmpty(typeText))
			{
				return false;
			}
			if (typeText.Equals("ActionDefer"))
			{
				type = typeof(ActionDefer);
				return true;
			}
			if (typeText.Equals("ActionAllow"))
			{
				type = typeof(ActionAllow);
				return true;
			}
			if (typeText.Equals("ActionDelete"))
			{
				type = typeof(ActionDelete);
				return true;
			}
			if (typeText.Equals("ActionReplace"))
			{
				type = typeof(ActionReplace);
				return true;
			}
			if (typeText.Equals("ActionDeferForever"))
			{
				type = typeof(ActionDeferForever);
				return true;
			}
			if (typeText.Equals("ActionSoftDelete"))
			{
				type = typeof(ActionSoftDelete);
				return true;
			}
			if (typeText.Equals("ActionReject"))
			{
				type = typeof(ActionReject);
				return true;
			}
			return false;
		}

		public const int DeferForever = -1;

		public const int MaxRandomDeferWindowInSeconds = 180;

		private const char SeparatorCharacter = ';';

		private static readonly Random random = new Random((int)DateTime.UtcNow.Ticks);
	}
}
