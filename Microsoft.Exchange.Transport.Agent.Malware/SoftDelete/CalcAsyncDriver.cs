using System;

namespace Microsoft.Exchange.Transport.Agent.Malware.SoftDelete
{
	internal class CalcAsyncDriver
	{
		public CalcAsyncDriver(DirectoryStorage directoryStorage)
		{
			if (directoryStorage == null)
			{
				throw new ArgumentNullException("The directory storage object must be specified.");
			}
			this.DirectoryStorage = directoryStorage;
			this.DirectoryPath = directoryStorage.GetStorageDestination();
		}

		private string DirectoryPath { get; set; }

		private DirectoryStorage DirectoryStorage { get; set; }

		public void BeginStorageSizeCalculation()
		{
			SoftDeleteQueue softDeleteQueue = new SoftDeleteQueue(this.DirectoryStorage);
			CalculationAsync calculationAsync = new CalculationAsync(softDeleteQueue);
			AsyncCallback callback = new AsyncCallback(this.UpdateStorageSize);
			calculationAsync.BeginCalculation(callback, calculationAsync);
		}

		private void UpdateStorageSize(IAsyncResult ar)
		{
			CalculationAsync calculationAsync = ar.AsyncState as CalculationAsync;
			long num = calculationAsync.EndCalculation(ar);
			this.DirectoryStorage.CurrentDirectorySize = num;
			this.DirectoryStorage.PerfCounterWrapper.UpdateRecoveryStoreSize(num, this.DirectoryStorage.MaxThreshold, true);
		}
	}
}
