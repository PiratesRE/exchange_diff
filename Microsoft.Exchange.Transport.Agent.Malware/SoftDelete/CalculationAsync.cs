using System;
using System.IO;
using System.Threading;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;

namespace Microsoft.Exchange.Transport.Agent.Malware.SoftDelete
{
	internal class CalculationAsync
	{
		public CalculationAsync(SoftDeleteQueue softDeleteQueue)
		{
			if (softDeleteQueue == null)
			{
				throw new ArgumentNullException("SoftDeleteQueue cannot be null with making a new instance of the calculationAsync.");
			}
			this.softDeleteQueue = softDeleteQueue;
		}

		public SoftDeleteQueue SoftDeleteQueue
		{
			get
			{
				return this.softDeleteQueue;
			}
		}

		public long GetDestinationSize(string directory)
		{
			if (string.IsNullOrEmpty(directory))
			{
				throw new ArgumentException("Directory cannot be created when null or empty.");
			}
			long num = 0L;
			if (!Directory.Exists(directory))
			{
				throw new ArgumentException("Directory does not exists.");
			}
			string[] files = Directory.GetFiles(directory.ToString(), "*.*");
			foreach (string fileName in files)
			{
				try
				{
					FileInfo fileInfo = new FileInfo(fileName);
					num += fileInfo.Length;
				}
				catch (OverflowException ex)
				{
					num = long.MaxValue;
					ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "The number of bytes has exceeded the value that can be stored in a type long. Error = {0}", ex.ToString());
					break;
				}
			}
			return num;
		}

		public IAsyncResult BeginCalculation(AsyncCallback callback, object state)
		{
			CalcAsyncResult<long> calcAsyncResult = new CalcAsyncResult<long>(callback, state);
			ThreadPool.QueueUserWorkItem(new WaitCallback(this.GetDestinationSizeHelper), calcAsyncResult);
			return calcAsyncResult;
		}

		public long EndCalculation(IAsyncResult calcAsyncResult)
		{
			if (calcAsyncResult == null)
			{
				throw new ArgumentException("EndCalculation called with calcAsyncResult as null");
			}
			CalcAsyncResult<long> calcAsyncResult2 = calcAsyncResult as CalcAsyncResult<long>;
			return calcAsyncResult2.EndInvoke();
		}

		private void GetDestinationSizeHelper(object calcAsyncResult)
		{
			if (calcAsyncResult == null)
			{
				throw new ArgumentException("GetDestinationSizeHelper cannot be called with calcAsyncResult set to null.");
			}
			CalcAsyncResult<long> calcAsyncResult2 = calcAsyncResult as CalcAsyncResult<long>;
			try
			{
				long destinationSize = this.GetDestinationSize(this.SoftDeleteQueue.Storage.GetStorageDestination());
				calcAsyncResult2.SetAsCompleted(destinationSize, false);
			}
			catch (Exception exception)
			{
				calcAsyncResult2.SetAsCompleted(exception, false);
			}
		}

		private SoftDeleteQueue softDeleteQueue;
	}
}
