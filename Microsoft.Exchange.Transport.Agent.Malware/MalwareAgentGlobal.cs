using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading;
using Microsoft.Exchange.Data.Directory;
using Microsoft.Exchange.Data.Directory.Management;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;
using Microsoft.Exchange.Data.Mime;
using Microsoft.Exchange.Data.Transport;
using Microsoft.Exchange.Data.Transport.Routing;
using Microsoft.Exchange.Diagnostics;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Exchange.MessagingPolicies.HygieneRules;
using Microsoft.Exchange.MessagingPolicies.Rules;
using Microsoft.Exchange.Net;
using Microsoft.Exchange.Threading;
using Microsoft.Exchange.Transport.Agent.Malware.Common;
using Microsoft.Exchange.Transport.Agent.Malware.SoftDelete;
using Microsoft.Filtering;
using Microsoft.Filtering.Configuration;
using Microsoft.Office.Datacenter.ActiveMonitoring;
using Microsoft.Win32;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	internal class MalwareAgentGlobal : IDisposable
	{
		public MalwareAgentGlobal()
		{
			Interlocked.Exchange(ref this.filteringServiceRecovery, 0);
			MalwareAgentGlobal.EventLogger.SetEventPeriod(3600);
			this.defaultExceptionHandler = new ExceptionHandler(() => this.ResetFilteringService());
			this.perfCounterWrapper = new MalwareAgentPerfCountersWrapper();
			this.serverSettingsUpdateFrequency = this.GetServerSettingsUpdateFrequency();
			Server localServer = null;
			ADNotificationAdapter.RunADOperation(delegate()
			{
				this.adSession = DirectorySessionFactory.Default.CreateTopologyConfigurationSession(ConsistencyMode.IgnoreInvalid, ADSessionSettings.FromRootOrgScopeSet(), 185, ".ctor", "f:\\15.00.1497\\sources\\dev\\Hygiene\\src\\AntiMalware\\Malware\\MalwareAgentGlobal.cs");
				localServer = this.adSession.ReadLocalServer();
				this.transportConfigContainer = this.adSession.FindSingletonConfigurationObject<TransportConfigContainer>();
			}, 5);
			this.serverSettings = new MalwareFilteringServer(localServer);
			this.InitializeADPollTimer();
			this.malwareFilterRulesCache = new TenantConfigurationCache<MalwareRulesPerTenantSettings>(31457280L, Components.TransportAppConfig.PerTenantCache.TransportRulesCacheExpiryInterval, Components.TransportAppConfig.PerTenantCache.TransportRulesCacheCleanupInterval, null, null);
			this.malwareFilterPolicyCache = new TenantConfigurationCache<TenantMalwareFilterPolicies>(31457280L, TimeSpan.FromMinutes(15.0), TimeSpan.FromMinutes(135.0), null, null);
			this.defaultConfig = new MalwareFilterPolicy();
			this.service = new FilteringService();
			this.overrideWaitTime = this.GetOverrideWaitTime();
			this.isSoftDeleteEnabled = this.IsSoftDeleteEnabled();
			if (this.isSoftDeleteEnabled)
			{
				this.LoadSoftDeleteQueue();
				CalcAsyncDriver calcAsyncDriver = new CalcAsyncDriver(this.DirectoryStorage);
				calcAsyncDriver.BeginStorageSizeCalculation();
				this.LoadDirectoryWatcher();
			}
			this.fingerPrintManager = new MalwareFingerPrintManager();
			this.ConsumerScannerSettings = this.GetConsumerScannerSettings();
		}

		public MalwareAgentGlobal(IFilteringService filteringService, ExceptionHandler defaultHandler, MalwareFilteringServer serverSettings, MalwareFilterPolicy defaultConfig, bool softDeleteEnabled)
		{
			Interlocked.Exchange(ref this.filteringServiceRecovery, 0);
			this.service = filteringService;
			this.defaultExceptionHandler = defaultHandler;
			this.serverSettings = serverSettings;
			this.defaultConfig = defaultConfig;
			if (softDeleteEnabled)
			{
				this.LoadSoftDeleteQueue();
				CalcAsyncDriver calcAsyncDriver = new CalcAsyncDriver(this.DirectoryStorage);
				calcAsyncDriver.BeginStorageSizeCalculation();
				this.LoadDirectoryWatcher();
			}
		}

		public static ExEventLog EventLogger
		{
			get
			{
				return MalwareAgentGlobal.eventLogger;
			}
		}

		public IFilteringService FilteringService
		{
			get
			{
				return this.service;
			}
		}

		public MalwareFingerPrintManager FingerPrintManager
		{
			get
			{
				return this.fingerPrintManager;
			}
		}

		public ExceptionHandler DefaultExceptionHandler
		{
			get
			{
				return this.defaultExceptionHandler;
			}
		}

		public MalwareAgentPerfCountersWrapper PerfCounterWrapper
		{
			get
			{
				return this.perfCounterWrapper;
			}
		}

		public MalwareFilteringServer ServerSettings
		{
			get
			{
				return this.serverSettings;
			}
		}

		public TransportConfigContainer TransportConfiguration
		{
			get
			{
				return this.transportConfigContainer;
			}
		}

		public SoftDeleteQueue SoftDeleteQueue
		{
			get
			{
				return this.softDeleteQueue;
			}
			internal set
			{
				this.softDeleteQueue = value;
			}
		}

		public DirectoryStorage DirectoryStorage
		{
			get
			{
				return this.directoryStorage;
			}
		}

		public bool SoftDeleteEnabled
		{
			get
			{
				return this.isSoftDeleteEnabled;
			}
			internal set
			{
				this.isSoftDeleteEnabled = value;
			}
		}

		public long MaxThresholdSizeBytes
		{
			get
			{
				return this.maxThresholdSizeBytes;
			}
			set
			{
				this.maxThresholdSizeBytes = value;
			}
		}

		public TimeSpan OverrideWaitTime
		{
			get
			{
				return this.overrideWaitTime;
			}
		}

		public Guid ServiceRecoveryPeriodicKey { get; set; }

		public IList<ScannerSettings> ConsumerScannerSettings { get; private set; }

		public static TransportMailItem GetTransportMailItem(MailItem mailItem)
		{
			TransportMailItemWrapper transportMailItemWrapper = mailItem as TransportMailItemWrapper;
			TransportMailItem result = null;
			if (transportMailItemWrapper != null)
			{
				result = transportMailItemWrapper.TransportMailItem;
			}
			return result;
		}

		public MalwareFilterPolicy GetMalwareConfig(SubmittedMessageEventSource source, QueuedMessageEventArgs args, SmtpServer smtpServer)
		{
			MalwareFilterPolicy malwarePolicy = null;
			OrganizationId organizationId;
			if (this.TryGetOrganizationId(args.MailItem, out organizationId))
			{
				bool flag = this.RunRulesToStampPolicyHeader(source, args, smtpServer, organizationId);
				if (flag)
				{
					string malwarePolicyName = MalwareAgentGlobal.GetMalwarePolicyNameFromHeader(args);
					if (malwarePolicyName != null && !this.TryGetMalwareFilterPolicyFromCache(organizationId, malwarePolicyName, out malwarePolicy))
					{
						ADOperationResult adoperationResult = ADNotificationAdapter.TryRunADOperation(delegate()
						{
							ITenantConfigurationSession tenantConfigurationSession = DirectorySessionFactory.Default.CreateTenantConfigurationSession(ConsistencyMode.IgnoreInvalid, ADSessionSettings.FromOrganizationIdWithoutRbacScopesServiceOnly(organizationId), 434, "GetMalwareConfig", "f:\\15.00.1497\\sources\\dev\\Hygiene\\src\\AntiMalware\\Malware\\MalwareAgentGlobal.cs");
							if (tenantConfigurationSession.SessionSettings != null && SharedConfiguration.IsDehydratedConfiguration(tenantConfigurationSession.SessionSettings.CurrentOrganizationId))
							{
								tenantConfigurationSession = (ITenantConfigurationSession)SharedConfiguration.CreateScopedToSharedConfigADSession(tenantConfigurationSession.SessionSettings.CurrentOrganizationId);
							}
							malwarePolicy = this.FindMalwareConfig(tenantConfigurationSession, (MalwareFilterPolicy config) => config.Name.Equals(malwarePolicyName, StringComparison.InvariantCultureIgnoreCase));
						});
						if (!adoperationResult.Succeeded)
						{
							ExTraceGlobals.AgentTracer.TraceError<OrganizationId, Exception>((long)this.GetHashCode(), "Failed to load tenant malware filter configuration. Reverting to the default configuration. Organization ID: {0}. Error: {1}", organizationId, adoperationResult.Exception);
						}
					}
				}
				if (malwarePolicy == null && !this.TryGetMalwareFilterPolicyFromCache(organizationId, null, out malwarePolicy))
				{
					ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Default malware filter policy could not be obtained from the cache. Global Default policy will be applied.");
				}
			}
			return malwarePolicy ?? this.defaultConfig;
		}

		public CultureInfo DetermineCultureBasedOnMessage(TransportConfigContainer configContainer, MailItem mailItem, bool external)
		{
			HeaderList headers = mailItem.Message.RootPart.Headers;
			Header acceptLanguageHeader = headers.FindFirst("Accept-Language");
			Header contentLanguageHeader = headers.FindFirst("Content-Language");
			return MessageLanguageParser.GetCulture(acceptLanguageHeader, contentLanguageHeader, external ? configContainer.ExternalDsnLanguageDetectionEnabled : configContainer.InternalDsnLanguageDetectionEnabled, external ? configContainer.ExternalDsnDefaultLanguage : configContainer.InternalDsnDefaultLanguage);
		}

		public bool ResetFilteringService()
		{
			if (Interlocked.CompareExchange(ref this.filteringServiceRecovery, 1, 0) == 0)
			{
				this.ServiceRecoveryPeriodicKey = Guid.NewGuid();
				this.service.Dispose();
				this.service = null;
				WaitCallback callBack = new WaitCallback(this.RecoverFilteringService);
				ThreadPool.QueueUserWorkItem(callBack);
				ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Malware scanner recovery requested.");
				return true;
			}
			return false;
		}

		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}

		internal static string GetMalwarePolicyNameFromHeader(QueuedMessageEventArgs args)
		{
			Header header = args.MailItem.Message.RootPart.Headers.FindFirst("X-MS-Exchange-Organization-MalwareFilterPolicy");
			if (header != null)
			{
				return header.Value;
			}
			return null;
		}

		protected virtual void Dispose(bool disposing)
		{
			if (disposing && !this.disposed)
			{
				if (this.perfCounterWrapper != null)
				{
					this.perfCounterWrapper.Dispose();
					this.perfCounterWrapper = null;
				}
				if (this.serverSettingsPollingTimer != null)
				{
					this.serverSettingsPollingTimer.Change(-1, -1);
					this.serverSettingsPollingTimer.Dispose(false);
				}
				if (this.fingerPrintManager != null)
				{
					this.fingerPrintManager.Dispose();
					this.fingerPrintManager = null;
				}
				this.disposed = true;
			}
		}

		private MalwareFilterPolicy FindMalwareConfig(IConfigurationSession adSession, Func<MalwareFilterPolicy, bool> findPolicyPredicate)
		{
			MalwareFilterPolicy[] array = adSession.Find<MalwareFilterPolicy>(null, QueryScope.SubTree, null, null, 0);
			if (array != null)
			{
				foreach (MalwareFilterPolicy malwareFilterPolicy in array)
				{
					if (findPolicyPredicate(malwareFilterPolicy))
					{
						return malwareFilterPolicy;
					}
				}
			}
			return null;
		}

		private IList<ScannerSettings> GetConsumerScannerSettings()
		{
			ConsumerSettings consumerSettings = new ConsumerSettings();
			List<ScannerSettings> list = new List<ScannerSettings>();
			foreach (string name in consumerSettings.DisabledEngines)
			{
				ScannerSettings item = new ScannerSettings
				{
					Name = name,
					Enabled = false
				};
				list.Add(item);
			}
			return list;
		}

		private bool TryGetMalwareFilterPolicyFromCache(OrganizationId organizationId, string malwarePolicyName, out MalwareFilterPolicy malwarePolicy)
		{
			TenantMalwareFilterPolicies tenantMalwareFilterPolicies = null;
			malwarePolicy = null;
			ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "Try to read Malware Filter Policy for tenant with Organization ID: {0}", organizationId.ToString());
			if (!this.malwareFilterPolicyCache.TryGetValue(organizationId, out tenantMalwareFilterPolicies))
			{
				return false;
			}
			if (tenantMalwareFilterPolicies == null)
			{
				throw new InvalidOperationException("malwareFilterPolicyCache.TryGetValue() returned true and null policy collection. Null is not expected by the code base in this case.");
			}
			if (tenantMalwareFilterPolicies.Count == 0)
			{
				return false;
			}
			if (malwarePolicyName != null)
			{
				return tenantMalwareFilterPolicies.GetMalwareFilterPolicyByName(malwarePolicyName, out malwarePolicy);
			}
			return tenantMalwareFilterPolicies.GetDefaultMalwareFilterPolicy(out malwarePolicy);
		}

		private void RecoverFilteringService(object state)
		{
			try
			{
				bool flag = false;
				do
				{
					ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Begin malware scanner recovery attempt.");
					try
					{
						IFilteringService filteringService = new FilteringService();
						if (filteringService != null)
						{
							Interlocked.CompareExchange<IFilteringService>(ref this.service, filteringService, null);
							MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_FilteringServiceAvailable, null, null);
							ExTraceGlobals.ActionsTracer.TraceDebug((long)this.GetHashCode(), "Completed malware scanner recovery.");
							flag = false;
						}
					}
					catch (Exception ex)
					{
						if (!flag)
						{
							MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_FilteringServiceNotAvailable, this.ServiceRecoveryPeriodicKey.ToString(), null);
							flag = true;
						}
						ExTraceGlobals.ActionsTracer.TraceDebug<string>((long)this.GetHashCode(), "Malware scanner recovery attempt failed. Error: {0}", ex.Message);
						Thread.Sleep(TimeSpan.FromSeconds(5.0));
					}
				}
				while (this.service == null);
			}
			finally
			{
				Interlocked.CompareExchange(ref this.filteringServiceRecovery, 0, 1);
			}
		}

		private void LoadSoftDeleteQueue()
		{
			string text = string.Empty;
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\Setup"))
				{
					if (registryKey == null)
					{
						this.isSoftDeleteEnabled = false;
						ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Path not set to write to undeliverable folder.");
					}
					else
					{
						text = (registryKey.GetValue("MsiInstallPath") as string);
						text += "TransportRoles\\data\\Filtering\\Undeliverable\\";
						if (!Directory.Exists(text))
						{
							Directory.CreateDirectory(text);
							ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "The missing undeliverable directory was created successfully. {0}.", text);
						}
					}
				}
			}
			catch (Exception ex)
			{
				this.isSoftDeleteEnabled = false;
				ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "Could not read registry error. SoftDeleteQueue is not enabled. {0}", ex.Message);
				return;
			}
			try
			{
				this.MaxThresholdSizeBytes = 2147483647L;
				using (RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\HubTransportRole\\MalwareAgent\\MalwareTestHooks"))
				{
					if (registryKey2 != null)
					{
						string s = registryKey2.GetValue("MaxThresholdOverride") as string;
						this.MaxThresholdSizeBytes = long.Parse(s);
					}
				}
			}
			catch
			{
				this.MaxThresholdSizeBytes = 2147483647L;
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Could not read registry error. MaxThresholdOverride is not enabled.");
			}
			this.directoryStorage = new DirectoryStorage(text, this.MaxThresholdSizeBytes, this.PerfCounterWrapper);
			this.softDeleteQueue = new SoftDeleteQueue(this.directoryStorage);
		}

		private void LoadDirectoryWatcher()
		{
			CalculationAsync calculationAsysnc = new CalculationAsync(this.softDeleteQueue);
			this.directoryChangeNotification = new DirectoryChangeNotification(calculationAsysnc);
			this.directoryChangeNotification.Run();
		}

		private bool IsSoftDeleteEnabled()
		{
			bool result;
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\HubTransportRole\\MalwareAgent"))
				{
					if (registryKey == null)
					{
						this.isSoftDeleteEnabled = false;
						result = this.isSoftDeleteEnabled;
					}
					else
					{
						string a = registryKey.GetValue("IsSoftDeleteEnable") as string;
						if (string.Equals(a, "true"))
						{
							this.isSoftDeleteEnabled = true;
						}
						else
						{
							this.isSoftDeleteEnabled = false;
						}
						result = this.isSoftDeleteEnabled;
					}
				}
			}
			catch (Exception)
			{
				this.isSoftDeleteEnabled = false;
				result = this.isSoftDeleteEnabled;
			}
			return result;
		}

		private void PollServerSettings(object state)
		{
			this.InitializeServerSettingsFromAD();
		}

		private void InitializeADPollTimer()
		{
			uint num = this.serverSettingsUpdateFrequency * 1000U;
			this.serverSettingsPollingTimer = new GuardedTimer(new TimerCallback(this.PollServerSettings), null, (long)((ulong)num), (long)((ulong)num));
		}

		private void InitializeServerSettingsFromAD()
		{
			Server localServer = null;
			ADOperationResult adoperationResult = ADNotificationAdapter.TryRunADOperation(delegate()
			{
				localServer = this.adSession.ReadLocalServer();
			}, 5);
			if (!adoperationResult.Succeeded || localServer == null)
			{
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Malware Agent had errors reading from AD.");
				return;
			}
			MalwareFilteringServer malwareFilteringServer = new MalwareFilteringServer(localServer);
			if (malwareFilteringServer == null)
			{
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), "Malware Filtering Server settings were not found in AD.");
				return;
			}
			Interlocked.Exchange<MalwareFilteringServer>(ref this.serverSettings, malwareFilteringServer);
		}

		private uint GetServerSettingsUpdateFrequency()
		{
			uint result = 600U;
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\HubTransportRole\\MalwareAgent\\MalwareTestHooks"))
				{
					if (registryKey != null)
					{
						try
						{
							result = uint.Parse(registryKey.GetValue("ServerSettingsPollingFrequency", 600U) as string);
						}
						catch (Exception ex)
						{
							ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "Could not read registry error. AD polling frequency will be set to the default value. Exception: {0}", ex.Message);
						}
					}
				}
			}
			catch (Exception)
			{
			}
			return result;
		}

		private TimeSpan GetOverrideWaitTime()
		{
			TimeSpan result = Constants.DefaultOverrideWaitTime;
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\ExchangeServer\\v15\\HubTransportRole\\MalwareAgent\\MalwareTestHooks"))
				{
					if (registryKey != null)
					{
						try
						{
							result = TimeSpan.Parse(registryKey.GetValue("OverrideWaitTime", Constants.DefaultOverrideWaitTime) as string);
						}
						catch (Exception ex)
						{
							ExTraceGlobals.AgentTracer.TraceDebug<string>((long)this.GetHashCode(), "Could not read registry error. Override wait time will be set to default value of 1 hour. Exception: {0}", ex.Message);
						}
					}
				}
			}
			catch (Exception)
			{
			}
			return result;
		}

		private bool TryGetOrganizationId(MailItem mailItem, out OrganizationId organizationId)
		{
			organizationId = null;
			if (MultiTenantTransport.MultiTenancyEnabled)
			{
				TransportMailItem transportMailItem = MalwareAgentGlobal.GetTransportMailItem(mailItem);
				if (transportMailItem != null)
				{
					organizationId = transportMailItem.OrganizationId;
				}
			}
			else
			{
				organizationId = OrganizationId.ForestWideOrgId;
			}
			return organizationId != null;
		}

		private bool RunRulesToStampPolicyHeader(SubmittedMessageEventSource source, QueuedMessageEventArgs args, SmtpServer server, OrganizationId organizationId)
		{
			RuleCollection amruleCollection = this.GetAMRuleCollection(args, organizationId);
			if (amruleCollection == null || amruleCollection.Count <= 0)
			{
				return false;
			}
			Exception ex = null;
			HygieneRuleUtils.TryRunRuleCollection(amruleCollection, server, args.MailItem, source, out ex);
			if (ex != null)
			{
				string text = string.Format("Error running MalwareFilterRules for policy discovery. Error: '{0}'", ex);
				ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), text);
				MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_PolicyDiscoveryFailed, organizationId.ToString(), new object[]
				{
					organizationId,
					text
				});
				EventNotificationItem.Publish(ExchangeComponent.AMADError.Name, "AntimalwareAgent.MalwareFilterPolicyDiscovery", null, string.Format("Malware Filter Policy dicovery for the tenant {0} failed. Message : {1}", organizationId, text), ResultSeverityLevel.Error, false);
				return false;
			}
			return true;
		}

		private RuleCollection GetAMRuleCollection(QueuedMessageEventArgs args, OrganizationId orgId)
		{
			RuleCollection result = null;
			if (null != orgId)
			{
				MalwareRulesPerTenantSettings malwareRulesPerTenantSettings;
				if (!this.malwareFilterRulesCache.TryGetValue(orgId, out malwareRulesPerTenantSettings) || malwareRulesPerTenantSettings == null)
				{
					string text = string.Format("Error parsing MalwareFilterRules for policy discovery. Tenant: '{0}'", orgId);
					MalwareAgentGlobal.EventLogger.LogEvent(AntimalwareEventLogConstants.Tuple_PolicyDiscoveryFailed, orgId.ToString(), new object[]
					{
						orgId,
						text
					});
					EventNotificationItem.Publish(ExchangeComponent.AMADError.Name, "AntimalwareAgent.MalwareFilterPolicyDiscovery", null, string.Format("Malware Filter Policy dicovery for the tenant {0} failed. Message : {1}", orgId, text), ResultSeverityLevel.Error, false);
					ExTraceGlobals.AgentTracer.TraceDebug((long)this.GetHashCode(), text);
					return null;
				}
				result = malwareRulesPerTenantSettings.RuleCollection;
			}
			return result;
		}

		private const uint ServerSettingsPollingFrequency = 600U;

		private static ExEventLog eventLogger = new ExEventLog(ExTraceGlobals.AgentTracer.Category, "MSExchange Antimalware");

		private readonly uint serverSettingsUpdateFrequency;

		private readonly TimeSpan overrideWaitTime;

		private IFilteringService service;

		private ExceptionHandler defaultExceptionHandler;

		private MalwareAgentPerfCountersWrapper perfCounterWrapper;

		private MalwareFilteringServer serverSettings;

		private MalwareFilterPolicy defaultConfig;

		private MalwareFingerPrintManager fingerPrintManager;

		private TransportConfigContainer transportConfigContainer;

		private SoftDeleteQueue softDeleteQueue;

		private DirectoryStorage directoryStorage;

		private DirectoryChangeNotification directoryChangeNotification;

		private bool isSoftDeleteEnabled;

		private int filteringServiceRecovery;

		private ITopologyConfigurationSession adSession;

		private GuardedTimer serverSettingsPollingTimer;

		private long maxThresholdSizeBytes = 2147483647L;

		private TenantConfigurationCache<MalwareRulesPerTenantSettings> malwareFilterRulesCache;

		private TenantConfigurationCache<TenantMalwareFilterPolicies> malwareFilterPolicyCache;

		private bool disposed;
	}
}
