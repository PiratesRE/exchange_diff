using System;
using System.Threading;
using Microsoft.Exchange.Diagnostics;
using Microsoft.Exchange.Diagnostics.Components.MalwareAgent;
using Microsoft.Exchange.Threading;

namespace Microsoft.Exchange.Transport.Agent.Malware
{
	internal class MalwareAgentPerfCountersWrapper : IDisposable
	{
		public MalwareAgentPerfCountersWrapper()
		{
			this.messagesScanned = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.scanTimePerMessage = new PercentileCounter(TimeSpan.FromMinutes(1.0), TimeSpan.FromSeconds(30.0), 6L, 120000L);
			this.bytesScannedPerMinute = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.scanTimePerMB = new PercentileCounter(TimeSpan.FromMinutes(1.0), TimeSpan.FromSeconds(30.0), 6L, 120000L);
			this.messagesWithMalware = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesWithMalware = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesDeferred = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesDeferred = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesWithScanErrors = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesWithScanErrors = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesWithPolicyViolations = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.messagesBlocked = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesBlocked = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesReplaced = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesReplaced = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesBypassed = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesBypassed = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesTimedOut = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesTimedOut = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesBelowInternalSLA = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesBelowInternalSLA = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesBelowPublishedSLA = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentMessagesBelowPublishedSLA = new SlidingPercentageCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision, true);
			this.messagesRejectedDueToFips = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.messagesRejectedDueToExternalErrors = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.updateTimer = new GuardedTimer(new TimerCallback(this.UpdateOnTimer), null, MalwareAgentPerfCountersWrapper.UpdateInterval, MalwareAgentPerfCountersWrapper.UpdateInterval);
			this.recoveryStoreMessagesWritten = new SlidingTotalCounter(MalwareAgentPerfCountersWrapper.SlidingCounterInterval, MalwareAgentPerfCountersWrapper.SlidingCounterPrecision);
			this.percentRecoveryStoreFull = 0.0;
			this.recoveryStoreBytesInUse = 0L;
		}

		public void Dispose()
		{
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}

		public void ResetCounters()
		{
			MalwareAgentPerfCounters.MessagesScanned.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesScannedPerSecond.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesWithMalware.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesDeferred.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesWithScanErrors.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesBlocked.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesReplaced.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesBypassed.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesTimedOut.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesBelowPublishedSLA.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesBelowInternalSLA.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesRejectedDueToFips.RawValue = 0L;
			MalwareAgentPerfCounters.MessagesRejectedDueToExternalErrors.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesBypassed.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesWithMalware.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesDeferred.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesWithScanErrors.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesBlocked.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesReplaced.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesTimedOut.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesBelowPublishedSLA.RawValue = 0L;
			MalwareAgentPerfCounters.PercentMessagesBelowInternalSLA.RawValue = 0L;
			MalwareAgentPerfCounters.MBytesScannedPerSecond.RawValue = 0L;
			MalwareAgentPerfCounters.MBytesScannedPerSecond_Base.RawValue = 629145600L;
			MalwareAgentPerfCounters.ScanTimePerMessage90Percentile.RawValue = 0L;
			MalwareAgentPerfCounters.ScanTimePerMessage99Percentile.RawValue = 0L;
			MalwareAgentPerfCounters.ScanTimePerMBytes90Percentile.RawValue = 0L;
			MalwareAgentPerfCounters.ScanTimePerMBytes99Percentile.RawValue = 0L;
			MalwareAgentPerfCounters.RecoveryStoreMessagesWritten.RawValue = 0L;
			MalwareAgentPerfCounters.PercentRecoveryStoreFull.RawValue = 0L;
			MalwareAgentPerfCounters.RecoveryStoreMBInUse.RawValue = 0L;
		}

		public void UpdateOnMalwareScan(ScanContext ctx, TimeSpan scanTime, long mimeStreamLength)
		{
			if (ScanStatus.BypassStamp == (ctx.ScanStatus & ScanStatus.BypassStamp) || ScanStatus.BypassSystem == (ctx.ScanStatus & ScanStatus.BypassSystem) || ctx.IsProbe)
			{
				return;
			}
			lock (this.syncObject)
			{
				if (ScanStatus.RejectedExternalError == (ctx.ScanStatus & ScanStatus.RejectedExternalError))
				{
					this.messagesRejectedDueToExternalErrors.AddValue(1L);
					this.UpdateAllCounters();
				}
				else
				{
					double value = 0.0;
					if (ctx.ScanActionExecuted != ScanAction.Skipped)
					{
						this.messagesScanned.AddValue(1L);
						if (mimeStreamLength > 0L && scanTime.TotalMilliseconds > 0.0)
						{
							try
							{
								double num = scanTime.TotalMilliseconds / (double)mimeStreamLength;
								value = num * 1048576.0;
							}
							catch (OverflowException)
							{
								ExTraceGlobals.ScanMessageTracer.TraceDebug((long)this.GetHashCode(), "The calculation of scanning throughput produced an overflow exception.");
								value = 0.0;
							}
						}
						this.bytesScannedPerMinute.AddValue(mimeStreamLength);
						this.scanTimePerMessage.AddValue(Convert.ToInt64(scanTime.TotalMilliseconds));
						this.scanTimePerMB.AddValue(Convert.ToInt64(value));
						this.percentMessagesWithMalware.AddDenominator(1L);
						this.percentMessagesDeferred.AddDenominator(1L);
						this.percentMessagesWithScanErrors.AddDenominator(1L);
						this.percentMessagesBlocked.AddDenominator(1L);
						this.percentMessagesReplaced.AddDenominator(1L);
						this.percentMessagesTimedOut.AddDenominator(1L);
						this.percentMessagesBelowInternalSLA.AddDenominator(1L);
						this.percentMessagesBelowPublishedSLA.AddDenominator(1L);
						if (ScanStatus.Infected == (ctx.ScanStatus & ScanStatus.Infected) || ctx.ScanActionExecuted == ScanAction.Blocked || ctx.ScanActionExecuted == ScanAction.Replaced)
						{
							this.messagesWithMalware.AddValue(1L);
							this.percentMessagesWithMalware.AddNumerator(1L);
						}
						if (ctx.ScanActionExecuted == ScanAction.Deferred)
						{
							this.messagesDeferred.AddValue(1L);
							this.percentMessagesDeferred.AddNumerator(1L);
						}
						else if (ctx.ScanActionExecuted == ScanAction.Blocked)
						{
							this.messagesBlocked.AddValue(1L);
							this.percentMessagesBlocked.AddNumerator(1L);
						}
						else if (ctx.ScanActionExecuted == ScanAction.Replaced)
						{
							this.messagesReplaced.AddValue(1L);
							this.percentMessagesReplaced.AddNumerator(1L);
						}
						if (ScanStatus.Error == (ctx.ScanStatus & ScanStatus.Error))
						{
							this.messagesWithScanErrors.AddValue(1L);
							this.percentMessagesWithScanErrors.AddNumerator(1L);
						}
						if (ScanStatus.PolicyViolation == (ctx.ScanStatus & ScanStatus.PolicyViolation))
						{
							this.messagesWithPolicyViolations.AddValue(1L);
						}
						if (ScanStatus.TimedOut == (ctx.ScanStatus & ScanStatus.TimedOut))
						{
							this.messagesTimedOut.AddValue(1L);
							this.percentMessagesTimedOut.AddNumerator(1L);
						}
						if (ctx.ScanActionExecuted == ScanAction.SoftDelete)
						{
							this.recoveryStoreMessagesWritten.AddValue(1L);
							this.UpdateRecoveryStoreSize(mimeStreamLength, ctx.AgentGlobal.MaxThresholdSizeBytes, false);
						}
						if (ScanStatus.RejectedInternalError == (ctx.ScanStatus & ScanStatus.RejectedInternalError))
						{
							this.messagesRejectedDueToFips.AddValue(1L);
						}
						if (ScanStatus.BelowPublishedSLA == (ctx.ScanStatus & ScanStatus.BelowPublishedSLA))
						{
							this.messagesBelowPublishedSLA.AddValue(1L);
							this.percentMessagesBelowPublishedSLA.AddNumerator(1L);
						}
						else if (ScanStatus.BelowInternalSLA == (ctx.ScanStatus & ScanStatus.BelowInternalSLA))
						{
							this.messagesBelowInternalSLA.AddValue(1L);
							this.percentMessagesBelowInternalSLA.AddNumerator(1L);
						}
					}
					else
					{
						this.messagesBypassed.AddValue(1L);
						this.percentMessagesBypassed.AddNumerator(1L);
					}
					this.percentMessagesBypassed.AddDenominator(1L);
					this.UpdateAllCounters();
				}
			}
		}

		public void UpdateRecoveryStoreSize(long sizeBytes, long maxThresholdBytes, bool resetCounter)
		{
			lock (this.syncObject)
			{
				this.recoveryStoreBytesInUse = (resetCounter ? sizeBytes : (this.recoveryStoreBytesInUse + sizeBytes));
				if (0L != maxThresholdBytes)
				{
					this.percentRecoveryStoreFull = (double)this.recoveryStoreBytesInUse / (double)maxThresholdBytes * 100.0;
				}
				else
				{
					this.percentRecoveryStoreFull = 0.0;
				}
			}
		}

		protected virtual void Dispose(bool disposing)
		{
			if (!this.disposed)
			{
				if (disposing)
				{
					this.updateTimer.Dispose(true);
					this.ResetCounters();
				}
				this.disposed = true;
			}
		}

		private void UpdateOnTimer(object state)
		{
			lock (this.syncObject)
			{
				this.UpdateAllCounters();
			}
		}

		private void UpdateAllCounters()
		{
			MalwareAgentPerfCounters.MessagesScanned.RawValue = this.messagesScanned.Sum;
			MalwareAgentPerfCounters.MessagesScannedPerSecond.RawValue = this.messagesScanned.Sum / 60L;
			MalwareAgentPerfCounters.MessagesWithMalware.RawValue = this.messagesWithMalware.Sum;
			MalwareAgentPerfCounters.MessagesDeferred.RawValue = this.messagesDeferred.Sum;
			MalwareAgentPerfCounters.MessagesWithScanErrors.RawValue = this.messagesWithScanErrors.Sum;
			MalwareAgentPerfCounters.MessagesWithPolicyViolations.RawValue = this.messagesWithPolicyViolations.Sum;
			MalwareAgentPerfCounters.MessagesBlocked.RawValue = this.messagesBlocked.Sum;
			MalwareAgentPerfCounters.MessagesReplaced.RawValue = this.messagesReplaced.Sum;
			MalwareAgentPerfCounters.MessagesBypassed.RawValue = this.messagesBypassed.Sum;
			MalwareAgentPerfCounters.MessagesTimedOut.RawValue = this.messagesTimedOut.Sum;
			MalwareAgentPerfCounters.MessagesBelowPublishedSLA.RawValue = this.messagesBelowPublishedSLA.Sum;
			MalwareAgentPerfCounters.MessagesBelowInternalSLA.RawValue = this.messagesBelowInternalSLA.Sum;
			MalwareAgentPerfCounters.MessagesRejectedDueToFips.RawValue = this.messagesRejectedDueToFips.Sum;
			MalwareAgentPerfCounters.MessagesRejectedDueToExternalErrors.RawValue = this.messagesRejectedDueToExternalErrors.Sum;
			if (0L == this.messagesScanned.Sum + this.messagesBypassed.Sum)
			{
				MalwareAgentPerfCounters.PercentMessagesBypassed.RawValue = 0L;
			}
			else
			{
				MalwareAgentPerfCounters.PercentMessagesBypassed.RawValue = Convert.ToInt64(this.percentMessagesBypassed.GetSlidingPercentage());
			}
			MalwareAgentPerfCounters.PercentMessagesWithMalware.RawValue = Convert.ToInt64(this.percentMessagesWithMalware.GetSlidingPercentage());
			MalwareAgentPerfCounters.PercentMessagesDeferred.RawValue = Convert.ToInt64(this.percentMessagesDeferred.GetSlidingPercentage());
			MalwareAgentPerfCounters.PercentMessagesWithScanErrors.RawValue = Convert.ToInt64(this.percentMessagesWithScanErrors.GetSlidingPercentage());
			MalwareAgentPerfCounters.PercentMessagesBlocked.RawValue = Convert.ToInt64(this.percentMessagesBlocked.GetSlidingPercentage());
			MalwareAgentPerfCounters.PercentMessagesReplaced.RawValue = Convert.ToInt64(this.percentMessagesReplaced.GetSlidingPercentage());
			MalwareAgentPerfCounters.PercentMessagesTimedOut.RawValue = Convert.ToInt64(this.percentMessagesTimedOut.GetSlidingPercentage());
			MalwareAgentPerfCounters.PercentMessagesBelowPublishedSLA.RawValue = Convert.ToInt64(this.percentMessagesBelowPublishedSLA.GetSlidingPercentage());
			MalwareAgentPerfCounters.PercentMessagesBelowInternalSLA.RawValue = Convert.ToInt64(this.percentMessagesBelowInternalSLA.GetSlidingPercentage());
			MalwareAgentPerfCounters.MBytesScannedPerSecond.RawValue = this.bytesScannedPerMinute.Sum;
			MalwareAgentPerfCounters.MBytesScannedPerSecond_Base.RawValue = 629145600L;
			MalwareAgentPerfCounters.ScanTimePerMessage90Percentile.RawValue = this.scanTimePerMessage.PercentileQuery(90.0);
			MalwareAgentPerfCounters.ScanTimePerMessage99Percentile.RawValue = this.scanTimePerMessage.PercentileQuery(99.0);
			MalwareAgentPerfCounters.ScanTimePerMBytes90Percentile.RawValue = this.scanTimePerMB.PercentileQuery(90.0);
			MalwareAgentPerfCounters.ScanTimePerMBytes99Percentile.RawValue = this.scanTimePerMB.PercentileQuery(99.0);
			MalwareAgentPerfCounters.RecoveryStoreMessagesWritten.RawValue = this.recoveryStoreMessagesWritten.Sum;
			MalwareAgentPerfCounters.PercentRecoveryStoreFull.RawValue = Convert.ToInt64(this.percentRecoveryStoreFull);
			MalwareAgentPerfCounters.RecoveryStoreMBInUse.RawValue = this.recoveryStoreBytesInUse / 1048576L;
		}

		private const long BytesInMB = 1048576L;

		private static readonly TimeSpan SlidingCounterInterval = TimeSpan.FromMinutes(1.0);

		private static readonly TimeSpan SlidingCounterPrecision = TimeSpan.FromSeconds(1.0);

		private static readonly TimeSpan MinReportInterval = TimeSpan.FromMinutes(15.0);

		private static readonly TimeSpan UpdateInterval = TimeSpan.FromSeconds(58.0);

		private readonly object syncObject = new object();

		private SlidingTotalCounter messagesScanned;

		private PercentileCounter scanTimePerMessage;

		private SlidingTotalCounter bytesScannedPerMinute;

		private PercentileCounter scanTimePerMB;

		private SlidingTotalCounter messagesWithMalware;

		private SlidingPercentageCounter percentMessagesWithMalware;

		private SlidingTotalCounter messagesDeferred;

		private SlidingPercentageCounter percentMessagesDeferred;

		private SlidingTotalCounter messagesWithScanErrors;

		private SlidingTotalCounter messagesWithPolicyViolations;

		private SlidingPercentageCounter percentMessagesWithScanErrors;

		private SlidingTotalCounter messagesBlocked;

		private SlidingPercentageCounter percentMessagesBlocked;

		private SlidingTotalCounter messagesReplaced;

		private SlidingPercentageCounter percentMessagesReplaced;

		private SlidingTotalCounter messagesBypassed;

		private SlidingPercentageCounter percentMessagesBypassed;

		private SlidingTotalCounter messagesTimedOut;

		private SlidingPercentageCounter percentMessagesTimedOut;

		private GuardedTimer updateTimer;

		private double percentRecoveryStoreFull;

		private long recoveryStoreBytesInUse;

		private SlidingTotalCounter messagesBelowInternalSLA;

		private SlidingPercentageCounter percentMessagesBelowInternalSLA;

		private SlidingTotalCounter messagesBelowPublishedSLA;

		private SlidingPercentageCounter percentMessagesBelowPublishedSLA;

		private SlidingTotalCounter recoveryStoreMessagesWritten;

		private SlidingTotalCounter messagesRejectedDueToFips;

		private SlidingTotalCounter messagesRejectedDueToExternalErrors;

		private bool disposed;
	}
}
