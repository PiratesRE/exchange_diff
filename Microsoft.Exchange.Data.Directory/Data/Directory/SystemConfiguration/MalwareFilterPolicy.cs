using System;
using System.Collections.Generic;
using System.Management.Automation;

namespace Microsoft.Exchange.Data.Directory.SystemConfiguration
{
	[ObjectScope(new ConfigScopes[]
	{
		ConfigScopes.TenantLocal,
		ConfigScopes.TenantSubTree
	})]
	[Serializable]
	public class MalwareFilterPolicy : ADConfigurationObject
	{
		internal override ADObjectSchema Schema
		{
			get
			{
				return MalwareFilterPolicy.schema;
			}
		}

		internal override ADObjectId ParentPath
		{
			get
			{
				return MalwareFilterPolicy.parentPath;
			}
		}

		internal override string MostDerivedObjectClass
		{
			get
			{
				return MalwareFilterPolicy.ldapName;
			}
		}

		internal override ExchangeObjectVersion MaximumSupportedExchangeObjectVersion
		{
			get
			{
				return ExchangeObjectVersion.Exchange2012;
			}
		}

		protected override void ValidateWrite(List<ValidationError> errors)
		{
			base.ValidateWrite(errors);
			if (this.CustomNotifications)
			{
				if (!this.CustomFromAddress.IsValidAddress)
				{
					errors.Add(new PropertyValidationError(DirectoryStrings.CustomFromAddressRequired, MalwareFilterPolicySchema.CustomFromAddress, this.CustomFromAddress));
				}
				if (this.EnableExternalSenderAdminNotifications && !this.ExternalSenderAdminAddress.IsValidAddress)
				{
					errors.Add(new PropertyValidationError(DirectoryStrings.ExternalSenderAdminAddressRequired, MalwareFilterPolicySchema.ExternalSenderAdminAddress, this.ExternalSenderAdminAddress));
				}
				if (this.EnableInternalSenderAdminNotifications && !this.InternalSenderAdminAddress.IsValidAddress)
				{
					errors.Add(new PropertyValidationError(DirectoryStrings.InternalSenderAdminAddressRequired, MalwareFilterPolicySchema.InternalSenderAdminAddress, this.InternalSenderAdminAddress));
				}
				if (this.EnableExternalSenderAdminNotifications || this.EnableExternalSenderNotifications)
				{
					if (string.IsNullOrEmpty(this.CustomExternalSubject))
					{
						errors.Add(new PropertyValidationError(DirectoryStrings.CustomExternalSubjectRequired, MalwareFilterPolicySchema.CustomExternalSubject, this.CustomExternalSubject));
					}
					if (string.IsNullOrEmpty(this.CustomExternalBody))
					{
						errors.Add(new PropertyValidationError(DirectoryStrings.CustomExternalBodyRequired, MalwareFilterPolicySchema.CustomExternalBody, this.CustomExternalBody));
					}
				}
				if (this.EnableInternalSenderAdminNotifications || this.EnableInternalSenderNotifications)
				{
					if (string.IsNullOrEmpty(this.CustomInternalSubject))
					{
						errors.Add(new PropertyValidationError(DirectoryStrings.CustomInternalSubjectRequired, MalwareFilterPolicySchema.CustomInternalSubject, this.CustomInternalSubject));
					}
					if (string.IsNullOrEmpty(this.CustomInternalBody))
					{
						errors.Add(new PropertyValidationError(DirectoryStrings.CustomInternalBodyRequired, MalwareFilterPolicySchema.CustomInternalBody, this.CustomInternalBody));
					}
				}
			}
			if (this.Action == MalwareFilteringAction.DeleteAttachmentAndUseCustomAlertText && string.IsNullOrEmpty(this.CustomAlertText))
			{
				errors.Add(new PropertyValidationError(DirectoryStrings.CustomAlertTextRequired, MalwareFilterPolicySchema.CustomAlertText, this.CustomAlertText));
			}
		}

		[Parameter]
		public string CustomAlertText
		{
			get
			{
				return (string)this[MalwareFilterPolicySchema.CustomAlertText];
			}
			set
			{
				this[MalwareFilterPolicySchema.CustomAlertText] = value;
			}
		}

		[Parameter]
		public new string AdminDisplayName
		{
			get
			{
				return (string)this[ADConfigurationObjectSchema.AdminDisplayName];
			}
			set
			{
				this[ADConfigurationObjectSchema.AdminDisplayName] = value;
			}
		}

		[Parameter]
		public string CustomInternalSubject
		{
			get
			{
				return (string)this[MalwareFilterPolicySchema.CustomInternalSubject];
			}
			set
			{
				this[MalwareFilterPolicySchema.CustomInternalSubject] = value;
			}
		}

		[Parameter]
		public string CustomInternalBody
		{
			get
			{
				return (string)this[MalwareFilterPolicySchema.CustomInternalBody];
			}
			set
			{
				this[MalwareFilterPolicySchema.CustomInternalBody] = value;
			}
		}

		[Parameter]
		public string CustomExternalSubject
		{
			get
			{
				return (string)this[MalwareFilterPolicySchema.CustomExternalSubject];
			}
			set
			{
				this[MalwareFilterPolicySchema.CustomExternalSubject] = value;
			}
		}

		[Parameter]
		public string CustomExternalBody
		{
			get
			{
				return (string)this[MalwareFilterPolicySchema.CustomExternalBody];
			}
			set
			{
				this[MalwareFilterPolicySchema.CustomExternalBody] = value;
			}
		}

		[Parameter]
		public string CustomFromName
		{
			get
			{
				return (string)this[MalwareFilterPolicySchema.CustomFromName];
			}
			set
			{
				this[MalwareFilterPolicySchema.CustomFromName] = value;
			}
		}

		[Parameter]
		public SmtpAddress CustomFromAddress
		{
			get
			{
				return (SmtpAddress)this[MalwareFilterPolicySchema.CustomFromAddress];
			}
			set
			{
				this[MalwareFilterPolicySchema.CustomFromAddress] = value;
			}
		}

		[Parameter]
		public SmtpAddress InternalSenderAdminAddress
		{
			get
			{
				return (SmtpAddress)this[MalwareFilterPolicySchema.InternalSenderAdminAddress];
			}
			set
			{
				this[MalwareFilterPolicySchema.InternalSenderAdminAddress] = value;
			}
		}

		[Parameter]
		public SmtpAddress ExternalSenderAdminAddress
		{
			get
			{
				return (SmtpAddress)this[MalwareFilterPolicySchema.ExternalSenderAdminAddress];
			}
			set
			{
				this[MalwareFilterPolicySchema.ExternalSenderAdminAddress] = value;
			}
		}

		[Parameter]
		public bool BypassInboundMessages
		{
			get
			{
				return (bool)this[MalwareFilterPolicySchema.BypassInboundMessages];
			}
			set
			{
				this[MalwareFilterPolicySchema.BypassInboundMessages] = value;
			}
		}

		[Parameter]
		public bool BypassOutboundMessages
		{
			get
			{
				return (bool)this[MalwareFilterPolicySchema.BypassOutboundMessages];
			}
			set
			{
				this[MalwareFilterPolicySchema.BypassOutboundMessages] = value;
			}
		}

		[Parameter]
		public MalwareFilteringAction Action
		{
			get
			{
				return (MalwareFilteringAction)this[MalwareFilterPolicySchema.Action];
			}
			set
			{
				this[MalwareFilterPolicySchema.Action] = (int)value;
			}
		}

		public bool IsDefault
		{
			get
			{
				return (bool)this[MalwareFilterPolicySchema.IsDefault];
			}
			internal set
			{
				this[MalwareFilterPolicySchema.IsDefault] = value;
			}
		}

		[Parameter]
		public bool CustomNotifications
		{
			get
			{
				return (bool)this[MalwareFilterPolicySchema.CustomNotifications];
			}
			set
			{
				this[MalwareFilterPolicySchema.CustomNotifications] = value;
			}
		}

		[Parameter]
		public bool EnableInternalSenderNotifications
		{
			get
			{
				return (bool)this[MalwareFilterPolicySchema.EnableInternalSenderNotifications];
			}
			set
			{
				this[MalwareFilterPolicySchema.EnableInternalSenderNotifications] = value;
			}
		}

		[Parameter]
		public bool EnableExternalSenderNotifications
		{
			get
			{
				return (bool)this[MalwareFilterPolicySchema.EnableExternalSenderNotifications];
			}
			set
			{
				this[MalwareFilterPolicySchema.EnableExternalSenderNotifications] = value;
			}
		}

		[Parameter]
		public bool EnableInternalSenderAdminNotifications
		{
			get
			{
				return (bool)this[MalwareFilterPolicySchema.EnableInternalSenderAdminNotifications];
			}
			set
			{
				this[MalwareFilterPolicySchema.EnableInternalSenderAdminNotifications] = value;
			}
		}

		[Parameter]
		public bool EnableExternalSenderAdminNotifications
		{
			get
			{
				return (bool)this[MalwareFilterPolicySchema.EnableExternalSenderAdminNotifications];
			}
			set
			{
				this[MalwareFilterPolicySchema.EnableExternalSenderAdminNotifications] = value;
			}
		}

		internal bool IsConflicted()
		{
			return ADSession.IsCNFObject(base.Id);
		}

		public long GetEstimatedSize()
		{
			long num = 0L;
			if (!string.IsNullOrEmpty(this.CustomAlertText))
			{
				num += (long)(this.CustomAlertText.Length * 2);
				num += 18L;
			}
			if (!string.IsNullOrEmpty(this.CustomInternalSubject))
			{
				num += (long)(this.CustomInternalSubject.Length * 2);
				num += 18L;
			}
			if (!string.IsNullOrEmpty(this.CustomInternalBody))
			{
				num += (long)(this.CustomInternalBody.Length * 2);
				num += 18L;
			}
			if (!string.IsNullOrEmpty(this.CustomExternalSubject))
			{
				num += (long)(this.CustomExternalSubject.Length * 2);
				num += 18L;
			}
			if (!string.IsNullOrEmpty(this.CustomExternalBody))
			{
				num += (long)(this.CustomExternalBody.Length * 2);
				num += 18L;
			}
			if (!string.IsNullOrEmpty(this.CustomFromName))
			{
				num += (long)(this.CustomFromName.Length * 2);
				num += 18L;
			}
			if (this.CustomFromAddress.Length != 0)
			{
				num += (long)(this.CustomFromAddress.Length * 2);
				num += 18L;
			}
			if (this.InternalSenderAdminAddress.Length != 0)
			{
				num += (long)(this.InternalSenderAdminAddress.Length * 2);
				num += 18L;
			}
			if (this.ExternalSenderAdminAddress.Length != 0)
			{
				num += (long)(this.ExternalSenderAdminAddress.Length * 2);
				num += 18L;
			}
			num += 8L;
			num += 4L;
			return num + 18L;
		}

		public const int FixedObjectOverhead = 18;

		private static readonly string ldapName = "msExchMalwareFilterConfig";

		private static readonly ADObjectId parentPath = new ADObjectId("CN=Malware Filter,CN=Transport Settings");

		private static readonly MalwareFilterPolicySchema schema = ObjectSchema.GetInstance<MalwareFilterPolicySchema>();
	}
}
