using System;
using Microsoft.Exchange.Common;

namespace Microsoft.Exchange.Data.Directory
{
	[Serializable]
	public class ADRawEntry : ConfigurableObject, ICloneable, IADRawEntry, IConfigurable, IPropertyBag, IReadOnlyPropertyBag
	{
		internal ADPropertyBag MservPropertyBag { get; set; }

		internal ADPropertyBag MbxPropertyBag { get; set; }

		public ADRawEntry() : base(new ADPropertyBag())
		{
		}

		internal ADRawEntry(ADPropertyBag propertyBag) : base(propertyBag)
		{
		}

		internal override ObjectSchema ObjectSchema
		{
			get
			{
				return null;
			}
		}

		public ADObjectId Id
		{
			get
			{
				return (ADObjectId)this.propertyBag[ADObjectSchema.Id];
			}
		}

		internal override void InitializeSchema()
		{
			base.InitializeSchema();
			ADObjectSchema adobjectSchema = this.ObjectSchema as ADObjectSchema;
			if (adobjectSchema != null)
			{
				adobjectSchema.InitializeAutogeneratedConstraints();
			}
		}

		internal void SetId(ADObjectId valueToSet)
		{
			if (valueToSet == null)
			{
				throw new ArgumentNullException("valueToSet");
			}
			if (string.IsNullOrEmpty(valueToSet.DistinguishedName))
			{
				throw new ArgumentException(DirectoryStrings.ErrorEmptyString("valueToSet.DistinguishedName"), "valueToSet");
			}
			this.propertyBag.SetField(ADObjectSchema.Id, valueToSet);
		}

		public string OriginatingServer
		{
			get
			{
				return (string)this[ADObjectSchema.OriginatingServer];
			}
			internal set
			{
				this.propertyBag.SetField(ADObjectSchema.OriginatingServer, value);
			}
		}

		internal DateTime? WhenReadUTC
		{
			get
			{
				return (DateTime?)this[ADObjectSchema.WhenReadUTC];
			}
			set
			{
				this.propertyBag.SetField(ADObjectSchema.WhenReadUTC, value);
			}
		}

		internal bool IsCached
		{
			get
			{
				return (bool)this[ADObjectSchema.IsCached];
			}
			set
			{
				this.propertyBag.SetField(ADObjectSchema.IsCached, BoxedConstants.GetBool(value));
			}
		}

		internal DirectoryBackendType DirectoryBackendType
		{
			get
			{
				return (DirectoryBackendType)this[ADObjectSchema.DirectoryBackendType];
			}
			set
			{
				this.propertyBag.SetField(ADObjectSchema.DirectoryBackendType, value);
			}
		}

		internal string GetDistinguishedNameOrName()
		{
			if (this.Id == null)
			{
				return (string)this[ADObjectSchema.Name];
			}
			return this.Id.DistinguishedName;
		}
	}
}
