using System;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.Exchange.Collections;
using Microsoft.Exchange.Data.Directory.Recipient;
using Microsoft.Exchange.Diagnostics.Components.Data.Directory;
using Microsoft.Exchange.Security.Authorization;

namespace Microsoft.Exchange.Data.Directory
{
	internal class ADObjectSchema : ObjectSchema
	{
		public ADObjectSchema()
		{
			this.InitializeADObjectSchemaProperties();
		}

		public string[] LdapAttributes
		{
			get
			{
				return this.ldapAttributes;
			}
		}

		public ReadOnlyCollection<ADPropertyDefinition> AllADObjectLinkProperties
		{
			get
			{
				return this.allADObjectLinkProperties;
			}
		}

		public bool HasAutogeneratedConstraints
		{
			get
			{
				return this.hasAutogeneratedConstraints;
			}
		}

		internal static string[] ADPropertyCollectionToLdapAttributes(IEnumerable<PropertyDefinition> schema, int id)
		{
			if (schema == null)
			{
				throw new ArgumentNullException("schema");
			}
			List<string> list = new List<string>();
			foreach (PropertyDefinition propertyDefinition in schema)
			{
				ADPropertyDefinition adpropertyDefinition = (ADPropertyDefinition)propertyDefinition;
				string ldapDisplayName = adpropertyDefinition.LdapDisplayName;
				ADObjectSchema.InternalAddSoftLinkAttribute(adpropertyDefinition, list, id);
				if (!string.IsNullOrEmpty(ldapDisplayName) && !adpropertyDefinition.IsCalculated && !list.Contains(ldapDisplayName))
				{
					ExTraceGlobals.ADPropertyRequestTracer.TraceDebug<string>((long)id, "ADObjectSchema::ADPropertyCollectionToLdapAttributes: requesting {0}", ldapDisplayName);
					list.Add(ldapDisplayName);
				}
				if (adpropertyDefinition.IsCalculated)
				{
					string name = adpropertyDefinition.Name;
					foreach (ProviderPropertyDefinition providerPropertyDefinition in adpropertyDefinition.SupportingProperties)
					{
						ADPropertyDefinition adpropertyDefinition2 = (ADPropertyDefinition)providerPropertyDefinition;
						if (!adpropertyDefinition2.IsTaskPopulated)
						{
							ldapDisplayName = adpropertyDefinition2.LdapDisplayName;
							if (!list.Contains(ldapDisplayName))
							{
								ExTraceGlobals.ADPropertyRequestTracer.TraceDebug<string, string>((long)id, "ADObjectSchema::ADPropertyCollectionToLdapAttributes: requesting supporting {0} for {1}", ldapDisplayName, name);
								list.Add(ldapDisplayName);
							}
						}
					}
				}
			}
			list.Add("lastKnownParent");
			list.Add("isDeleted");
			return list.ToArray();
		}

		internal void InitializeAutogeneratedConstraints()
		{
			if (!this.HasAutogeneratedConstraints)
			{
				lock (this.constraintsLock)
				{
					if (!this.HasAutogeneratedConstraints)
					{
						this.hasAutogeneratedConstraints = this.InternalUpdateProperties();
					}
				}
			}
		}

		protected void InitializeADObjectSchemaProperties()
		{
			this.AddShadowPropertiesToAllPropertiesList();
			this.InitializeAllPropertiesDictionary();
			this.InitializeFilterOnlyPropertiesDictionary();
			this.ldapAttributes = ADObjectSchema.ADPropertyCollectionToLdapAttributes(base.AllProperties, this.GetHashCode());
			this.InitializeADObjectLinkProperties();
		}

		private void AddShadowPropertiesToAllPropertiesList()
		{
			HashSet<PropertyDefinition> hashSet = new HashSet<PropertyDefinition>();
			foreach (PropertyDefinition propertyDefinition in base.AllProperties)
			{
				hashSet.TryAdd(propertyDefinition);
				ADPropertyDefinition adpropertyDefinition = propertyDefinition as ADPropertyDefinition;
				if (adpropertyDefinition != null && adpropertyDefinition.ShadowProperty != null)
				{
					hashSet.TryAdd(adpropertyDefinition.ShadowProperty);
				}
			}
			base.AllProperties = new ReadOnlyCollection<PropertyDefinition>(hashSet.ToArray());
			base.InitializePropertyCollections();
		}

		private void InitializeAllPropertiesDictionary()
		{
			this.allPropertiesDictionary = new Dictionary<string, ADPropertyDefinition>(StringComparer.OrdinalIgnoreCase);
			foreach (PropertyDefinition propertyDefinition in base.AllProperties)
			{
				ADPropertyDefinition adpropertyDefinition = propertyDefinition as ADPropertyDefinition;
				if (adpropertyDefinition != null)
				{
					this.AddPropertyToDictionary(this.allPropertiesDictionary, adpropertyDefinition);
				}
			}
		}

		private void InitializeFilterOnlyPropertiesDictionary()
		{
			this.allFilterOnlyPropertiesDictionary = new Dictionary<string, ADPropertyDefinition>(StringComparer.OrdinalIgnoreCase);
			foreach (PropertyDefinition propertyDefinition in base.AllFilterOnlyProperties)
			{
				ADPropertyDefinition adpropertyDefinition = propertyDefinition as ADPropertyDefinition;
				if (adpropertyDefinition != null && !string.IsNullOrEmpty(adpropertyDefinition.LdapDisplayName))
				{
					this.allFilterOnlyPropertiesDictionary.Add(adpropertyDefinition.LdapDisplayName, adpropertyDefinition);
				}
			}
		}

		private void InitializeADObjectLinkProperties()
		{
			List<ADPropertyDefinition> list = new List<ADPropertyDefinition>();
			foreach (PropertyDefinition propertyDefinition in base.AllProperties)
			{
				ADPropertyDefinition adpropertyDefinition = propertyDefinition as ADPropertyDefinition;
				if (adpropertyDefinition.Name != "HomeMTA" && adpropertyDefinition != null && adpropertyDefinition.Type == typeof(ADObjectId))
				{
					list.Add(adpropertyDefinition);
				}
			}
			this.allADObjectLinkProperties = new ReadOnlyCollection<ADPropertyDefinition>(list.ToArray());
		}

		private void AddPropertyToDictionary(Dictionary<string, ADPropertyDefinition> allPropertiesDictionary, ADPropertyDefinition adPropertyDefinition)
		{
			if (string.IsNullOrEmpty(adPropertyDefinition.LdapDisplayName) || adPropertyDefinition.IsCalculated)
			{
				if (adPropertyDefinition.IsCalculated && adPropertyDefinition.SupportingProperties != null)
				{
					foreach (ProviderPropertyDefinition providerPropertyDefinition in adPropertyDefinition.SupportingProperties)
					{
						ADPropertyDefinition adPropertyDefinition2 = (ADPropertyDefinition)providerPropertyDefinition;
						this.AddPropertyToDictionary(allPropertiesDictionary, adPropertyDefinition2);
					}
				}
				return;
			}
			if (!allPropertiesDictionary.ContainsKey(adPropertyDefinition.LdapDisplayName))
			{
				allPropertiesDictionary.Add(adPropertyDefinition.LdapDisplayName, adPropertyDefinition);
				return;
			}
			ADPropertyDefinition adpropertyDefinition = allPropertiesDictionary[adPropertyDefinition.LdapDisplayName];
		}

		internal ADPropertyDefinition GetADPropDefByLdapDisplayName(string name)
		{
			ADPropertyDefinition result;
			if (this.allPropertiesDictionary.TryGetValue(name, out result))
			{
				return result;
			}
			return null;
		}

		internal ADPropertyDefinition GetFilterOnlyADPropDefByLdapDisplayName(string name)
		{
			ADPropertyDefinition result;
			if (this.allFilterOnlyPropertiesDictionary.TryGetValue(name, out result))
			{
				return result;
			}
			return null;
		}

		private static void InternalAddSoftLinkAttribute(ADPropertyDefinition propertyDefinition, List<string> results, int id)
		{
			if (ADGlobalConfigSettings.SoftLinkEnabled && propertyDefinition.IsSoftLinkAttribute)
			{
				string ldapDisplayName = propertyDefinition.SoftLinkShadowProperty.LdapDisplayName;
				ExTraceGlobals.ADPropertyRequestTracer.TraceDebug<string>((long)id, "ADObjectSchema::ADPropertyCollectionToLdapAttributes: requesting {0}", ldapDisplayName);
				results.Add(ldapDisplayName);
			}
		}

		[Conditional("DEBUG")]
		private void InternalVerifyNoDuplicateProperties(ADPropertyDefinition adPropertyDefinition, ADPropertyDefinition dictionaryPropDef)
		{
		}

		private bool InternalUpdateProperties()
		{
			return ADSchemaDataProvider.Instance.UpdateProperties(base.AllProperties);
		}

		private Dictionary<string, ADPropertyDefinition> allPropertiesDictionary;

		private Dictionary<string, ADPropertyDefinition> allFilterOnlyPropertiesDictionary;

		private string[] ldapAttributes;

		private ReadOnlyCollection<ADPropertyDefinition> allADObjectLinkProperties;

		private bool hasAutogeneratedConstraints;

		private object constraintsLock = new object();

		public static readonly ADPropertyDefinition Id = new ADPropertyDefinition("Id", ExchangeObjectVersion.Exchange2003, typeof(ADObjectId), "distinguishedName", ADPropertyDefinitionFlags.Mandatory | ADPropertyDefinitionFlags.DoNotProvisionalClone | ADPropertyDefinitionFlags.DoNotValidate, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, MServRecipientSchema.Id, null);

		public static readonly ADPropertyDefinition ExchangeVersion = new ADPropertyDefinition("ExchangeVersion", ExchangeObjectVersion.Exchange2003, typeof(ExchangeObjectVersion), "msExchVersion", ADPropertyDefinitionFlags.DoNotProvisionalClone, ExchangeObjectVersion.Exchange2003, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, null, null);

		public static readonly ADPropertyDefinition RawName = new ADPropertyDefinition("RawName", ExchangeObjectVersion.Exchange2003, typeof(string), "name", ADPropertyDefinitionFlags.DoNotProvisionalClone, string.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, null, null);

		public static readonly ADPropertyDefinition ObjectCategory = new ADPropertyDefinition("ObjectCategory", ExchangeObjectVersion.Exchange2003, typeof(ADObjectId), "objectCategory", ADPropertyDefinitionFlags.WriteOnce | ADPropertyDefinitionFlags.DoNotValidate, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition ObjectClass = new ADPropertyDefinition("ObjectClass", ExchangeObjectVersion.Exchange2003, typeof(string), "objectClass", ADPropertyDefinitionFlags.ReadOnly | ADPropertyDefinitionFlags.MultiValued, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition ObjectState = new ADPropertyDefinition("ObjectState", ExchangeObjectVersion.Exchange2003, typeof(ObjectState), null, ADPropertyDefinitionFlags.TaskPopulated, Microsoft.Exchange.Data.ObjectState.New, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition OriginatingServer = new ADPropertyDefinition("OriginatingServer", ExchangeObjectVersion.Exchange2003, typeof(string), null, ADPropertyDefinitionFlags.TaskPopulated, string.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		internal static readonly ADPropertyDefinition RawCanonicalName = new ADPropertyDefinition("RawCanonicalName", ExchangeObjectVersion.Exchange2003, typeof(string), "canonicalName", ADPropertyDefinitionFlags.ReadOnly | ADPropertyDefinitionFlags.MultiValued, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition WhenCreatedRaw = new ADPropertyDefinition("WhenCreatedRaw", ExchangeObjectVersion.Exchange2003, typeof(string), "whenCreated", ADPropertyDefinitionFlags.ReadOnly, string.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition WhenChangedRaw = new ADPropertyDefinition("WhenChangedRaw", ExchangeObjectVersion.Exchange2003, typeof(string), "whenChanged", ADPropertyDefinitionFlags.ReadOnly, string.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition WhenCreated = new ADPropertyDefinition("WhenCreated", ExchangeObjectVersion.Exchange2003, typeof(DateTime?), "whenCreated", ADPropertyDefinitionFlags.ReadOnly | ADPropertyDefinitionFlags.Calculated, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.WhenCreatedRaw
		}, new CustomFilterBuilderDelegate(ADObject.DummyCustomFilterBuilderDelegate), new GetterDelegate(ADObject.WhenCreatedGetter), null, null, null);

		public static readonly ADPropertyDefinition WhenCreatedUTC = new ADPropertyDefinition("WhenCreatedUTC", ExchangeObjectVersion.Exchange2003, typeof(DateTime?), "whenCreated", ADPropertyDefinitionFlags.ReadOnly | ADPropertyDefinitionFlags.Calculated, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.WhenCreatedRaw
		}, new CustomFilterBuilderDelegate(ADObject.DummyCustomFilterBuilderDelegate), new GetterDelegate(ADObject.WhenCreatedUTCGetter), null, null, null);

		public static readonly ADPropertyDefinition WhenChanged = new ADPropertyDefinition("WhenChanged", ExchangeObjectVersion.Exchange2003, typeof(DateTime?), "whenChanged", ADPropertyDefinitionFlags.ReadOnly | ADPropertyDefinitionFlags.Calculated, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.WhenChangedRaw
		}, new CustomFilterBuilderDelegate(ADObject.DummyCustomFilterBuilderDelegate), new GetterDelegate(ADObject.WhenChangedGetter), null, null, null);

		public static readonly ADPropertyDefinition WhenChangedUTC = new ADPropertyDefinition("WhenChangedUTC", ExchangeObjectVersion.Exchange2003, typeof(DateTime?), "whenChanged", ADPropertyDefinitionFlags.ReadOnly | ADPropertyDefinitionFlags.Calculated, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.WhenChangedRaw
		}, new CustomFilterBuilderDelegate(ADObject.DummyCustomFilterBuilderDelegate), new GetterDelegate(ADObject.WhenChangedUTCGetter), null, null, null);

		public static readonly ADPropertyDefinition DistinguishedName = new ADPropertyDefinition("DistinguishedName", ExchangeObjectVersion.Exchange2003, typeof(string), "distinguishedName", ADPropertyDefinitionFlags.Calculated | ADPropertyDefinitionFlags.ForestSpecific, string.Empty, PropertyDefinitionConstraint.None, new PropertyDefinitionConstraint[]
		{
			new StringLengthConstraint(1, int.MaxValue)
		}, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.Id
		}, new CustomFilterBuilderDelegate(ADObject.DummyCustomFilterBuilderDelegate), new GetterDelegate(ADObject.DistinguishedNameGetter), new SetterDelegate(ADObject.DistinguishedNameSetter), MServRecipientSchema.DistinguishedName, null);

		public static readonly ADPropertyDefinition Guid = new ADPropertyDefinition("Guid", ExchangeObjectVersion.Exchange2003, typeof(Guid), "objectGuid", ADPropertyDefinitionFlags.ReadOnly | ADPropertyDefinitionFlags.Calculated | ADPropertyDefinitionFlags.Binary | ADPropertyDefinitionFlags.DoNotProvisionalClone, System.Guid.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.Id
		}, new CustomFilterBuilderDelegate(ADObject.DummyCustomFilterBuilderDelegate), new GetterDelegate(ADObject.GuidGetter), null, MServRecipientSchema.Guid, null);

		public static readonly ADPropertyDefinition NTSecurityDescriptor = new ADPropertyDefinition("NTSecurityDescriptor", ExchangeObjectVersion.Exchange2003, typeof(SecurityDescriptor), "ntSecurityDescriptor", ADPropertyDefinitionFlags.FilterOnly | ADPropertyDefinitionFlags.Binary | ADPropertyDefinitionFlags.DoNotProvisionalClone | ADPropertyDefinitionFlags.ForestSpecific, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, null, null);

		public static readonly ADPropertyDefinition CanonicalName = new ADPropertyDefinition("CanonicalName", ExchangeObjectVersion.Exchange2003, typeof(string), null, ADPropertyDefinitionFlags.ReadOnly | ADPropertyDefinitionFlags.Calculated, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.RawCanonicalName
		}, null, new GetterDelegate(ADObject.CanonicalNameGetter), null, MServRecipientSchema.CanonicalName, null);

		public static readonly ADPropertyDefinition Name = new ADPropertyDefinition("Name", ExchangeObjectVersion.Exchange2003, typeof(string), "name", ADPropertyDefinitionFlags.Calculated, string.Empty, PropertyDefinitionConstraint.None, new PropertyDefinitionConstraint[]
		{
			new NoLeadingOrTrailingWhitespaceConstraint(),
			new ADObjectNameStringLengthConstraint(1, 64),
			new ContainingNonWhitespaceConstraint(),
			new ADObjectNameCharacterConstraint(new char[]
			{
				'\0',
				'\n'
			})
		}, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.RawName
		}, new CustomFilterBuilderDelegate(ADObject.DummyCustomFilterBuilderDelegate), new GetterDelegate(ADObject.NameGetter), new SetterDelegate(ADObject.NameSetter), MServRecipientSchema.Name, null);

		public static readonly ADPropertyDefinition OriginalPrimarySmtpAddress = new ADPropertyDefinition("OriginalPrimarySmtpAddress", ExchangeObjectVersion.Exchange2003, typeof(SmtpAddress), null, ADPropertyDefinitionFlags.TaskPopulated, SmtpAddress.Empty, PropertyDefinitionConstraint.None, new PropertyDefinitionConstraint[]
		{
			new ValidSmtpAddressConstraint()
		}, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition OriginalWindowsEmailAddress = new ADPropertyDefinition("OriginalWindowsEmailAddress", ExchangeObjectVersion.Exchange2003, typeof(SmtpAddress), null, ADPropertyDefinitionFlags.TaskPopulated, SmtpAddress.Empty, PropertyDefinitionConstraint.None, new PropertyDefinitionConstraint[]
		{
			new ValidSmtpAddressConstraint()
		}, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition OrganizationalUnitRoot = new ADPropertyDefinition("OrganizationalUnitRoot", ExchangeObjectVersion.Exchange2003, typeof(ADObjectId), "msExchOURoot", ADPropertyDefinitionFlags.DoNotValidate, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition ConfigurationUnit = new ADPropertyDefinition("ConfigurationUnit", ExchangeObjectVersion.Exchange2003, typeof(ADObjectId), "msExchCU", ADPropertyDefinitionFlags.DoNotValidate, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		public static readonly ADPropertyDefinition OrganizationId = new ADPropertyDefinition("OrganizationId", ExchangeObjectVersion.Exchange2003, typeof(OrganizationId), null, ADPropertyDefinitionFlags.Calculated, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.OrganizationalUnitRoot,
			ADObjectSchema.ConfigurationUnit
		}, null, new GetterDelegate(ADObject.OrganizationIdGetter), new SetterDelegate(ADObject.OrganizationIdSetter), null, null);

		internal static readonly ADPropertyDefinition SharedConfiguration = new ADPropertyDefinition("SharedConfiguration", ExchangeObjectVersion.Exchange2010, typeof(ADObjectId), null, ADPropertyDefinitionFlags.TaskPopulated | ADPropertyDefinitionFlags.ValidateInSharedConfig, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, null, null);

		public static readonly ADPropertyDefinition ReplicationSignature = new ADPropertyDefinition("ReplicationSignature", ExchangeObjectVersion.Exchange2003, typeof(byte[]), "ReplicationSignature", ADPropertyDefinitionFlags.Binary, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, null, null);

		public static readonly ADPropertyDefinition CorrelationIdRaw = new ADPropertyDefinition("CorrelationIdRaw", ExchangeObjectVersion.Exchange2003, typeof(Guid), "msExchCorrelationId", ADPropertyDefinitionFlags.Binary | ADPropertyDefinitionFlags.DoNotProvisionalClone, System.Guid.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, null, null);

		public static readonly ADPropertyDefinition CorrelationId = new ADPropertyDefinition("CorrelationId", ExchangeObjectVersion.Exchange2003, typeof(Guid), null, ADPropertyDefinitionFlags.Calculated | ADPropertyDefinitionFlags.Binary | ADPropertyDefinitionFlags.DoNotProvisionalClone, System.Guid.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.CorrelationIdRaw,
			ADObjectSchema.Id
		}, new CustomFilterBuilderDelegate(ADObject.CorrelationIdFilterBuilder), new GetterDelegate(ADObject.CorrelationIdGetter), new SetterDelegate(ADObject.CorrelationIdSetter), MServRecipientSchema.CorrelationId, null);

		public static readonly ADPropertyDefinition ExchangeObjectIdRaw = new ADPropertyDefinition("ExchangeObjectIdRaw", ExchangeObjectVersion.Exchange2003, typeof(Guid), "msExchObjectID", ADPropertyDefinitionFlags.Binary | ADPropertyDefinitionFlags.DoNotProvisionalClone, System.Guid.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, null, null);

		public static readonly ADPropertyDefinition ExchangeObjectId = new ADPropertyDefinition("ExchangeObjectId", ExchangeObjectVersion.Exchange2003, typeof(Guid), null, ADPropertyDefinitionFlags.Calculated | ADPropertyDefinitionFlags.Binary | ADPropertyDefinitionFlags.DoNotProvisionalClone, System.Guid.Empty, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, new ProviderPropertyDefinition[]
		{
			ADObjectSchema.ExchangeObjectIdRaw,
			ADObjectSchema.Id
		}, new CustomFilterBuilderDelegate(ADObject.ExchangeObjectIdFilterBuilder), new GetterDelegate(ADObject.ExchangeObjectIdGetter), new SetterDelegate(ADObject.ExchangeObjectIdSetter), MServRecipientSchema.ExchangeObjectId, null);

		internal static readonly ADPropertyDefinition WhenReadUTC = new ADPropertyDefinition("WhenReadUTC", ExchangeObjectVersion.Exchange2003, typeof(DateTime?), null, ADPropertyDefinitionFlags.TaskPopulated, null, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		internal static readonly ADPropertyDefinition IsCached = new ADPropertyDefinition("IsCached", ExchangeObjectVersion.Exchange2003, typeof(bool), null, ADPropertyDefinitionFlags.TaskPopulated, false, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);

		internal static readonly ADPropertyDefinition DirectoryBackendType = new ADPropertyDefinition("DirectoryBackendType", ExchangeObjectVersion.Exchange2003, typeof(DirectoryBackendType), null, ADPropertyDefinitionFlags.TaskPopulated, Microsoft.Exchange.Data.Directory.DirectoryBackendType.None, PropertyDefinitionConstraint.None, PropertyDefinitionConstraint.None, SimpleProviderPropertyDefinition.None, null, null, null, null, null);
	}
}
