using System;
using System.Globalization;

namespace Microsoft.Exchange.Data.Directory.ABProviderFramework
{
	internal static class ABUtils
	{
		public static string EmailToLegacyExchangeDN(string email, string providerName)
		{
			return "/o=" + providerName + "/cn=" + email;
		}

		public static ProxyAddress LegacyExchangeDNToProxyAddress(string legacyExchangeDN, string providerName)
		{
			if (legacyExchangeDN.StartsWith("/o=" + providerName, StringComparison.OrdinalIgnoreCase))
			{
				int num = legacyExchangeDN.IndexOf("/cn=");
				string text = legacyExchangeDN.Substring(num + 4);
				if (!string.IsNullOrEmpty(text))
				{
					return ProxyAddress.Parse(text);
				}
			}
			throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "legacyExchangeDN '{0}' is not generated by the '{1}' provider or is invalid.", new object[]
			{
				legacyExchangeDN,
				providerName
			}));
		}

		public static bool IsValidEmailAddress(string emailAddress)
		{
			return !string.IsNullOrEmpty(emailAddress) && SmtpAddress.IsValidSmtpAddress(emailAddress);
		}
	}
}
