using System;
using System.Management.Automation;
using Microsoft.Exchange.Configuration.Tasks;
using Microsoft.Exchange.Data;
using Microsoft.Exchange.Data.Directory.SystemConfiguration;

namespace Microsoft.Exchange.PowerSharp.Management
{
	public class NewMalwareFilterPolicyCommand : SyntheticCommandWithPipelineInput<MalwareFilterPolicy, MalwareFilterPolicy>
	{
		private NewMalwareFilterPolicyCommand() : base("New-MalwareFilterPolicy")
		{
		}

		public NewMalwareFilterPolicyCommand(ExchangeManagementSession session) : this()
		{
			base.Session = session;
		}

		public virtual NewMalwareFilterPolicyCommand SetParameters(NewMalwareFilterPolicyCommand.DefaultParameters parameters)
		{
			base.SetParameters(parameters);
			return this;
		}

		public class DefaultParameters : ParametersBase
		{
			public virtual SwitchParameter IgnoreDehydratedFlag
			{
				set
				{
					base.PowerSharpParameters["IgnoreDehydratedFlag"] = value;
				}
			}

			public virtual string Name
			{
				set
				{
					base.PowerSharpParameters["Name"] = value;
				}
			}

			public virtual string AdminDisplayName
			{
				set
				{
					base.PowerSharpParameters["AdminDisplayName"] = value;
				}
			}

			public virtual string CustomAlertText
			{
				set
				{
					base.PowerSharpParameters["CustomAlertText"] = value;
				}
			}

			public virtual string CustomInternalSubject
			{
				set
				{
					base.PowerSharpParameters["CustomInternalSubject"] = value;
				}
			}

			public virtual string CustomInternalBody
			{
				set
				{
					base.PowerSharpParameters["CustomInternalBody"] = value;
				}
			}

			public virtual string CustomExternalSubject
			{
				set
				{
					base.PowerSharpParameters["CustomExternalSubject"] = value;
				}
			}

			public virtual string CustomExternalBody
			{
				set
				{
					base.PowerSharpParameters["CustomExternalBody"] = value;
				}
			}

			public virtual string CustomFromName
			{
				set
				{
					base.PowerSharpParameters["CustomFromName"] = value;
				}
			}

			public virtual SmtpAddress CustomFromAddress
			{
				set
				{
					base.PowerSharpParameters["CustomFromAddress"] = value;
				}
			}

			public virtual bool BypassInboundMessages
			{
				set
				{
					base.PowerSharpParameters["BypassInboundMessages"] = value;
				}
			}

			public virtual bool BypassOutboundMessages
			{
				set
				{
					base.PowerSharpParameters["BypassOutboundMessages"] = value;
				}
			}

			public virtual MalwareFilteringAction Action
			{
				set
				{
					base.PowerSharpParameters["Action"] = value;
				}
			}

			public virtual bool CustomNotifications
			{
				set
				{
					base.PowerSharpParameters["CustomNotifications"] = value;
				}
			}

			public virtual bool EnableInternalSenderNotifications
			{
				set
				{
					base.PowerSharpParameters["EnableInternalSenderNotifications"] = value;
				}
			}

			public virtual bool EnableExternalSenderNotifications
			{
				set
				{
					base.PowerSharpParameters["EnableExternalSenderNotifications"] = value;
				}
			}

			public virtual bool EnableInternalSenderAdminNotifications
			{
				set
				{
					base.PowerSharpParameters["EnableInternalSenderAdminNotifications"] = value;
				}
			}

			public virtual bool EnableExternalSenderAdminNotifications
			{
				set
				{
					base.PowerSharpParameters["EnableExternalSenderAdminNotifications"] = value;
				}
			}

			public virtual SmtpAddress InternalSenderAdminAddress
			{
				set
				{
					base.PowerSharpParameters["InternalSenderAdminAddress"] = value;
				}
			}

			public virtual SmtpAddress ExternalSenderAdminAddress
			{
				set
				{
					base.PowerSharpParameters["ExternalSenderAdminAddress"] = value;
				}
			}

			public virtual string Organization
			{
				set
				{
					base.PowerSharpParameters["Organization"] = ((value != null) ? new OrganizationIdParameter(value) : null);
				}
			}

			public virtual Fqdn DomainController
			{
				set
				{
					base.PowerSharpParameters["DomainController"] = value;
				}
			}

			public virtual SwitchParameter Verbose
			{
				set
				{
					base.PowerSharpParameters["Verbose"] = value;
				}
			}

			public virtual SwitchParameter Debug
			{
				set
				{
					base.PowerSharpParameters["Debug"] = value;
				}
			}

			public virtual ActionPreference ErrorAction
			{
				set
				{
					base.PowerSharpParameters["ErrorAction"] = value;
				}
			}

			public virtual ActionPreference WarningAction
			{
				set
				{
					base.PowerSharpParameters["WarningAction"] = value;
				}
			}

			public virtual SwitchParameter WhatIf
			{
				set
				{
					base.PowerSharpParameters["WhatIf"] = value;
				}
			}
		}
	}
}
